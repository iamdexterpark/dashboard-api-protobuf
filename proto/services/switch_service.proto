/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.switchservice;

import "google/protobuf/empty.proto";
import public "models/add_network_switch_stack_request.proto";
import public "models/clone_organization_switch_devices_request.proto";
import public "models/create_device_switch_routing_interface_request.proto";
import public "models/create_device_switch_routing_static_route_request.proto";
import public "models/create_network_switch_access_policy_request.proto";
import public "models/create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request.proto";
import public "models/create_network_switch_link_aggregation_request.proto";
import public "models/create_network_switch_port_schedule_request.proto";
import public "models/create_network_switch_qos_rule_request.proto";
import public "models/create_network_switch_routing_multicast_rendezvous_point_request.proto";
import public "models/create_network_switch_stack_request.proto";
import public "models/create_network_switch_stack_routing_interface_request.proto";
import public "models/cycle_device_switch_ports200_response.proto";
import public "models/cycle_device_switch_ports_request.proto";
import public "models/get_device_switch_ports200_response_inner.proto";
import public "models/get_device_switch_ports_statuses200_response_inner.proto";
import public "models/get_device_switch_routing_interfaces200_response_inner.proto";
import public "models/get_device_switch_routing_static_route200_response.proto";
import public "models/get_network_switch_access_control_lists200_response.proto";
import public "models/get_network_switch_access_policies200_response_inner.proto";
import public "models/get_network_switch_alternate_management_interface200_response.proto";
import public "models/get_network_switch_dhcp_server_policy200_response.proto";
import public "models/get_network_switch_dhcp_server_policy_arp_inspection_trusted_servers200_response_inner.proto";
import public "models/get_network_switch_dhcp_server_policy_arp_inspection_warnings_by_device200_response_inner.proto";
import public "models/get_network_switch_dscp_to_cos_mappings200_response.proto";
import public "models/get_network_switch_mtu200_response.proto";
import public "models/get_network_switch_port_schedules200_response_inner.proto";
import public "models/get_network_switch_qos_rule200_response.proto";
import public "models/get_network_switch_routing_multicast200_response.proto";
import public "models/get_network_switch_settings200_response.proto";
import public "models/get_network_switch_stack200_response.proto";
import public "models/get_network_switch_stack_routing_interface_dhcp200_response.proto";
import public "models/get_network_switch_storm_control200_response.proto";
import public "models/get_organization_config_template_switch_profile_ports200_response_inner.proto";
import public "models/get_organization_config_template_switch_profiles200_response_inner.proto";
import public "models/get_organization_switch_ports_by_switch200_response_inner.proto";
import public "models/remove_network_switch_stack_request.proto";
import public "models/todo_object_mapping.proto";
import public "models/update_device_switch_port_request.proto";
import public "models/update_device_switch_routing_interface_dhcp_request.proto";
import public "models/update_device_switch_routing_static_route_request.proto";
import public "models/update_device_switch_warm_spare_request.proto";
import public "models/update_network_switch_access_control_lists_request.proto";
import public "models/update_network_switch_access_policy_request.proto";
import public "models/update_network_switch_alternate_management_interface_request.proto";
import public "models/update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request.proto";
import public "models/update_network_switch_dhcp_server_policy_request.proto";
import public "models/update_network_switch_dscp_to_cos_mappings_request.proto";
import public "models/update_network_switch_link_aggregation_request.proto";
import public "models/update_network_switch_mtu_request.proto";
import public "models/update_network_switch_port_schedule_request.proto";
import public "models/update_network_switch_qos_rule_request.proto";
import public "models/update_network_switch_qos_rules_order_request.proto";
import public "models/update_network_switch_routing_multicast_rendezvous_point_request.proto";
import public "models/update_network_switch_routing_multicast_request.proto";
import public "models/update_network_switch_routing_ospf_request.proto";
import public "models/update_network_switch_settings_request.proto";
import public "models/update_network_switch_stack_routing_interface_dhcp_request.proto";
import public "models/update_network_switch_stack_routing_interface_request.proto";
import public "models/update_network_switch_storm_control_request.proto";
import public "models/update_network_switch_stp_request.proto";
import public "models/update_organization_config_template_switch_profile_port_request.proto";

service SwitchService {
  rpc AddNetworkSwitchStack (AddNetworkSwitchStackRequest) returns (GetNetworkSwitchStack200Response);

  rpc CloneOrganizationSwitchDevices (CloneOrganizationSwitchDevicesRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateDeviceSwitchRoutingInterface (CreateDeviceSwitchRoutingInterfaceRequest) returns (GetDeviceSwitchRoutingInterfaces200ResponseInner);

  rpc CreateDeviceSwitchRoutingStaticRoute (CreateDeviceSwitchRoutingStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchAccessPolicy (CreateNetworkSwitchAccessPolicyRequest) returns (GetNetworkSwitchAccessPolicies200ResponseInner);

  rpc CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer (CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) returns (GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner);

  rpc CreateNetworkSwitchLinkAggregation (CreateNetworkSwitchLinkAggregationRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchPortSchedule (CreateNetworkSwitchPortScheduleRequest) returns (GetNetworkSwitchPortSchedules200ResponseInner);

  rpc CreateNetworkSwitchQosRule (CreateNetworkSwitchQosRuleRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchRoutingMulticastRendezvousPoint (CreateNetworkSwitchRoutingMulticastRendezvousPointRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchStack (CreateNetworkSwitchStackRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchStackRoutingInterface (CreateNetworkSwitchStackRoutingInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchStackRoutingStaticRoute (CreateNetworkSwitchStackRoutingStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc CycleDeviceSwitchPorts (CycleDeviceSwitchPortsRequest) returns (CycleDeviceSwitchPorts200Response);

  rpc DeleteDeviceSwitchRoutingInterface (DeleteDeviceSwitchRoutingInterfaceRequest) returns (google.protobuf.Empty);

  rpc DeleteDeviceSwitchRoutingStaticRoute (DeleteDeviceSwitchRoutingStaticRouteRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchAccessPolicy (DeleteNetworkSwitchAccessPolicyRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer (DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchLinkAggregation (DeleteNetworkSwitchLinkAggregationRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchPortSchedule (DeleteNetworkSwitchPortScheduleRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchQosRule (DeleteNetworkSwitchQosRuleRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchRoutingMulticastRendezvousPoint (DeleteNetworkSwitchRoutingMulticastRendezvousPointRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchStack (DeleteNetworkSwitchStackRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchStackRoutingInterface (DeleteNetworkSwitchStackRoutingInterfaceRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchStackRoutingStaticRoute (DeleteNetworkSwitchStackRoutingStaticRouteRequest) returns (google.protobuf.Empty);

  rpc GetDeviceSwitchPort (GetDeviceSwitchPortRequest) returns (GetDeviceSwitchPorts200ResponseInner);

  rpc GetDeviceSwitchPorts (GetDeviceSwitchPortsRequest) returns (GetDeviceSwitchPortsResponse);

  rpc GetDeviceSwitchPortsStatuses (GetDeviceSwitchPortsStatusesRequest) returns (GetDeviceSwitchPortsStatusesResponse);

  rpc GetDeviceSwitchPortsStatusesPackets (GetDeviceSwitchPortsStatusesPacketsRequest) returns (GetDeviceSwitchPortsStatusesPacketsResponse);

  rpc GetDeviceSwitchRoutingInterface (GetDeviceSwitchRoutingInterfaceRequest) returns (GetDeviceSwitchRoutingInterfaces200ResponseInner);

  rpc GetDeviceSwitchRoutingInterfaceDhcp (GetDeviceSwitchRoutingInterfaceDhcpRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceSwitchRoutingInterfaces (GetDeviceSwitchRoutingInterfacesRequest) returns (GetDeviceSwitchRoutingInterfacesResponse);

  rpc GetDeviceSwitchRoutingStaticRoute (GetDeviceSwitchRoutingStaticRouteRequest) returns (GetDeviceSwitchRoutingStaticRoute200Response);

  rpc GetDeviceSwitchRoutingStaticRoutes (GetDeviceSwitchRoutingStaticRoutesRequest) returns (GetDeviceSwitchRoutingStaticRoutesResponse);

  rpc GetDeviceSwitchWarmSpare (GetDeviceSwitchWarmSpareRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchAccessControlLists (GetNetworkSwitchAccessControlListsRequest) returns (GetNetworkSwitchAccessControlLists200Response);

  rpc GetNetworkSwitchAccessPolicies (GetNetworkSwitchAccessPoliciesRequest) returns (GetNetworkSwitchAccessPoliciesResponse);

  rpc GetNetworkSwitchAccessPolicy (GetNetworkSwitchAccessPolicyRequest) returns (GetNetworkSwitchAccessPolicies200ResponseInner);

  rpc GetNetworkSwitchAlternateManagementInterface (GetNetworkSwitchAlternateManagementInterfaceRequest) returns (GetNetworkSwitchAlternateManagementInterface200Response);

  rpc GetNetworkSwitchDhcpServerPolicy (GetNetworkSwitchDhcpServerPolicyRequest) returns (GetNetworkSwitchDhcpServerPolicy200Response);

  rpc GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers (GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest) returns (GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse);

  rpc GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice (GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest) returns (GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse);

  rpc GetNetworkSwitchDscpToCosMappings (GetNetworkSwitchDscpToCosMappingsRequest) returns (GetNetworkSwitchDscpToCosMappings200Response);

  rpc GetNetworkSwitchLinkAggregations (GetNetworkSwitchLinkAggregationsRequest) returns (GetNetworkSwitchLinkAggregationsResponse);

  rpc GetNetworkSwitchMtu (GetNetworkSwitchMtuRequest) returns (GetNetworkSwitchMtu200Response);

  rpc GetNetworkSwitchPortSchedules (GetNetworkSwitchPortSchedulesRequest) returns (GetNetworkSwitchPortSchedulesResponse);

  rpc GetNetworkSwitchQosRule (GetNetworkSwitchQosRuleRequest) returns (GetNetworkSwitchQosRule200Response);

  rpc GetNetworkSwitchQosRules (GetNetworkSwitchQosRulesRequest) returns (GetNetworkSwitchQosRulesResponse);

  rpc GetNetworkSwitchQosRulesOrder (GetNetworkSwitchQosRulesOrderRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchRoutingMulticast (GetNetworkSwitchRoutingMulticastRequest) returns (GetNetworkSwitchRoutingMulticast200Response);

  rpc GetNetworkSwitchRoutingMulticastRendezvousPoint (GetNetworkSwitchRoutingMulticastRendezvousPointRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchRoutingMulticastRendezvousPoints (GetNetworkSwitchRoutingMulticastRendezvousPointsRequest) returns (GetNetworkSwitchRoutingMulticastRendezvousPointsResponse);

  rpc GetNetworkSwitchRoutingOspf (GetNetworkSwitchRoutingOspfRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchSettings (GetNetworkSwitchSettingsRequest) returns (GetNetworkSwitchSettings200Response);

  rpc GetNetworkSwitchStack (GetNetworkSwitchStackRequest) returns (GetNetworkSwitchStack200Response);

  rpc GetNetworkSwitchStackRoutingInterface (GetNetworkSwitchStackRoutingInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchStackRoutingInterfaceDhcp (GetNetworkSwitchStackRoutingInterfaceDhcpRequest) returns (GetNetworkSwitchStackRoutingInterfaceDhcp200Response);

  rpc GetNetworkSwitchStackRoutingInterfaces (GetNetworkSwitchStackRoutingInterfacesRequest) returns (GetNetworkSwitchStackRoutingInterfacesResponse);

  rpc GetNetworkSwitchStackRoutingStaticRoute (GetNetworkSwitchStackRoutingStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchStackRoutingStaticRoutes (GetNetworkSwitchStackRoutingStaticRoutesRequest) returns (GetNetworkSwitchStackRoutingStaticRoutesResponse);

  rpc GetNetworkSwitchStacks (GetNetworkSwitchStacksRequest) returns (GetNetworkSwitchStacksResponse);

  rpc GetNetworkSwitchStormControl (GetNetworkSwitchStormControlRequest) returns (GetNetworkSwitchStormControl200Response);

  rpc GetNetworkSwitchStp (GetNetworkSwitchStpRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationConfigTemplateSwitchProfilePort (GetOrganizationConfigTemplateSwitchProfilePortRequest) returns (GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner);

  rpc GetOrganizationConfigTemplateSwitchProfilePorts (GetOrganizationConfigTemplateSwitchProfilePortsRequest) returns (GetOrganizationConfigTemplateSwitchProfilePortsResponse);

  rpc GetOrganizationConfigTemplateSwitchProfiles (GetOrganizationConfigTemplateSwitchProfilesRequest) returns (GetOrganizationConfigTemplateSwitchProfilesResponse);

  rpc GetOrganizationSwitchPortsBySwitch (GetOrganizationSwitchPortsBySwitchRequest) returns (GetOrganizationSwitchPortsBySwitchResponse);

  rpc RemoveNetworkSwitchStack (RemoveNetworkSwitchStackRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceSwitchPort (UpdateDeviceSwitchPortRequest) returns (GetDeviceSwitchPorts200ResponseInner);

  rpc UpdateDeviceSwitchRoutingInterface (UpdateDeviceSwitchRoutingInterfaceRequest) returns (GetDeviceSwitchRoutingInterfaces200ResponseInner);

  rpc UpdateDeviceSwitchRoutingInterfaceDhcp (UpdateDeviceSwitchRoutingInterfaceDhcpRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceSwitchRoutingStaticRoute (UpdateDeviceSwitchRoutingStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceSwitchWarmSpare (UpdateDeviceSwitchWarmSpareRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchAccessControlLists (UpdateNetworkSwitchAccessControlListsRequest) returns (GetNetworkSwitchAccessControlLists200Response);

  rpc UpdateNetworkSwitchAccessPolicy (UpdateNetworkSwitchAccessPolicyRequest) returns (GetNetworkSwitchAccessPolicies200ResponseInner);

  rpc UpdateNetworkSwitchAlternateManagementInterface (UpdateNetworkSwitchAlternateManagementInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchDhcpServerPolicy (UpdateNetworkSwitchDhcpServerPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer (UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) returns (GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner);

  rpc UpdateNetworkSwitchDscpToCosMappings (UpdateNetworkSwitchDscpToCosMappingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchLinkAggregation (UpdateNetworkSwitchLinkAggregationRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchMtu (UpdateNetworkSwitchMtuRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchPortSchedule (UpdateNetworkSwitchPortScheduleRequest) returns (GetNetworkSwitchPortSchedules200ResponseInner);

  rpc UpdateNetworkSwitchQosRule (UpdateNetworkSwitchQosRuleRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchQosRulesOrder (UpdateNetworkSwitchQosRulesOrderRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchRoutingMulticast (UpdateNetworkSwitchRoutingMulticastRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchRoutingMulticastRendezvousPoint (UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchRoutingOspf (UpdateNetworkSwitchRoutingOspfRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchSettings (UpdateNetworkSwitchSettingsRequest) returns (GetNetworkSwitchSettings200Response);

  rpc UpdateNetworkSwitchStackRoutingInterface (UpdateNetworkSwitchStackRoutingInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchStackRoutingInterfaceDhcp (UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchStackRoutingStaticRoute (UpdateNetworkSwitchStackRoutingStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchStormControl (UpdateNetworkSwitchStormControlRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchStp (UpdateNetworkSwitchStpRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationConfigTemplateSwitchProfilePort (UpdateOrganizationConfigTemplateSwitchProfilePortRequest) returns (GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner);

}

message AddNetworkSwitchStackRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  AddNetworkSwitchStackRequest addNetworkSwitchStackRequest = 3;

}

message CloneOrganizationSwitchDevicesRequest {
  // Organization ID
  string organizationId = 1;
  CloneOrganizationSwitchDevicesRequest cloneOrganizationSwitchDevicesRequest = 2;

}

message CreateDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = 2;

}

message CreateDeviceSwitchRoutingStaticRouteRequest {
  // Serial
  string serial = 1;
  CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = 2;

}

message CreateNetworkSwitchAccessPolicyRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchAccessPolicyRequest createNetworkSwitchAccessPolicyRequest = 2;

}

message CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest = 2;

}

message CreateNetworkSwitchLinkAggregationRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchLinkAggregationRequest createNetworkSwitchLinkAggregationRequest = 2;

}

message CreateNetworkSwitchPortScheduleRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchPortScheduleRequest createNetworkSwitchPortScheduleRequest = 2;

}

message CreateNetworkSwitchQosRuleRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchQosRuleRequest createNetworkSwitchQosRuleRequest = 2;

}

message CreateNetworkSwitchRoutingMulticastRendezvousPointRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchRoutingMulticastRendezvousPointRequest createNetworkSwitchRoutingMulticastRendezvousPointRequest = 2;

}

message CreateNetworkSwitchStackRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest = 2;

}

message CreateNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest = 3;

}

message CreateNetworkSwitchStackRoutingStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = 3;

}

message CycleDeviceSwitchPortsRequest {
  // Serial
  string serial = 1;
  CycleDeviceSwitchPortsRequest cycleDeviceSwitchPortsRequest = 2;

}

message DeleteDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;

}

message DeleteDeviceSwitchRoutingStaticRouteRequest {
  // Serial
  string serial = 1;
  // Static route ID
  string staticRouteId = 2;

}

message DeleteNetworkSwitchAccessPolicyRequest {
  // Network ID
  string networkId = 1;
  // Access policy number
  string accessPolicyNumber = 2;

}

message DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest {
  // Network ID
  string networkId = 1;
  // Trusted server ID
  string trustedServerId = 2;

}

message DeleteNetworkSwitchLinkAggregationRequest {
  // Network ID
  string networkId = 1;
  // Link aggregation ID
  string linkAggregationId = 2;

}

message DeleteNetworkSwitchPortScheduleRequest {
  // Network ID
  string networkId = 1;
  // Port schedule ID
  string portScheduleId = 2;

}

message DeleteNetworkSwitchQosRuleRequest {
  // Network ID
  string networkId = 1;
  // Qos rule ID
  string qosRuleId = 2;

}

message DeleteNetworkSwitchRoutingMulticastRendezvousPointRequest {
  // Network ID
  string networkId = 1;
  // Rendezvous point ID
  string rendezvousPointId = 2;

}

message DeleteNetworkSwitchStackRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;

}

message DeleteNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;

}

message DeleteNetworkSwitchStackRoutingStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Static route ID
  string staticRouteId = 3;

}

message GetDeviceSwitchPortRequest {
  // Serial
  string serial = 1;
  // Port ID
  string portId = 2;

}

message GetDeviceSwitchPortsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceSwitchPortsResponse {
  repeated GetDeviceSwitchPorts200ResponseInner data = 1;
}

message GetDeviceSwitchPortsStatusesRequest {
  // Serial
  string serial = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 3;

}

message GetDeviceSwitchPortsStatusesResponse {
  repeated GetDeviceSwitchPortsStatuses200ResponseInner data = 1;
}

message GetDeviceSwitchPortsStatusesPacketsRequest {
  // Serial
  string serial = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 1 day from today.
  string t0 = 2;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 1 day. The default is 1 day.
  float timespan = 3;

}

message GetDeviceSwitchPortsStatusesPacketsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;

}

message GetDeviceSwitchRoutingInterfaceDhcpRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;

}

message GetDeviceSwitchRoutingInterfacesRequest {
  // Serial
  string serial = 1;

}

message GetDeviceSwitchRoutingInterfacesResponse {
  repeated GetDeviceSwitchRoutingInterfaces200ResponseInner data = 1;
}

message GetDeviceSwitchRoutingStaticRouteRequest {
  // Serial
  string serial = 1;
  // Static route ID
  string staticRouteId = 2;

}

message GetDeviceSwitchRoutingStaticRoutesRequest {
  // Serial
  string serial = 1;

}

message GetDeviceSwitchRoutingStaticRoutesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetDeviceSwitchWarmSpareRequest {
  // Serial
  string serial = 1;

}

message GetNetworkSwitchAccessControlListsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchAccessPoliciesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchAccessPoliciesResponse {
  repeated GetNetworkSwitchAccessPolicies200ResponseInner data = 1;
}

message GetNetworkSwitchAccessPolicyRequest {
  // Network ID
  string networkId = 1;
  // Access policy number
  string accessPolicyNumber = 2;

}

message GetNetworkSwitchAlternateManagementInterfaceRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchDhcpServerPolicyRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse {
  repeated GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner data = 1;
}

message GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse {
  repeated GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner data = 1;
}

message GetNetworkSwitchDscpToCosMappingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchLinkAggregationsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchLinkAggregationsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSwitchMtuRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchPortSchedulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchPortSchedulesResponse {
  repeated GetNetworkSwitchPortSchedules200ResponseInner data = 1;
}

message GetNetworkSwitchQosRuleRequest {
  // Network ID
  string networkId = 1;
  // Qos rule ID
  string qosRuleId = 2;

}

message GetNetworkSwitchQosRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchQosRulesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSwitchQosRulesOrderRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchRoutingMulticastRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchRoutingMulticastRendezvousPointRequest {
  // Network ID
  string networkId = 1;
  // Rendezvous point ID
  string rendezvousPointId = 2;

}

message GetNetworkSwitchRoutingMulticastRendezvousPointsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchRoutingMulticastRendezvousPointsResponse {
  repeated array data = 1;
}

message GetNetworkSwitchRoutingOspfRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchStackRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;

}

message GetNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;

}

message GetNetworkSwitchStackRoutingInterfaceDhcpRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;

}

message GetNetworkSwitchStackRoutingInterfacesRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;

}

message GetNetworkSwitchStackRoutingInterfacesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSwitchStackRoutingStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Static route ID
  string staticRouteId = 3;

}

message GetNetworkSwitchStackRoutingStaticRoutesRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;

}

message GetNetworkSwitchStackRoutingStaticRoutesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSwitchStacksRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchStacksResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSwitchStormControlRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchStpRequest {
  // Network ID
  string networkId = 1;

}

message GetOrganizationConfigTemplateSwitchProfilePortRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;
  // Profile ID
  string profileId = 3;
  // Port ID
  string portId = 4;

}

message GetOrganizationConfigTemplateSwitchProfilePortsRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;
  // Profile ID
  string profileId = 3;

}

message GetOrganizationConfigTemplateSwitchProfilePortsResponse {
  repeated GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner data = 1;
}

message GetOrganizationConfigTemplateSwitchProfilesRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;

}

message GetOrganizationConfigTemplateSwitchProfilesResponse {
  repeated GetOrganizationConfigTemplateSwitchProfiles200ResponseInner data = 1;
}

message GetOrganizationSwitchPortsBySwitchRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter switchports by network.
  repeated string networkIds = 5;
  // Optional parameter to filter switchports belonging to the specified port profiles.
  repeated string portProfileIds = 6;
  // Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
  string name = 7;
  // Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
  string mac = 8;
  // Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
  repeated string macs = 9;
  // Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
  string serial = 10;
  // Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
  repeated string serials = 11;
  // Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
  string configurationUpdatedAfter = 12;

}

message GetOrganizationSwitchPortsBySwitchResponse {
  repeated GetOrganizationSwitchPortsBySwitch200ResponseInner data = 1;
}

message RemoveNetworkSwitchStackRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest = 3;

}

message UpdateDeviceSwitchPortRequest {
  // Serial
  string serial = 1;
  // Port ID
  string portId = 2;
  UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest = 3;

}

message UpdateDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;
  CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = 3;

}

message UpdateDeviceSwitchRoutingInterfaceDhcpRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;
  UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest = 3;

}

message UpdateDeviceSwitchRoutingStaticRouteRequest {
  // Serial
  string serial = 1;
  // Static route ID
  string staticRouteId = 2;
  UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = 3;

}

message UpdateDeviceSwitchWarmSpareRequest {
  // Serial
  string serial = 1;
  UpdateDeviceSwitchWarmSpareRequest updateDeviceSwitchWarmSpareRequest = 2;

}

message UpdateNetworkSwitchAccessControlListsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchAccessControlListsRequest updateNetworkSwitchAccessControlListsRequest = 2;

}

message UpdateNetworkSwitchAccessPolicyRequest {
  // Network ID
  string networkId = 1;
  // Access policy number
  string accessPolicyNumber = 2;
  UpdateNetworkSwitchAccessPolicyRequest updateNetworkSwitchAccessPolicyRequest = 3;

}

message UpdateNetworkSwitchAlternateManagementInterfaceRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchAlternateManagementInterfaceRequest updateNetworkSwitchAlternateManagementInterfaceRequest = 2;

}

message UpdateNetworkSwitchDhcpServerPolicyRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchDhcpServerPolicyRequest updateNetworkSwitchDhcpServerPolicyRequest = 2;

}

message UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest {
  // Network ID
  string networkId = 1;
  // Trusted server ID
  string trustedServerId = 2;
  UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest = 3;

}

message UpdateNetworkSwitchDscpToCosMappingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchDscpToCosMappingsRequest updateNetworkSwitchDscpToCosMappingsRequest = 2;

}

message UpdateNetworkSwitchLinkAggregationRequest {
  // Network ID
  string networkId = 1;
  // Link aggregation ID
  string linkAggregationId = 2;
  UpdateNetworkSwitchLinkAggregationRequest updateNetworkSwitchLinkAggregationRequest = 3;

}

message UpdateNetworkSwitchMtuRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchMtuRequest updateNetworkSwitchMtuRequest = 2;

}

message UpdateNetworkSwitchPortScheduleRequest {
  // Network ID
  string networkId = 1;
  // Port schedule ID
  string portScheduleId = 2;
  UpdateNetworkSwitchPortScheduleRequest updateNetworkSwitchPortScheduleRequest = 3;

}

message UpdateNetworkSwitchQosRuleRequest {
  // Network ID
  string networkId = 1;
  // Qos rule ID
  string qosRuleId = 2;
  UpdateNetworkSwitchQosRuleRequest updateNetworkSwitchQosRuleRequest = 3;

}

message UpdateNetworkSwitchQosRulesOrderRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchQosRulesOrderRequest updateNetworkSwitchQosRulesOrderRequest = 2;

}

message UpdateNetworkSwitchRoutingMulticastRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchRoutingMulticastRequest updateNetworkSwitchRoutingMulticastRequest = 2;

}

message UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest {
  // Network ID
  string networkId = 1;
  // Rendezvous point ID
  string rendezvousPointId = 2;
  UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest updateNetworkSwitchRoutingMulticastRendezvousPointRequest = 3;

}

message UpdateNetworkSwitchRoutingOspfRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchRoutingOspfRequest updateNetworkSwitchRoutingOspfRequest = 2;

}

message UpdateNetworkSwitchSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchSettingsRequest updateNetworkSwitchSettingsRequest = 2;

}

message UpdateNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;
  UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest = 4;

}

message UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;
  UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest = 4;

}

message UpdateNetworkSwitchStackRoutingStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Static route ID
  string staticRouteId = 3;
  UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = 4;

}

message UpdateNetworkSwitchStormControlRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchStormControlRequest updateNetworkSwitchStormControlRequest = 2;

}

message UpdateNetworkSwitchStpRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchStpRequest updateNetworkSwitchStpRequest = 2;

}

message UpdateOrganizationConfigTemplateSwitchProfilePortRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;
  // Profile ID
  string profileId = 3;
  // Port ID
  string portId = 4;
  UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest = 5;

}

