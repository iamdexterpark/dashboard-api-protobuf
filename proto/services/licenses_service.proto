/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.licensesservice;

import "google/protobuf/empty.proto";
import public "models/assign_organization_licenses_seats200_response.proto";
import public "models/assign_organization_licenses_seats_request.proto";
import public "models/get_organization_licenses200_response_inner.proto";
import public "models/get_organization_licensing_coterm_licenses200_response_inner.proto";
import public "models/move_organization_licenses200_response.proto";
import public "models/move_organization_licenses_request.proto";
import public "models/move_organization_licenses_seats200_response.proto";
import public "models/move_organization_licenses_seats_request.proto";
import public "models/move_organization_licensing_coterm_licenses200_response.proto";
import public "models/move_organization_licensing_coterm_licenses_request.proto";
import public "models/renew_organization_licenses_seats_request.proto";
import public "models/todo_object_mapping.proto";
import public "models/update_organization_license_request.proto";

service LicensesService {
  rpc AssignOrganizationLicensesSeats (AssignOrganizationLicensesSeatsRequest) returns (AssignOrganizationLicensesSeats200Response);

  rpc GetOrganizationLicense (GetOrganizationLicenseRequest) returns (GetOrganizationLicenses200ResponseInner);

  rpc GetOrganizationLicenses (GetOrganizationLicensesRequest) returns (GetOrganizationLicensesResponse);

  rpc GetOrganizationLicensesOverview (GetOrganizationLicensesOverviewRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationLicensingCotermLicenses (GetOrganizationLicensingCotermLicensesRequest) returns (GetOrganizationLicensingCotermLicensesResponse);

  rpc MoveOrganizationLicenses (MoveOrganizationLicensesRequest) returns (MoveOrganizationLicenses200Response);

  rpc MoveOrganizationLicensesSeats (MoveOrganizationLicensesSeatsRequest) returns (MoveOrganizationLicensesSeats200Response);

  rpc MoveOrganizationLicensingCotermLicenses (MoveOrganizationLicensingCotermLicensesRequest) returns (MoveOrganizationLicensingCotermLicenses200Response);

  rpc RenewOrganizationLicensesSeats (RenewOrganizationLicensesSeatsRequest) returns (AssignOrganizationLicensesSeats200Response);

  rpc UpdateOrganizationLicense (UpdateOrganizationLicenseRequest) returns (GetOrganizationLicenses200ResponseInner);

}

message AssignOrganizationLicensesSeatsRequest {
  // Organization ID
  string organizationId = 1;
  AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest = 2;

}

message GetOrganizationLicenseRequest {
  // Organization ID
  string organizationId = 1;
  // License ID
  string licenseId = 2;

}

message GetOrganizationLicensesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device.
  string deviceSerial = 5;
  // Filter the licenses to those assigned in a particular network
  string networkId = 6;
  // Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'recentlyQueued', 'unused' or 'unusedActive'
  string state = 7;

}

message GetOrganizationLicensesResponse {
  repeated GetOrganizationLicenses200ResponseInner data = 1;
}

message GetOrganizationLicensesOverviewRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationLicensingCotermLicensesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Filter for licenses that are invalidated
  bool invalidated = 5;
  // Filter for licenses that are expired
  bool expired = 6;

}

message GetOrganizationLicensingCotermLicensesResponse {
  repeated GetOrganizationLicensingCotermLicenses200ResponseInner data = 1;
}

message MoveOrganizationLicensesRequest {
  // Organization ID
  string organizationId = 1;
  MoveOrganizationLicensesRequest moveOrganizationLicensesRequest = 2;

}

message MoveOrganizationLicensesSeatsRequest {
  // Organization ID
  string organizationId = 1;
  MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest = 2;

}

message MoveOrganizationLicensingCotermLicensesRequest {
  // Organization ID
  string organizationId = 1;
  MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest = 2;

}

message RenewOrganizationLicensesSeatsRequest {
  // Organization ID
  string organizationId = 1;
  RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest = 2;

}

message UpdateOrganizationLicenseRequest {
  // Organization ID
  string organizationId = 1;
  // License ID
  string licenseId = 2;
  UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest = 3;

}

