/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.configureservice;

import "google/protobuf/empty.proto";
import public "models/add_network_switch_stack_request.proto";
import public "models/assign_network_wireless_ethernet_ports_profiles201_response.proto";
import public "models/assign_network_wireless_ethernet_ports_profiles_request.proto";
import public "models/assign_organization_licenses_seats200_response.proto";
import public "models/assign_organization_licenses_seats_request.proto";
import public "models/bind_network_request.proto";
import public "models/checkin_network_sm_devices200_response.proto";
import public "models/checkin_network_sm_devices_request.proto";
import public "models/claim_into_organization200_response.proto";
import public "models/claim_into_organization_inventory_request.proto";
import public "models/claim_into_organization_request.proto";
import public "models/claim_network_devices_request.proto";
import public "models/clone_organization_request.proto";
import public "models/clone_organization_switch_devices_request.proto";
import public "models/combine_organization_networks200_response.proto";
import public "models/combine_organization_networks_request.proto";
import public "models/create_device_appliance_vmx_authentication_token201_response.proto";
import public "models/create_device_switch_routing_interface_request.proto";
import public "models/create_device_switch_routing_static_route_request.proto";
import public "models/create_network_appliance_prefixes_delegated_static_request.proto";
import public "models/create_network_appliance_rf_profile_request.proto";
import public "models/create_network_appliance_static_route_request.proto";
import public "models/create_network_appliance_traffic_shaping_custom_performance_class_request.proto";
import public "models/create_network_appliance_vlan201_response.proto";
import public "models/create_network_appliance_vlan_request.proto";
import public "models/create_network_camera_quality_retention_profile_request.proto";
import public "models/create_network_camera_wireless_profile_request.proto";
import public "models/create_network_firmware_upgrades_rollback200_response.proto";
import public "models/create_network_firmware_upgrades_rollback_request.proto";
import public "models/create_network_firmware_upgrades_staged_event_request.proto";
import public "models/create_network_firmware_upgrades_staged_group_request.proto";
import public "models/create_network_floor_plan_request.proto";
import public "models/create_network_group_policy_request.proto";
import public "models/create_network_meraki_auth_user_request.proto";
import public "models/create_network_mqtt_broker_request.proto";
import public "models/create_network_pii_request_request.proto";
import public "models/create_network_sm_bypass_activation_lock_attempt_request.proto";
import public "models/create_network_sm_target_group_request.proto";
import public "models/create_network_switch_access_policy_request.proto";
import public "models/create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request.proto";
import public "models/create_network_switch_link_aggregation_request.proto";
import public "models/create_network_switch_port_schedule_request.proto";
import public "models/create_network_switch_qos_rule_request.proto";
import public "models/create_network_switch_routing_multicast_rendezvous_point_request.proto";
import public "models/create_network_switch_stack_request.proto";
import public "models/create_network_switch_stack_routing_interface_request.proto";
import public "models/create_network_vlan_profile_request.proto";
import public "models/create_network_webhooks_http_server_request.proto";
import public "models/create_network_webhooks_payload_template_request.proto";
import public "models/create_network_webhooks_webhook_test201_response.proto";
import public "models/create_network_webhooks_webhook_test_request.proto";
import public "models/create_network_wireless_ethernet_ports_profile_request.proto";
import public "models/create_network_wireless_rf_profile_request.proto";
import public "models/create_network_wireless_ssid_identity_psk_request.proto";
import public "models/create_organization_action_batch201_response.proto";
import public "models/create_organization_action_batch_request.proto";
import public "models/create_organization_adaptive_policy_acl_request.proto";
import public "models/create_organization_adaptive_policy_group_request.proto";
import public "models/create_organization_adaptive_policy_policy_request.proto";
import public "models/create_organization_admin_request.proto";
import public "models/create_organization_alerts_profile_request.proto";
import public "models/create_organization_branding_policy201_response.proto";
import public "models/create_organization_branding_policy_request.proto";
import public "models/create_organization_camera_custom_analytics_artifact_request.proto";
import public "models/create_organization_camera_role_request.proto";
import public "models/create_organization_config_template_request.proto";
import public "models/create_organization_early_access_features_opt_in_request.proto";
import public "models/create_organization_insight_monitored_media_server_request.proto";
import public "models/create_organization_inventory_onboarding_cloud_monitoring_export_event_request.proto";
import public "models/create_organization_inventory_onboarding_cloud_monitoring_import201_response_inner.proto";
import public "models/create_organization_inventory_onboarding_cloud_monitoring_import_request.proto";
import public "models/create_organization_inventory_onboarding_cloud_monitoring_prepare201_response_inner.proto";
import public "models/create_organization_inventory_onboarding_cloud_monitoring_prepare_request.proto";
import public "models/create_organization_network_request.proto";
import public "models/create_organization_policy_object_request.proto";
import public "models/create_organization_policy_objects_group_request.proto";
import public "models/create_organization_request.proto";
import public "models/create_organization_saml_idp_request.proto";
import public "models/create_organization_saml_role_request.proto";
import public "models/get_device_appliance_uplinks_settings200_response.proto";
import public "models/get_device_camera_video_settings200_response.proto";
import public "models/get_device_sensor_relationships200_response_inner.proto";
import public "models/get_device_switch_ports200_response_inner.proto";
import public "models/get_device_switch_routing_interfaces200_response_inner.proto";
import public "models/get_device_switch_routing_static_route200_response.proto";
import public "models/get_device_wireless_bluetooth_settings200_response.proto";
import public "models/get_network200_response.proto";
import public "models/get_network_appliance_firewall_l7_firewall_rules_application_categories200_response.proto";
import public "models/get_network_appliance_ports200_response_inner.proto";
import public "models/get_network_appliance_prefixes_delegated_statics200_response_inner.proto";
import public "models/get_network_appliance_rf_profiles200_response.proto";
import public "models/get_network_appliance_rf_profiles200_response_assigned_inner.proto";
import public "models/get_network_appliance_settings200_response.proto";
import public "models/get_network_appliance_single_lan200_response.proto";
import public "models/get_network_appliance_ssids200_response_inner.proto";
import public "models/get_network_appliance_traffic_shaping_uplink_bandwidth200_response.proto";
import public "models/get_network_appliance_traffic_shaping_uplink_selection200_response.proto";
import public "models/get_network_appliance_vlans200_response_inner.proto";
import public "models/get_network_appliance_vpn_site_to_site_vpn200_response.proto";
import public "models/get_network_camera_schedules200_response_inner.proto";
import public "models/get_network_cellular_gateway_dhcp200_response.proto";
import public "models/get_network_firmware_upgrades200_response.proto";
import public "models/get_network_firmware_upgrades_staged_events200_response.proto";
import public "models/get_network_firmware_upgrades_staged_groups200_response_inner.proto";
import public "models/get_network_firmware_upgrades_staged_stages200_response_inner.proto";
import public "models/get_network_floor_plans200_response_inner.proto";
import public "models/get_network_floor_plans200_response_inner_devices_inner.proto";
import public "models/get_network_health_alerts200_response_inner.proto";
import public "models/get_network_meraki_auth_users200_response_inner.proto";
import public "models/get_network_policies_by_client200_response_inner.proto";
import public "models/get_network_sensor_mqtt_brokers200_response_inner.proto";
import public "models/get_network_sensor_relationships200_response_inner.proto";
import public "models/get_network_settings200_response.proto";
import public "models/get_network_sm_device_certs200_response_inner.proto";
import public "models/get_network_sm_device_device_profiles200_response_inner.proto";
import public "models/get_network_sm_device_network_adapters200_response_inner.proto";
import public "models/get_network_sm_device_security_centers200_response_inner.proto";
import public "models/get_network_sm_device_softwares200_response_inner.proto";
import public "models/get_network_sm_device_wlan_lists200_response_inner.proto";
import public "models/get_network_sm_devices200_response_inner.proto";
import public "models/get_network_sm_trusted_access_configs200_response_inner.proto";
import public "models/get_network_sm_user_access_devices200_response_inner.proto";
import public "models/get_network_sm_users200_response_inner.proto";
import public "models/get_network_switch_access_control_lists200_response.proto";
import public "models/get_network_switch_access_policies200_response_inner.proto";
import public "models/get_network_switch_alternate_management_interface200_response.proto";
import public "models/get_network_switch_dhcp_server_policy200_response.proto";
import public "models/get_network_switch_dhcp_server_policy_arp_inspection_trusted_servers200_response_inner.proto";
import public "models/get_network_switch_dhcp_server_policy_arp_inspection_warnings_by_device200_response_inner.proto";
import public "models/get_network_switch_dscp_to_cos_mappings200_response.proto";
import public "models/get_network_switch_mtu200_response.proto";
import public "models/get_network_switch_port_schedules200_response_inner.proto";
import public "models/get_network_switch_qos_rule200_response.proto";
import public "models/get_network_switch_routing_multicast200_response.proto";
import public "models/get_network_switch_settings200_response.proto";
import public "models/get_network_switch_stack200_response.proto";
import public "models/get_network_switch_stack_routing_interface_dhcp200_response.proto";
import public "models/get_network_switch_storm_control200_response.proto";
import public "models/get_network_syslog_servers200_response.proto";
import public "models/get_network_vlan_profiles200_response_inner.proto";
import public "models/get_network_vlan_profiles_assignments_by_device200_response_inner.proto";
import public "models/get_network_webhooks_http_servers200_response_inner.proto";
import public "models/get_network_webhooks_payload_templates200_response_inner.proto";
import public "models/get_network_wireless_billing200_response.proto";
import public "models/get_network_wireless_bluetooth_settings200_response.proto";
import public "models/get_network_wireless_ethernet_ports_profiles200_response_inner.proto";
import public "models/get_network_wireless_rf_profiles200_response.proto";
import public "models/get_network_wireless_settings200_response.proto";
import public "models/get_network_wireless_ssid_eap_override200_response.proto";
import public "models/get_network_wireless_ssid_identity_psks200_response_inner.proto";
import public "models/get_network_wireless_ssid_splash_settings200_response.proto";
import public "models/get_network_wireless_ssid_traffic_shaping_rules200_response.proto";
import public "models/get_network_wireless_ssids200_response_inner.proto";
import public "models/get_organization_adaptive_policy_acls200_response_inner.proto";
import public "models/get_organization_admins200_response_inner.proto";
import public "models/get_organization_appliance_vpn_third_party_vpn_peers200_response.proto";
import public "models/get_organization_appliance_vpn_vpn_firewall_rules200_response.proto";
import public "models/get_organization_branding_policies200_response_inner.proto";
import public "models/get_organization_branding_policies_priorities200_response.proto";
import public "models/get_organization_camera_permissions200_response_inner.proto";
import public "models/get_organization_config_template_switch_profile_ports200_response_inner.proto";
import public "models/get_organization_config_template_switch_profiles200_response_inner.proto";
import public "models/get_organization_config_templates200_response_inner.proto";
import public "models/get_organization_early_access_features200_response_inner.proto";
import public "models/get_organization_firmware_upgrades200_response_inner.proto";
import public "models/get_organization_firmware_upgrades_by_device200_response_inner.proto";
import public "models/get_organization_insight_applications200_response_inner.proto";
import public "models/get_organization_insight_monitored_media_servers200_response_inner.proto";
import public "models/get_organization_inventory_devices200_response_inner.proto";
import public "models/get_organization_inventory_onboarding_cloud_monitoring_imports200_response_inner.proto";
import public "models/get_organization_licenses200_response_inner.proto";
import public "models/get_organization_licensing_coterm_licenses200_response_inner.proto";
import public "models/get_organization_login_security200_response.proto";
import public "models/get_organization_saml200_response.proto";
import public "models/get_organization_saml_idps200_response_inner.proto";
import public "models/get_organization_saml_roles200_response_inner.proto";
import public "models/get_organization_sm_apns_cert200_response.proto";
import public "models/get_organization_sm_vpp_accounts200_response_inner.proto";
import public "models/get_organization_switch_ports_by_switch200_response_inner.proto";
import public "models/get_organizations200_response_inner.proto";
import public "models/install_network_sm_device_apps_request.proto";
import public "models/lock_network_sm_devices_request.proto";
import public "models/modify_network_sm_devices_tags200_response_inner.proto";
import public "models/modify_network_sm_devices_tags_request.proto";
import public "models/move_network_sm_devices200_response.proto";
import public "models/move_network_sm_devices_request.proto";
import public "models/move_organization_licenses200_response.proto";
import public "models/move_organization_licenses_request.proto";
import public "models/move_organization_licenses_seats200_response.proto";
import public "models/move_organization_licenses_seats_request.proto";
import public "models/move_organization_licensing_coterm_licenses200_response.proto";
import public "models/move_organization_licensing_coterm_licenses_request.proto";
import public "models/provision_network_clients_request.proto";
import public "models/reassign_network_vlan_profiles_assignments200_response.proto";
import public "models/reassign_network_vlan_profiles_assignments_request.proto";
import public "models/release_from_organization_inventory_request.proto";
import public "models/remove_network_devices_request.proto";
import public "models/remove_network_switch_stack_request.proto";
import public "models/renew_organization_licenses_seats_request.proto";
import public "models/rollbacks_network_firmware_upgrades_staged_events_request.proto";
import public "models/set_network_wireless_ethernet_ports_profiles_default200_response.proto";
import public "models/set_network_wireless_ethernet_ports_profiles_default_request.proto";
import public "models/split_network200_response.proto";
import public "models/todo_object_mapping.proto";
import public "models/unbind_network_request.proto";
import public "models/unenroll_network_sm_device200_response.proto";
import public "models/uninstall_network_sm_device_apps_request.proto";
import public "models/update_device_appliance_uplinks_settings_request.proto";
import public "models/update_device_camera_custom_analytics_request.proto";
import public "models/update_device_camera_sense_request.proto";
import public "models/update_device_camera_video_settings_request.proto";
import public "models/update_device_camera_wireless_profiles_request.proto";
import public "models/update_device_cellular_gateway_lan_request.proto";
import public "models/update_device_cellular_gateway_port_forwarding_rules_request.proto";
import public "models/update_device_cellular_sims_request.proto";
import public "models/update_device_management_interface_request.proto";
import public "models/update_device_request.proto";
import public "models/update_device_sensor_relationships_request.proto";
import public "models/update_device_switch_port_request.proto";
import public "models/update_device_switch_routing_interface_dhcp_request.proto";
import public "models/update_device_switch_routing_static_route_request.proto";
import public "models/update_device_switch_warm_spare_request.proto";
import public "models/update_device_wireless_alternate_management_interface_ipv6200_response.proto";
import public "models/update_device_wireless_alternate_management_interface_ipv6_request.proto";
import public "models/update_device_wireless_bluetooth_settings_request.proto";
import public "models/update_network_alerts_settings_request.proto";
import public "models/update_network_appliance_connectivity_monitoring_destinations_request.proto";
import public "models/update_network_appliance_content_filtering_request.proto";
import public "models/update_network_appliance_firewall_cellular_firewall_rules_request.proto";
import public "models/update_network_appliance_firewall_firewalled_service_request.proto";
import public "models/update_network_appliance_firewall_inbound_firewall_rules_request.proto";
import public "models/update_network_appliance_firewall_l7_firewall_rules_request.proto";
import public "models/update_network_appliance_firewall_one_to_many_nat_rules_request.proto";
import public "models/update_network_appliance_firewall_one_to_one_nat_rules_request.proto";
import public "models/update_network_appliance_firewall_port_forwarding_rules_request.proto";
import public "models/update_network_appliance_firewall_settings_request.proto";
import public "models/update_network_appliance_port_request.proto";
import public "models/update_network_appliance_prefixes_delegated_static_request.proto";
import public "models/update_network_appliance_rf_profile_request.proto";
import public "models/update_network_appliance_security_intrusion_request.proto";
import public "models/update_network_appliance_security_malware_request.proto";
import public "models/update_network_appliance_settings_request.proto";
import public "models/update_network_appliance_single_lan_request.proto";
import public "models/update_network_appliance_ssid_request.proto";
import public "models/update_network_appliance_static_route_request.proto";
import public "models/update_network_appliance_traffic_shaping_custom_performance_class_request.proto";
import public "models/update_network_appliance_traffic_shaping_request.proto";
import public "models/update_network_appliance_traffic_shaping_rules_request.proto";
import public "models/update_network_appliance_traffic_shaping_uplink_bandwidth_request.proto";
import public "models/update_network_appliance_traffic_shaping_uplink_selection_request.proto";
import public "models/update_network_appliance_traffic_shaping_vpn_exclusions200_response.proto";
import public "models/update_network_appliance_traffic_shaping_vpn_exclusions_request.proto";
import public "models/update_network_appliance_vlan_request.proto";
import public "models/update_network_appliance_vlans_settings_request.proto";
import public "models/update_network_appliance_vpn_bgp_request.proto";
import public "models/update_network_appliance_vpn_site_to_site_vpn_request.proto";
import public "models/update_network_appliance_warm_spare_request.proto";
import public "models/update_network_camera_quality_retention_profile_request.proto";
import public "models/update_network_camera_wireless_profile_request.proto";
import public "models/update_network_cellular_gateway_connectivity_monitoring_destinations_request.proto";
import public "models/update_network_cellular_gateway_dhcp_request.proto";
import public "models/update_network_cellular_gateway_subnet_pool_request.proto";
import public "models/update_network_cellular_gateway_uplink_request.proto";
import public "models/update_network_client_policy_request.proto";
import public "models/update_network_client_splash_authorization_status_request.proto";
import public "models/update_network_firmware_upgrades_request.proto";
import public "models/update_network_firmware_upgrades_staged_events_request.proto";
import public "models/update_network_firmware_upgrades_staged_stages_request.proto";
import public "models/update_network_floor_plan_request.proto";
import public "models/update_network_group_policy_request.proto";
import public "models/update_network_meraki_auth_user_request.proto";
import public "models/update_network_mqtt_broker_request.proto";
import public "models/update_network_netflow_request.proto";
import public "models/update_network_request.proto";
import public "models/update_network_sensor_mqtt_broker_request.proto";
import public "models/update_network_settings_request.proto";
import public "models/update_network_sm_devices_fields200_response_inner.proto";
import public "models/update_network_sm_devices_fields_request.proto";
import public "models/update_network_snmp_request.proto";
import public "models/update_network_switch_access_control_lists_request.proto";
import public "models/update_network_switch_access_policy_request.proto";
import public "models/update_network_switch_alternate_management_interface_request.proto";
import public "models/update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request.proto";
import public "models/update_network_switch_dhcp_server_policy_request.proto";
import public "models/update_network_switch_dscp_to_cos_mappings_request.proto";
import public "models/update_network_switch_link_aggregation_request.proto";
import public "models/update_network_switch_mtu_request.proto";
import public "models/update_network_switch_port_schedule_request.proto";
import public "models/update_network_switch_qos_rule_request.proto";
import public "models/update_network_switch_qos_rules_order_request.proto";
import public "models/update_network_switch_routing_multicast_rendezvous_point_request.proto";
import public "models/update_network_switch_routing_multicast_request.proto";
import public "models/update_network_switch_routing_ospf_request.proto";
import public "models/update_network_switch_settings_request.proto";
import public "models/update_network_switch_stack_routing_interface_dhcp_request.proto";
import public "models/update_network_switch_stack_routing_interface_request.proto";
import public "models/update_network_switch_storm_control_request.proto";
import public "models/update_network_switch_stp_request.proto";
import public "models/update_network_syslog_servers_request.proto";
import public "models/update_network_traffic_analysis_request.proto";
import public "models/update_network_vlan_profile_request.proto";
import public "models/update_network_webhooks_http_server_request.proto";
import public "models/update_network_webhooks_payload_template_request.proto";
import public "models/update_network_wireless_alternate_management_interface_request.proto";
import public "models/update_network_wireless_billing_request.proto";
import public "models/update_network_wireless_bluetooth_settings_request.proto";
import public "models/update_network_wireless_ethernet_ports_profile_request.proto";
import public "models/update_network_wireless_rf_profile_request.proto";
import public "models/update_network_wireless_settings_request.proto";
import public "models/update_network_wireless_ssid_bonjour_forwarding_request.proto";
import public "models/update_network_wireless_ssid_device_type_group_policies_request.proto";
import public "models/update_network_wireless_ssid_eap_override_request.proto";
import public "models/update_network_wireless_ssid_firewall_l3_firewall_rules_request.proto";
import public "models/update_network_wireless_ssid_firewall_l7_firewall_rules_request.proto";
import public "models/update_network_wireless_ssid_hotspot20_request.proto";
import public "models/update_network_wireless_ssid_identity_psk_request.proto";
import public "models/update_network_wireless_ssid_request.proto";
import public "models/update_network_wireless_ssid_schedules_request.proto";
import public "models/update_network_wireless_ssid_splash_settings_request.proto";
import public "models/update_network_wireless_ssid_traffic_shaping_rules_request.proto";
import public "models/update_network_wireless_ssid_vpn_request.proto";
import public "models/update_organization_action_batch_request.proto";
import public "models/update_organization_adaptive_policy_acl_request.proto";
import public "models/update_organization_adaptive_policy_group_request.proto";
import public "models/update_organization_adaptive_policy_policy_request.proto";
import public "models/update_organization_adaptive_policy_settings_request.proto";
import public "models/update_organization_admin_request.proto";
import public "models/update_organization_alerts_profile_request.proto";
import public "models/update_organization_appliance_security_intrusion_request.proto";
import public "models/update_organization_appliance_vpn_third_party_vpn_peers_request.proto";
import public "models/update_organization_appliance_vpn_vpn_firewall_rules_request.proto";
import public "models/update_organization_branding_policies_priorities_request.proto";
import public "models/update_organization_branding_policy_request.proto";
import public "models/update_organization_camera_onboarding_statuses_request.proto";
import public "models/update_organization_camera_role_request.proto";
import public "models/update_organization_config_template_request.proto";
import public "models/update_organization_config_template_switch_profile_port_request.proto";
import public "models/update_organization_early_access_features_opt_in_request.proto";
import public "models/update_organization_insight_monitored_media_server_request.proto";
import public "models/update_organization_license_request.proto";
import public "models/update_organization_login_security_request.proto";
import public "models/update_organization_policy_object_request.proto";
import public "models/update_organization_policy_objects_group_request.proto";
import public "models/update_organization_request.proto";
import public "models/update_organization_saml_idp_request.proto";
import public "models/update_organization_saml_request.proto";
import public "models/update_organization_saml_role_request.proto";
import public "models/update_organization_snmp_request.proto";
import public "models/vmx_network_devices_claim_request.proto";
import public "models/wipe_network_sm_devices200_response.proto";
import public "models/wipe_network_sm_devices_request.proto";

service ConfigureService {
  rpc AddNetworkSwitchStack (AddNetworkSwitchStackRequest) returns (GetNetworkSwitchStack200Response);

  rpc AssignNetworkWirelessEthernetPortsProfiles (AssignNetworkWirelessEthernetPortsProfilesRequest) returns (AssignNetworkWirelessEthernetPortsProfiles201Response);

  rpc AssignOrganizationLicensesSeats (AssignOrganizationLicensesSeatsRequest) returns (AssignOrganizationLicensesSeats200Response);

  rpc BindNetwork (BindNetworkRequest) returns (TODO_OBJECT_MAPPING);

  rpc CheckinNetworkSmDevices (CheckinNetworkSmDevicesRequest) returns (CheckinNetworkSmDevices200Response);

  rpc ClaimIntoOrganization (ClaimIntoOrganizationRequest) returns (ClaimIntoOrganization200Response);

  rpc ClaimIntoOrganizationInventory (ClaimIntoOrganizationInventoryRequest) returns (ClaimIntoOrganization200Response);

  rpc ClaimNetworkDevices (ClaimNetworkDevicesRequest) returns (google.protobuf.Empty);

  rpc CloneOrganization (CloneOrganizationRequest) returns (GetOrganizations200ResponseInner);

  rpc CloneOrganizationSwitchDevices (CloneOrganizationSwitchDevicesRequest) returns (TODO_OBJECT_MAPPING);

  rpc CombineOrganizationNetworks (CombineOrganizationNetworksRequest) returns (CombineOrganizationNetworks200Response);

  rpc CreateDeviceApplianceVmxAuthenticationToken (CreateDeviceApplianceVmxAuthenticationTokenRequest) returns (CreateDeviceApplianceVmxAuthenticationToken201Response);

  rpc CreateDeviceSwitchRoutingInterface (CreateDeviceSwitchRoutingInterfaceRequest) returns (GetDeviceSwitchRoutingInterfaces200ResponseInner);

  rpc CreateDeviceSwitchRoutingStaticRoute (CreateDeviceSwitchRoutingStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkAppliancePrefixesDelegatedStatic (CreateNetworkAppliancePrefixesDelegatedStaticRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkApplianceRfProfile (CreateNetworkApplianceRfProfileRequest) returns (GetNetworkApplianceRfProfiles200ResponseAssignedInner);

  rpc CreateNetworkApplianceStaticRoute (CreateNetworkApplianceStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkApplianceTrafficShapingCustomPerformanceClass (CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkApplianceVlan (CreateNetworkApplianceVlanRequest) returns (CreateNetworkApplianceVlan201Response);

  rpc CreateNetworkCameraQualityRetentionProfile (CreateNetworkCameraQualityRetentionProfileRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkCameraWirelessProfile (CreateNetworkCameraWirelessProfileRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkFirmwareUpgradesRollback (CreateNetworkFirmwareUpgradesRollbackRequest) returns (CreateNetworkFirmwareUpgradesRollback200Response);

  rpc CreateNetworkFirmwareUpgradesStagedEvent (CreateNetworkFirmwareUpgradesStagedEventRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc CreateNetworkFirmwareUpgradesStagedGroup (CreateNetworkFirmwareUpgradesStagedGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkFloorPlan (CreateNetworkFloorPlanRequest) returns (GetNetworkFloorPlans200ResponseInner);

  rpc CreateNetworkGroupPolicy (CreateNetworkGroupPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkMerakiAuthUser (CreateNetworkMerakiAuthUserRequest) returns (GetNetworkMerakiAuthUsers200ResponseInner);

  rpc CreateNetworkMqttBroker (CreateNetworkMqttBrokerRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkPiiRequest (CreateNetworkPiiRequestRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSmBypassActivationLockAttempt (CreateNetworkSmBypassActivationLockAttemptRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSmTargetGroup (CreateNetworkSmTargetGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchAccessPolicy (CreateNetworkSwitchAccessPolicyRequest) returns (GetNetworkSwitchAccessPolicies200ResponseInner);

  rpc CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer (CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) returns (GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner);

  rpc CreateNetworkSwitchLinkAggregation (CreateNetworkSwitchLinkAggregationRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchPortSchedule (CreateNetworkSwitchPortScheduleRequest) returns (GetNetworkSwitchPortSchedules200ResponseInner);

  rpc CreateNetworkSwitchQosRule (CreateNetworkSwitchQosRuleRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchRoutingMulticastRendezvousPoint (CreateNetworkSwitchRoutingMulticastRendezvousPointRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchStack (CreateNetworkSwitchStackRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchStackRoutingInterface (CreateNetworkSwitchStackRoutingInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSwitchStackRoutingStaticRoute (CreateNetworkSwitchStackRoutingStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkVlanProfile (CreateNetworkVlanProfileRequest) returns (GetNetworkVlanProfiles200ResponseInner);

  rpc CreateNetworkWebhooksHttpServer (CreateNetworkWebhooksHttpServerRequest) returns (GetNetworkWebhooksHttpServers200ResponseInner);

  rpc CreateNetworkWebhooksPayloadTemplate (CreateNetworkWebhooksPayloadTemplateRequest) returns (GetNetworkWebhooksPayloadTemplates200ResponseInner);

  rpc CreateNetworkWebhooksWebhookTest (CreateNetworkWebhooksWebhookTestRequest) returns (CreateNetworkWebhooksWebhookTest201Response);

  rpc CreateNetworkWirelessEthernetPortsProfile (CreateNetworkWirelessEthernetPortsProfileRequest) returns (GetNetworkWirelessEthernetPortsProfiles200ResponseInner);

  rpc CreateNetworkWirelessRfProfile (CreateNetworkWirelessRfProfileRequest) returns (GetNetworkWirelessRfProfiles200Response);

  rpc CreateNetworkWirelessSsidIdentityPsk (CreateNetworkWirelessSsidIdentityPskRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganization (CreateOrganizationRequest) returns (GetOrganizations200ResponseInner);

  rpc CreateOrganizationActionBatch (CreateOrganizationActionBatchRequest) returns (CreateOrganizationActionBatch201Response);

  rpc CreateOrganizationAdaptivePolicyAcl (CreateOrganizationAdaptivePolicyAclRequest) returns (GetOrganizationAdaptivePolicyAcls200ResponseInner);

  rpc CreateOrganizationAdaptivePolicyGroup (CreateOrganizationAdaptivePolicyGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationAdaptivePolicyPolicy (CreateOrganizationAdaptivePolicyPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationAdmin (CreateOrganizationAdminRequest) returns (GetOrganizationAdmins200ResponseInner);

  rpc CreateOrganizationAlertsProfile (CreateOrganizationAlertsProfileRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationBrandingPolicy (CreateOrganizationBrandingPolicyRequest) returns (CreateOrganizationBrandingPolicy201Response);

  rpc CreateOrganizationCameraCustomAnalyticsArtifact (CreateOrganizationCameraCustomAnalyticsArtifactRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationCameraRole (CreateOrganizationCameraRoleRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationConfigTemplate (CreateOrganizationConfigTemplateRequest) returns (GetOrganizationConfigTemplates200ResponseInner);

  rpc CreateOrganizationEarlyAccessFeaturesOptIn (CreateOrganizationEarlyAccessFeaturesOptInRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationInsightMonitoredMediaServer (CreateOrganizationInsightMonitoredMediaServerRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationInventoryOnboardingCloudMonitoringExportEvent (CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationInventoryOnboardingCloudMonitoringImport (CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest) returns (CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse);

  rpc CreateOrganizationInventoryOnboardingCloudMonitoringPrepare (CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest) returns (CreateOrganizationInventoryOnboardingCloudMonitoringPrepareResponse);

  rpc CreateOrganizationNetwork (CreateOrganizationNetworkRequest) returns (GetNetwork200Response);

  rpc CreateOrganizationPolicyObject (CreateOrganizationPolicyObjectRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationPolicyObjectsGroup (CreateOrganizationPolicyObjectsGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationSamlIdp (CreateOrganizationSamlIdpRequest) returns (CreateOrganizationSamlIdpResponse);

  rpc CreateOrganizationSamlRole (CreateOrganizationSamlRoleRequest) returns (TODO_OBJECT_MAPPING);

  rpc DeferNetworkFirmwareUpgradesStagedEvents (DeferNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc DeleteDeviceSwitchRoutingInterface (DeleteDeviceSwitchRoutingInterfaceRequest) returns (google.protobuf.Empty);

  rpc DeleteDeviceSwitchRoutingStaticRoute (DeleteDeviceSwitchRoutingStaticRouteRequest) returns (google.protobuf.Empty);

  rpc DeleteNetwork (DeleteNetworkRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkAppliancePrefixesDelegatedStatic (DeleteNetworkAppliancePrefixesDelegatedStaticRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkApplianceRfProfile (DeleteNetworkApplianceRfProfileRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkApplianceStaticRoute (DeleteNetworkApplianceStaticRouteRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkApplianceTrafficShapingCustomPerformanceClass (DeleteNetworkApplianceTrafficShapingCustomPerformanceClassRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkApplianceVlan (DeleteNetworkApplianceVlanRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkCameraQualityRetentionProfile (DeleteNetworkCameraQualityRetentionProfileRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkCameraWirelessProfile (DeleteNetworkCameraWirelessProfileRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkFirmwareUpgradesStagedGroup (DeleteNetworkFirmwareUpgradesStagedGroupRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkFloorPlan (DeleteNetworkFloorPlanRequest) returns (GetNetworkFloorPlans200ResponseInner);

  rpc DeleteNetworkGroupPolicy (DeleteNetworkGroupPolicyRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkMerakiAuthUser (DeleteNetworkMerakiAuthUserRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkMqttBroker (DeleteNetworkMqttBrokerRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkPiiRequest (DeleteNetworkPiiRequestRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSmTargetGroup (DeleteNetworkSmTargetGroupRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSmUserAccessDevice (DeleteNetworkSmUserAccessDeviceRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchAccessPolicy (DeleteNetworkSwitchAccessPolicyRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer (DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchLinkAggregation (DeleteNetworkSwitchLinkAggregationRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchPortSchedule (DeleteNetworkSwitchPortScheduleRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchQosRule (DeleteNetworkSwitchQosRuleRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchRoutingMulticastRendezvousPoint (DeleteNetworkSwitchRoutingMulticastRendezvousPointRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchStack (DeleteNetworkSwitchStackRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchStackRoutingInterface (DeleteNetworkSwitchStackRoutingInterfaceRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchStackRoutingStaticRoute (DeleteNetworkSwitchStackRoutingStaticRouteRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkVlanProfile (DeleteNetworkVlanProfileRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkWebhooksHttpServer (DeleteNetworkWebhooksHttpServerRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkWebhooksPayloadTemplate (DeleteNetworkWebhooksPayloadTemplateRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkWirelessEthernetPortsProfile (DeleteNetworkWirelessEthernetPortsProfileRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkWirelessRfProfile (DeleteNetworkWirelessRfProfileRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkWirelessSsidIdentityPsk (DeleteNetworkWirelessSsidIdentityPskRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganization (DeleteOrganizationRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationActionBatch (DeleteOrganizationActionBatchRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationAdaptivePolicyAcl (DeleteOrganizationAdaptivePolicyAclRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationAdaptivePolicyGroup (DeleteOrganizationAdaptivePolicyGroupRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationAdaptivePolicyPolicy (DeleteOrganizationAdaptivePolicyPolicyRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationAdmin (DeleteOrganizationAdminRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationAlertsProfile (DeleteOrganizationAlertsProfileRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationBrandingPolicy (DeleteOrganizationBrandingPolicyRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationCameraCustomAnalyticsArtifact (DeleteOrganizationCameraCustomAnalyticsArtifactRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationCameraRole (DeleteOrganizationCameraRoleRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationConfigTemplate (DeleteOrganizationConfigTemplateRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationEarlyAccessFeaturesOptIn (DeleteOrganizationEarlyAccessFeaturesOptInRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationInsightMonitoredMediaServer (DeleteOrganizationInsightMonitoredMediaServerRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationPolicyObject (DeleteOrganizationPolicyObjectRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationPolicyObjectsGroup (DeleteOrganizationPolicyObjectsGroupRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationSamlIdp (DeleteOrganizationSamlIdpRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationSamlRole (DeleteOrganizationSamlRoleRequest) returns (google.protobuf.Empty);

  rpc GetDevice (GetDeviceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceApplianceUplinksSettings (GetDeviceApplianceUplinksSettingsRequest) returns (GetDeviceApplianceUplinksSettings200Response);

  rpc GetDeviceCameraCustomAnalytics (GetDeviceCameraCustomAnalyticsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceCameraSense (GetDeviceCameraSenseRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceCameraSenseObjectDetectionModels (GetDeviceCameraSenseObjectDetectionModelsRequest) returns (GetDeviceCameraSenseObjectDetectionModelsResponse);

  rpc GetDeviceCameraVideoLink (GetDeviceCameraVideoLinkRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceCameraVideoSettings (GetDeviceCameraVideoSettingsRequest) returns (GetDeviceCameraVideoSettings200Response);

  rpc GetDeviceCameraWirelessProfiles (GetDeviceCameraWirelessProfilesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceCellularGatewayLan (GetDeviceCellularGatewayLanRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceCellularGatewayPortForwardingRules (GetDeviceCellularGatewayPortForwardingRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceCellularSims (GetDeviceCellularSimsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceManagementInterface (GetDeviceManagementInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceSensorRelationships (GetDeviceSensorRelationshipsRequest) returns (GetDeviceSensorRelationshipsResponse);

  rpc GetDeviceSwitchPort (GetDeviceSwitchPortRequest) returns (GetDeviceSwitchPorts200ResponseInner);

  rpc GetDeviceSwitchPorts (GetDeviceSwitchPortsRequest) returns (GetDeviceSwitchPortsResponse);

  rpc GetDeviceSwitchRoutingInterface (GetDeviceSwitchRoutingInterfaceRequest) returns (GetDeviceSwitchRoutingInterfaces200ResponseInner);

  rpc GetDeviceSwitchRoutingInterfaceDhcp (GetDeviceSwitchRoutingInterfaceDhcpRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceSwitchRoutingInterfaces (GetDeviceSwitchRoutingInterfacesRequest) returns (GetDeviceSwitchRoutingInterfacesResponse);

  rpc GetDeviceSwitchRoutingStaticRoute (GetDeviceSwitchRoutingStaticRouteRequest) returns (GetDeviceSwitchRoutingStaticRoute200Response);

  rpc GetDeviceSwitchRoutingStaticRoutes (GetDeviceSwitchRoutingStaticRoutesRequest) returns (GetDeviceSwitchRoutingStaticRoutesResponse);

  rpc GetDeviceSwitchWarmSpare (GetDeviceSwitchWarmSpareRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceWirelessBluetoothSettings (GetDeviceWirelessBluetoothSettingsRequest) returns (GetDeviceWirelessBluetoothSettings200Response);

  rpc GetNetwork (GetNetworkRequest) returns (GetNetwork200Response);

  rpc GetNetworkAlertsSettings (GetNetworkAlertsSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceConnectivityMonitoringDestinations (GetNetworkApplianceConnectivityMonitoringDestinationsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceContentFiltering (GetNetworkApplianceContentFilteringRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceContentFilteringCategories (GetNetworkApplianceContentFilteringCategoriesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallCellularFirewallRules (GetNetworkApplianceFirewallCellularFirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallFirewalledService (GetNetworkApplianceFirewallFirewalledServiceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallFirewalledServices (GetNetworkApplianceFirewallFirewalledServicesRequest) returns (GetNetworkApplianceFirewallFirewalledServicesResponse);

  rpc GetNetworkApplianceFirewallInboundCellularFirewallRules (GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest) returns (GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse);

  rpc GetNetworkApplianceFirewallInboundFirewallRules (GetNetworkApplianceFirewallInboundFirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallL3FirewallRules (GetNetworkApplianceFirewallL3FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallL7FirewallRules (GetNetworkApplianceFirewallL7FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallL7FirewallRulesApplicationCategories (GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest) returns (GetNetworkApplianceFirewallL7FirewallRulesApplicationCategories200Response);

  rpc GetNetworkApplianceFirewallOneToManyNatRules (GetNetworkApplianceFirewallOneToManyNatRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallOneToOneNatRules (GetNetworkApplianceFirewallOneToOneNatRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallPortForwardingRules (GetNetworkApplianceFirewallPortForwardingRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallSettings (GetNetworkApplianceFirewallSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkAppliancePort (GetNetworkAppliancePortRequest) returns (GetNetworkAppliancePorts200ResponseInner);

  rpc GetNetworkAppliancePorts (GetNetworkAppliancePortsRequest) returns (GetNetworkAppliancePortsResponse);

  rpc GetNetworkAppliancePrefixesDelegatedStatic (GetNetworkAppliancePrefixesDelegatedStaticRequest) returns (GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner);

  rpc GetNetworkAppliancePrefixesDelegatedStatics (GetNetworkAppliancePrefixesDelegatedStaticsRequest) returns (GetNetworkAppliancePrefixesDelegatedStaticsResponse);

  rpc GetNetworkApplianceRfProfile (GetNetworkApplianceRfProfileRequest) returns (GetNetworkApplianceRfProfiles200ResponseAssignedInner);

  rpc GetNetworkApplianceRfProfiles (GetNetworkApplianceRfProfilesRequest) returns (GetNetworkApplianceRfProfiles200Response);

  rpc GetNetworkApplianceSecurityIntrusion (GetNetworkApplianceSecurityIntrusionRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceSecurityMalware (GetNetworkApplianceSecurityMalwareRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceSettings (GetNetworkApplianceSettingsRequest) returns (GetNetworkApplianceSettings200Response);

  rpc GetNetworkApplianceSingleLan (GetNetworkApplianceSingleLanRequest) returns (GetNetworkApplianceSingleLan200Response);

  rpc GetNetworkApplianceSsid (GetNetworkApplianceSsidRequest) returns (GetNetworkApplianceSsids200ResponseInner);

  rpc GetNetworkApplianceSsids (GetNetworkApplianceSsidsRequest) returns (GetNetworkApplianceSsidsResponse);

  rpc GetNetworkApplianceStaticRoute (GetNetworkApplianceStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceStaticRoutes (GetNetworkApplianceStaticRoutesRequest) returns (GetNetworkApplianceStaticRoutesResponse);

  rpc GetNetworkApplianceTrafficShaping (GetNetworkApplianceTrafficShapingRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceTrafficShapingCustomPerformanceClass (GetNetworkApplianceTrafficShapingCustomPerformanceClassRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceTrafficShapingCustomPerformanceClasses (GetNetworkApplianceTrafficShapingCustomPerformanceClassesRequest) returns (GetNetworkApplianceTrafficShapingCustomPerformanceClassesResponse);

  rpc GetNetworkApplianceTrafficShapingRules (GetNetworkApplianceTrafficShapingRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceTrafficShapingUplinkBandwidth (GetNetworkApplianceTrafficShapingUplinkBandwidthRequest) returns (GetNetworkApplianceTrafficShapingUplinkBandwidth200Response);

  rpc GetNetworkApplianceTrafficShapingUplinkSelection (GetNetworkApplianceTrafficShapingUplinkSelectionRequest) returns (GetNetworkApplianceTrafficShapingUplinkSelection200Response);

  rpc GetNetworkApplianceVlan (GetNetworkApplianceVlanRequest) returns (GetNetworkApplianceVlans200ResponseInner);

  rpc GetNetworkApplianceVlans (GetNetworkApplianceVlansRequest) returns (GetNetworkApplianceVlansResponse);

  rpc GetNetworkApplianceVlansSettings (GetNetworkApplianceVlansSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceVpnBgp (GetNetworkApplianceVpnBgpRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceVpnSiteToSiteVpn (GetNetworkApplianceVpnSiteToSiteVpnRequest) returns (GetNetworkApplianceVpnSiteToSiteVpn200Response);

  rpc GetNetworkApplianceWarmSpare (GetNetworkApplianceWarmSpareRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkCameraQualityRetentionProfile (GetNetworkCameraQualityRetentionProfileRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkCameraQualityRetentionProfiles (GetNetworkCameraQualityRetentionProfilesRequest) returns (GetNetworkCameraQualityRetentionProfilesResponse);

  rpc GetNetworkCameraSchedules (GetNetworkCameraSchedulesRequest) returns (GetNetworkCameraSchedulesResponse);

  rpc GetNetworkCameraWirelessProfile (GetNetworkCameraWirelessProfileRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkCameraWirelessProfiles (GetNetworkCameraWirelessProfilesRequest) returns (GetNetworkCameraWirelessProfilesResponse);

  rpc GetNetworkCellularGatewayConnectivityMonitoringDestinations (GetNetworkCellularGatewayConnectivityMonitoringDestinationsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkCellularGatewayDhcp (GetNetworkCellularGatewayDhcpRequest) returns (GetNetworkCellularGatewayDhcp200Response);

  rpc GetNetworkCellularGatewaySubnetPool (GetNetworkCellularGatewaySubnetPoolRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkCellularGatewayUplink (GetNetworkCellularGatewayUplinkRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkClientPolicy (GetNetworkClientPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkClientSplashAuthorizationStatus (GetNetworkClientSplashAuthorizationStatusRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkDevices (GetNetworkDevicesRequest) returns (GetNetworkDevicesResponse);

  rpc GetNetworkFirmwareUpgrades (GetNetworkFirmwareUpgradesRequest) returns (GetNetworkFirmwareUpgrades200Response);

  rpc GetNetworkFirmwareUpgradesStagedEvents (GetNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc GetNetworkFirmwareUpgradesStagedGroup (GetNetworkFirmwareUpgradesStagedGroupRequest) returns (GetNetworkFirmwareUpgradesStagedGroups200ResponseInner);

  rpc GetNetworkFirmwareUpgradesStagedGroups (GetNetworkFirmwareUpgradesStagedGroupsRequest) returns (GetNetworkFirmwareUpgradesStagedGroupsResponse);

  rpc GetNetworkFirmwareUpgradesStagedStages (GetNetworkFirmwareUpgradesStagedStagesRequest) returns (GetNetworkFirmwareUpgradesStagedStagesResponse);

  rpc GetNetworkFloorPlan (GetNetworkFloorPlanRequest) returns (GetNetworkFloorPlans200ResponseInner);

  rpc GetNetworkFloorPlans (GetNetworkFloorPlansRequest) returns (GetNetworkFloorPlansResponse);

  rpc GetNetworkGroupPolicies (GetNetworkGroupPoliciesRequest) returns (GetNetworkGroupPoliciesResponse);

  rpc GetNetworkGroupPolicy (GetNetworkGroupPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkHealthAlerts (GetNetworkHealthAlertsRequest) returns (GetNetworkHealthAlertsResponse);

  rpc GetNetworkMerakiAuthUser (GetNetworkMerakiAuthUserRequest) returns (GetNetworkMerakiAuthUsers200ResponseInner);

  rpc GetNetworkMerakiAuthUsers (GetNetworkMerakiAuthUsersRequest) returns (GetNetworkMerakiAuthUsersResponse);

  rpc GetNetworkMqttBroker (GetNetworkMqttBrokerRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkMqttBrokers (GetNetworkMqttBrokersRequest) returns (GetNetworkMqttBrokersResponse);

  rpc GetNetworkNetflow (GetNetworkNetflowRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkPiiPiiKeys (GetNetworkPiiPiiKeysRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkPiiRequest (GetNetworkPiiRequestRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkPiiRequests (GetNetworkPiiRequestsRequest) returns (GetNetworkPiiRequestsResponse);

  rpc GetNetworkPiiSmDevicesForKey (GetNetworkPiiSmDevicesForKeyRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkPiiSmOwnersForKey (GetNetworkPiiSmOwnersForKeyRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkPoliciesByClient (GetNetworkPoliciesByClientRequest) returns (GetNetworkPoliciesByClientResponse);

  rpc GetNetworkSensorMqttBroker (GetNetworkSensorMqttBrokerRequest) returns (GetNetworkSensorMqttBrokers200ResponseInner);

  rpc GetNetworkSensorMqttBrokers (GetNetworkSensorMqttBrokersRequest) returns (GetNetworkSensorMqttBrokersResponse);

  rpc GetNetworkSensorRelationships (GetNetworkSensorRelationshipsRequest) returns (GetNetworkSensorRelationshipsResponse);

  rpc GetNetworkSettings (GetNetworkSettingsRequest) returns (GetNetworkSettings200Response);

  rpc GetNetworkSmBypassActivationLockAttempt (GetNetworkSmBypassActivationLockAttemptRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSmDeviceCerts (GetNetworkSmDeviceCertsRequest) returns (GetNetworkSmDeviceCertsResponse);

  rpc GetNetworkSmDeviceDeviceProfiles (GetNetworkSmDeviceDeviceProfilesRequest) returns (GetNetworkSmDeviceDeviceProfilesResponse);

  rpc GetNetworkSmDeviceNetworkAdapters (GetNetworkSmDeviceNetworkAdaptersRequest) returns (GetNetworkSmDeviceNetworkAdaptersResponse);

  rpc GetNetworkSmDeviceRestrictions (GetNetworkSmDeviceRestrictionsRequest) returns (GetNetworkSmDeviceRestrictionsResponse);

  rpc GetNetworkSmDeviceSecurityCenters (GetNetworkSmDeviceSecurityCentersRequest) returns (GetNetworkSmDeviceSecurityCentersResponse);

  rpc GetNetworkSmDeviceSoftwares (GetNetworkSmDeviceSoftwaresRequest) returns (GetNetworkSmDeviceSoftwaresResponse);

  rpc GetNetworkSmDeviceWlanLists (GetNetworkSmDeviceWlanListsRequest) returns (GetNetworkSmDeviceWlanListsResponse);

  rpc GetNetworkSmDevices (GetNetworkSmDevicesRequest) returns (GetNetworkSmDevicesResponse);

  rpc GetNetworkSmProfiles (GetNetworkSmProfilesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSmTargetGroup (GetNetworkSmTargetGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSmTargetGroups (GetNetworkSmTargetGroupsRequest) returns (GetNetworkSmTargetGroupsResponse);

  rpc GetNetworkSmTrustedAccessConfigs (GetNetworkSmTrustedAccessConfigsRequest) returns (GetNetworkSmTrustedAccessConfigsResponse);

  rpc GetNetworkSmUserAccessDevices (GetNetworkSmUserAccessDevicesRequest) returns (GetNetworkSmUserAccessDevicesResponse);

  rpc GetNetworkSmUserDeviceProfiles (GetNetworkSmUserDeviceProfilesRequest) returns (GetNetworkSmUserDeviceProfilesResponse);

  rpc GetNetworkSmUserSoftwares (GetNetworkSmUserSoftwaresRequest) returns (GetNetworkSmUserSoftwaresResponse);

  rpc GetNetworkSmUsers (GetNetworkSmUsersRequest) returns (GetNetworkSmUsersResponse);

  rpc GetNetworkSnmp (GetNetworkSnmpRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchAccessControlLists (GetNetworkSwitchAccessControlListsRequest) returns (GetNetworkSwitchAccessControlLists200Response);

  rpc GetNetworkSwitchAccessPolicies (GetNetworkSwitchAccessPoliciesRequest) returns (GetNetworkSwitchAccessPoliciesResponse);

  rpc GetNetworkSwitchAccessPolicy (GetNetworkSwitchAccessPolicyRequest) returns (GetNetworkSwitchAccessPolicies200ResponseInner);

  rpc GetNetworkSwitchAlternateManagementInterface (GetNetworkSwitchAlternateManagementInterfaceRequest) returns (GetNetworkSwitchAlternateManagementInterface200Response);

  rpc GetNetworkSwitchDhcpServerPolicy (GetNetworkSwitchDhcpServerPolicyRequest) returns (GetNetworkSwitchDhcpServerPolicy200Response);

  rpc GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers (GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest) returns (GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse);

  rpc GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice (GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest) returns (GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse);

  rpc GetNetworkSwitchDscpToCosMappings (GetNetworkSwitchDscpToCosMappingsRequest) returns (GetNetworkSwitchDscpToCosMappings200Response);

  rpc GetNetworkSwitchLinkAggregations (GetNetworkSwitchLinkAggregationsRequest) returns (GetNetworkSwitchLinkAggregationsResponse);

  rpc GetNetworkSwitchMtu (GetNetworkSwitchMtuRequest) returns (GetNetworkSwitchMtu200Response);

  rpc GetNetworkSwitchPortSchedules (GetNetworkSwitchPortSchedulesRequest) returns (GetNetworkSwitchPortSchedulesResponse);

  rpc GetNetworkSwitchQosRule (GetNetworkSwitchQosRuleRequest) returns (GetNetworkSwitchQosRule200Response);

  rpc GetNetworkSwitchQosRules (GetNetworkSwitchQosRulesRequest) returns (GetNetworkSwitchQosRulesResponse);

  rpc GetNetworkSwitchQosRulesOrder (GetNetworkSwitchQosRulesOrderRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchRoutingMulticast (GetNetworkSwitchRoutingMulticastRequest) returns (GetNetworkSwitchRoutingMulticast200Response);

  rpc GetNetworkSwitchRoutingMulticastRendezvousPoint (GetNetworkSwitchRoutingMulticastRendezvousPointRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchRoutingMulticastRendezvousPoints (GetNetworkSwitchRoutingMulticastRendezvousPointsRequest) returns (GetNetworkSwitchRoutingMulticastRendezvousPointsResponse);

  rpc GetNetworkSwitchRoutingOspf (GetNetworkSwitchRoutingOspfRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchSettings (GetNetworkSwitchSettingsRequest) returns (GetNetworkSwitchSettings200Response);

  rpc GetNetworkSwitchStack (GetNetworkSwitchStackRequest) returns (GetNetworkSwitchStack200Response);

  rpc GetNetworkSwitchStackRoutingInterface (GetNetworkSwitchStackRoutingInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchStackRoutingInterfaceDhcp (GetNetworkSwitchStackRoutingInterfaceDhcpRequest) returns (GetNetworkSwitchStackRoutingInterfaceDhcp200Response);

  rpc GetNetworkSwitchStackRoutingInterfaces (GetNetworkSwitchStackRoutingInterfacesRequest) returns (GetNetworkSwitchStackRoutingInterfacesResponse);

  rpc GetNetworkSwitchStackRoutingStaticRoute (GetNetworkSwitchStackRoutingStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchStackRoutingStaticRoutes (GetNetworkSwitchStackRoutingStaticRoutesRequest) returns (GetNetworkSwitchStackRoutingStaticRoutesResponse);

  rpc GetNetworkSwitchStacks (GetNetworkSwitchStacksRequest) returns (GetNetworkSwitchStacksResponse);

  rpc GetNetworkSwitchStormControl (GetNetworkSwitchStormControlRequest) returns (GetNetworkSwitchStormControl200Response);

  rpc GetNetworkSwitchStp (GetNetworkSwitchStpRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSyslogServers (GetNetworkSyslogServersRequest) returns (GetNetworkSyslogServers200Response);

  rpc GetNetworkTrafficAnalysis (GetNetworkTrafficAnalysisRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkTrafficShapingApplicationCategories (GetNetworkTrafficShapingApplicationCategoriesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkTrafficShapingDscpTaggingOptions (GetNetworkTrafficShapingDscpTaggingOptionsRequest) returns (GetNetworkTrafficShapingDscpTaggingOptionsResponse);

  rpc GetNetworkVlanProfile (GetNetworkVlanProfileRequest) returns (GetNetworkVlanProfiles200ResponseInner);

  rpc GetNetworkVlanProfiles (GetNetworkVlanProfilesRequest) returns (GetNetworkVlanProfilesResponse);

  rpc GetNetworkVlanProfilesAssignmentsByDevice (GetNetworkVlanProfilesAssignmentsByDeviceRequest) returns (GetNetworkVlanProfilesAssignmentsByDeviceResponse);

  rpc GetNetworkWebhooksHttpServer (GetNetworkWebhooksHttpServerRequest) returns (GetNetworkWebhooksHttpServers200ResponseInner);

  rpc GetNetworkWebhooksHttpServers (GetNetworkWebhooksHttpServersRequest) returns (GetNetworkWebhooksHttpServersResponse);

  rpc GetNetworkWebhooksPayloadTemplate (GetNetworkWebhooksPayloadTemplateRequest) returns (GetNetworkWebhooksPayloadTemplates200ResponseInner);

  rpc GetNetworkWebhooksPayloadTemplates (GetNetworkWebhooksPayloadTemplatesRequest) returns (GetNetworkWebhooksPayloadTemplatesResponse);

  rpc GetNetworkWebhooksWebhookTest (GetNetworkWebhooksWebhookTestRequest) returns (CreateNetworkWebhooksWebhookTest201Response);

  rpc GetNetworkWirelessAlternateManagementInterface (GetNetworkWirelessAlternateManagementInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessBilling (GetNetworkWirelessBillingRequest) returns (GetNetworkWirelessBilling200Response);

  rpc GetNetworkWirelessBluetoothSettings (GetNetworkWirelessBluetoothSettingsRequest) returns (GetNetworkWirelessBluetoothSettings200Response);

  rpc GetNetworkWirelessEthernetPortsProfile (GetNetworkWirelessEthernetPortsProfileRequest) returns (GetNetworkWirelessEthernetPortsProfiles200ResponseInner);

  rpc GetNetworkWirelessEthernetPortsProfiles (GetNetworkWirelessEthernetPortsProfilesRequest) returns (GetNetworkWirelessEthernetPortsProfilesResponse);

  rpc GetNetworkWirelessRfProfile (GetNetworkWirelessRfProfileRequest) returns (GetNetworkWirelessRfProfiles200Response);

  rpc GetNetworkWirelessRfProfiles (GetNetworkWirelessRfProfilesRequest) returns (GetNetworkWirelessRfProfiles200Response);

  rpc GetNetworkWirelessSettings (GetNetworkWirelessSettingsRequest) returns (GetNetworkWirelessSettings200Response);

  rpc GetNetworkWirelessSsid (GetNetworkWirelessSsidRequest) returns (GetNetworkWirelessSsids200ResponseInner);

  rpc GetNetworkWirelessSsidBonjourForwarding (GetNetworkWirelessSsidBonjourForwardingRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidDeviceTypeGroupPolicies (GetNetworkWirelessSsidDeviceTypeGroupPoliciesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidEapOverride (GetNetworkWirelessSsidEapOverrideRequest) returns (GetNetworkWirelessSsidEapOverride200Response);

  rpc GetNetworkWirelessSsidFirewallL3FirewallRules (GetNetworkWirelessSsidFirewallL3FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidFirewallL7FirewallRules (GetNetworkWirelessSsidFirewallL7FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidHotspot20 (GetNetworkWirelessSsidHotspot20Request) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidIdentityPsk (GetNetworkWirelessSsidIdentityPskRequest) returns (GetNetworkWirelessSsidIdentityPsks200ResponseInner);

  rpc GetNetworkWirelessSsidIdentityPsks (GetNetworkWirelessSsidIdentityPsksRequest) returns (GetNetworkWirelessSsidIdentityPsksResponse);

  rpc GetNetworkWirelessSsidSchedules (GetNetworkWirelessSsidSchedulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidSplashSettings (GetNetworkWirelessSsidSplashSettingsRequest) returns (GetNetworkWirelessSsidSplashSettings200Response);

  rpc GetNetworkWirelessSsidTrafficShapingRules (GetNetworkWirelessSsidTrafficShapingRulesRequest) returns (GetNetworkWirelessSsidTrafficShapingRules200Response);

  rpc GetNetworkWirelessSsidVpn (GetNetworkWirelessSsidVpnRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsids (GetNetworkWirelessSsidsRequest) returns (GetNetworkWirelessSsidsResponse);

  rpc GetOrganization (GetOrganizationRequest) returns (GetOrganizations200ResponseInner);

  rpc GetOrganizationActionBatch (GetOrganizationActionBatchRequest) returns (CreateOrganizationActionBatch201Response);

  rpc GetOrganizationActionBatches (GetOrganizationActionBatchesRequest) returns (GetOrganizationActionBatchesResponse);

  rpc GetOrganizationAdaptivePolicyAcl (GetOrganizationAdaptivePolicyAclRequest) returns (GetOrganizationAdaptivePolicyAcls200ResponseInner);

  rpc GetOrganizationAdaptivePolicyAcls (GetOrganizationAdaptivePolicyAclsRequest) returns (GetOrganizationAdaptivePolicyAclsResponse);

  rpc GetOrganizationAdaptivePolicyGroup (GetOrganizationAdaptivePolicyGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationAdaptivePolicyGroups (GetOrganizationAdaptivePolicyGroupsRequest) returns (GetOrganizationAdaptivePolicyGroupsResponse);

  rpc GetOrganizationAdaptivePolicyPolicies (GetOrganizationAdaptivePolicyPoliciesRequest) returns (GetOrganizationAdaptivePolicyPoliciesResponse);

  rpc GetOrganizationAdaptivePolicyPolicy (GetOrganizationAdaptivePolicyPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationAdaptivePolicySettings (GetOrganizationAdaptivePolicySettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationAdmins (GetOrganizationAdminsRequest) returns (GetOrganizationAdminsResponse);

  rpc GetOrganizationAlertsProfiles (GetOrganizationAlertsProfilesRequest) returns (GetOrganizationAlertsProfilesResponse);

  rpc GetOrganizationApplianceSecurityIntrusion (GetOrganizationApplianceSecurityIntrusionRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationApplianceTrafficShapingVpnExclusionsByNetwork (GetOrganizationApplianceTrafficShapingVpnExclusionsByNetworkRequest) returns (GetOrganizationApplianceTrafficShapingVpnExclusionsByNetworkResponse);

  rpc GetOrganizationApplianceVpnThirdPartyVPNPeers (GetOrganizationApplianceVpnThirdPartyVPNPeersRequest) returns (GetOrganizationApplianceVpnThirdPartyVPNPeers200Response);

  rpc GetOrganizationApplianceVpnVpnFirewallRules (GetOrganizationApplianceVpnVpnFirewallRulesRequest) returns (GetOrganizationApplianceVpnVpnFirewallRules200Response);

  rpc GetOrganizationBrandingPolicies (GetOrganizationBrandingPoliciesRequest) returns (GetOrganizationBrandingPoliciesResponse);

  rpc GetOrganizationBrandingPoliciesPriorities (GetOrganizationBrandingPoliciesPrioritiesRequest) returns (GetOrganizationBrandingPoliciesPriorities200Response);

  rpc GetOrganizationBrandingPolicy (GetOrganizationBrandingPolicyRequest) returns (GetOrganizationBrandingPolicies200ResponseInner);

  rpc GetOrganizationCameraCustomAnalyticsArtifact (GetOrganizationCameraCustomAnalyticsArtifactRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationCameraCustomAnalyticsArtifacts (GetOrganizationCameraCustomAnalyticsArtifactsRequest) returns (GetOrganizationCameraCustomAnalyticsArtifactsResponse);

  rpc GetOrganizationCameraOnboardingStatuses (GetOrganizationCameraOnboardingStatusesRequest) returns (GetOrganizationCameraOnboardingStatusesResponse);

  rpc GetOrganizationCameraPermission (GetOrganizationCameraPermissionRequest) returns (GetOrganizationCameraPermissions200ResponseInner);

  rpc GetOrganizationCameraPermissions (GetOrganizationCameraPermissionsRequest) returns (GetOrganizationCameraPermissionsResponse);

  rpc GetOrganizationCameraRole (GetOrganizationCameraRoleRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationCameraRoles (GetOrganizationCameraRolesRequest) returns (GetOrganizationCameraRolesResponse);

  rpc GetOrganizationClientsSearch (GetOrganizationClientsSearchRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationConfigTemplate (GetOrganizationConfigTemplateRequest) returns (GetOrganizationConfigTemplates200ResponseInner);

  rpc GetOrganizationConfigTemplateSwitchProfilePort (GetOrganizationConfigTemplateSwitchProfilePortRequest) returns (GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner);

  rpc GetOrganizationConfigTemplateSwitchProfilePorts (GetOrganizationConfigTemplateSwitchProfilePortsRequest) returns (GetOrganizationConfigTemplateSwitchProfilePortsResponse);

  rpc GetOrganizationConfigTemplateSwitchProfiles (GetOrganizationConfigTemplateSwitchProfilesRequest) returns (GetOrganizationConfigTemplateSwitchProfilesResponse);

  rpc GetOrganizationConfigTemplates (GetOrganizationConfigTemplatesRequest) returns (GetOrganizationConfigTemplatesResponse);

  rpc GetOrganizationDevices (GetOrganizationDevicesRequest) returns (GetOrganizationDevicesResponse);

  rpc GetOrganizationEarlyAccessFeatures (GetOrganizationEarlyAccessFeaturesRequest) returns (GetOrganizationEarlyAccessFeaturesResponse);

  rpc GetOrganizationEarlyAccessFeaturesOptIn (GetOrganizationEarlyAccessFeaturesOptInRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationEarlyAccessFeaturesOptIns (GetOrganizationEarlyAccessFeaturesOptInsRequest) returns (GetOrganizationEarlyAccessFeaturesOptInsResponse);

  rpc GetOrganizationFirmwareUpgrades (GetOrganizationFirmwareUpgradesRequest) returns (GetOrganizationFirmwareUpgradesResponse);

  rpc GetOrganizationFirmwareUpgradesByDevice (GetOrganizationFirmwareUpgradesByDeviceRequest) returns (GetOrganizationFirmwareUpgradesByDeviceResponse);

  rpc GetOrganizationInsightApplications (GetOrganizationInsightApplicationsRequest) returns (GetOrganizationInsightApplicationsResponse);

  rpc GetOrganizationInsightMonitoredMediaServer (GetOrganizationInsightMonitoredMediaServerRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationInsightMonitoredMediaServers (GetOrganizationInsightMonitoredMediaServersRequest) returns (GetOrganizationInsightMonitoredMediaServersResponse);

  rpc GetOrganizationInventoryDevice (GetOrganizationInventoryDeviceRequest) returns (GetOrganizationInventoryDevices200ResponseInner);

  rpc GetOrganizationInventoryDevices (GetOrganizationInventoryDevicesRequest) returns (GetOrganizationInventoryDevicesResponse);

  rpc GetOrganizationInventoryOnboardingCloudMonitoringImports (GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest) returns (GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse);

  rpc GetOrganizationInventoryOnboardingCloudMonitoringNetworks (GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest) returns (GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse);

  rpc GetOrganizationLicense (GetOrganizationLicenseRequest) returns (GetOrganizationLicenses200ResponseInner);

  rpc GetOrganizationLicenses (GetOrganizationLicensesRequest) returns (GetOrganizationLicensesResponse);

  rpc GetOrganizationLicensingCotermLicenses (GetOrganizationLicensingCotermLicensesRequest) returns (GetOrganizationLicensingCotermLicensesResponse);

  rpc GetOrganizationLoginSecurity (GetOrganizationLoginSecurityRequest) returns (GetOrganizationLoginSecurity200Response);

  rpc GetOrganizationNetworks (GetOrganizationNetworksRequest) returns (GetOrganizationNetworksResponse);

  rpc GetOrganizationPolicyObject (GetOrganizationPolicyObjectRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationPolicyObjects (GetOrganizationPolicyObjectsRequest) returns (GetOrganizationPolicyObjectsResponse);

  rpc GetOrganizationPolicyObjectsGroup (GetOrganizationPolicyObjectsGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationPolicyObjectsGroups (GetOrganizationPolicyObjectsGroupsRequest) returns (GetOrganizationPolicyObjectsGroupsResponse);

  rpc GetOrganizationSaml (GetOrganizationSamlRequest) returns (GetOrganizationSaml200Response);

  rpc GetOrganizationSamlIdp (GetOrganizationSamlIdpRequest) returns (GetOrganizationSamlIdps200ResponseInner);

  rpc GetOrganizationSamlIdps (GetOrganizationSamlIdpsRequest) returns (GetOrganizationSamlIdpsResponse);

  rpc GetOrganizationSamlRole (GetOrganizationSamlRoleRequest) returns (GetOrganizationSamlRoles200ResponseInner);

  rpc GetOrganizationSamlRoles (GetOrganizationSamlRolesRequest) returns (GetOrganizationSamlRolesResponse);

  rpc GetOrganizationSmApnsCert (GetOrganizationSmApnsCertRequest) returns (GetOrganizationSmApnsCert200Response);

  rpc GetOrganizationSmVppAccount (GetOrganizationSmVppAccountRequest) returns (GetOrganizationSmVppAccounts200ResponseInner);

  rpc GetOrganizationSmVppAccounts (GetOrganizationSmVppAccountsRequest) returns (GetOrganizationSmVppAccountsResponse);

  rpc GetOrganizationSnmp (GetOrganizationSnmpRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationSwitchPortsBySwitch (GetOrganizationSwitchPortsBySwitchRequest) returns (GetOrganizationSwitchPortsBySwitchResponse);

  rpc GetOrganizations (google.protobuf.Empty) returns (GetOrganizationsResponse);

  rpc InstallNetworkSmDeviceApps (InstallNetworkSmDeviceAppsRequest) returns (google.protobuf.Empty);

  rpc LockNetworkSmDevices (LockNetworkSmDevicesRequest) returns (CheckinNetworkSmDevices200Response);

  rpc ModifyNetworkSmDevicesTags (ModifyNetworkSmDevicesTagsRequest) returns (ModifyNetworkSmDevicesTagsResponse);

  rpc MoveNetworkSmDevices (MoveNetworkSmDevicesRequest) returns (MoveNetworkSmDevices200Response);

  rpc MoveOrganizationLicenses (MoveOrganizationLicensesRequest) returns (MoveOrganizationLicenses200Response);

  rpc MoveOrganizationLicensesSeats (MoveOrganizationLicensesSeatsRequest) returns (MoveOrganizationLicensesSeats200Response);

  rpc MoveOrganizationLicensingCotermLicenses (MoveOrganizationLicensingCotermLicensesRequest) returns (MoveOrganizationLicensingCotermLicenses200Response);

  rpc ProvisionNetworkClients (ProvisionNetworkClientsRequest) returns (TODO_OBJECT_MAPPING);

  rpc ReassignNetworkVlanProfilesAssignments (ReassignNetworkVlanProfilesAssignmentsRequest) returns (ReassignNetworkVlanProfilesAssignments200Response);

  rpc RefreshNetworkSmDeviceDetails (RefreshNetworkSmDeviceDetailsRequest) returns (google.protobuf.Empty);

  rpc ReleaseFromOrganizationInventory (ReleaseFromOrganizationInventoryRequest) returns (TODO_OBJECT_MAPPING);

  rpc RemoveNetworkDevices (RemoveNetworkDevicesRequest) returns (google.protobuf.Empty);

  rpc RemoveNetworkSwitchStack (RemoveNetworkSwitchStackRequest) returns (TODO_OBJECT_MAPPING);

  rpc RenewOrganizationLicensesSeats (RenewOrganizationLicensesSeatsRequest) returns (AssignOrganizationLicensesSeats200Response);

  rpc RollbacksNetworkFirmwareUpgradesStagedEvents (RollbacksNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc SetNetworkWirelessEthernetPortsProfilesDefault (SetNetworkWirelessEthernetPortsProfilesDefaultRequest) returns (SetNetworkWirelessEthernetPortsProfilesDefault200Response);

  rpc SplitNetwork (SplitNetworkRequest) returns (SplitNetwork200Response);

  rpc SwapNetworkApplianceWarmSpare (SwapNetworkApplianceWarmSpareRequest) returns (TODO_OBJECT_MAPPING);

  rpc UnbindNetwork (UnbindNetworkRequest) returns (GetNetwork200Response);

  rpc UnenrollNetworkSmDevice (UnenrollNetworkSmDeviceRequest) returns (UnenrollNetworkSmDevice200Response);

  rpc UninstallNetworkSmDeviceApps (UninstallNetworkSmDeviceAppsRequest) returns (google.protobuf.Empty);

  rpc UpdateDevice (UpdateDeviceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceApplianceUplinksSettings (UpdateDeviceApplianceUplinksSettingsRequest) returns (GetDeviceApplianceUplinksSettings200Response);

  rpc UpdateDeviceCameraCustomAnalytics (UpdateDeviceCameraCustomAnalyticsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceCameraSense (UpdateDeviceCameraSenseRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceCameraVideoSettings (UpdateDeviceCameraVideoSettingsRequest) returns (GetDeviceCameraVideoSettings200Response);

  rpc UpdateDeviceCameraWirelessProfiles (UpdateDeviceCameraWirelessProfilesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceCellularGatewayLan (UpdateDeviceCellularGatewayLanRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceCellularGatewayPortForwardingRules (UpdateDeviceCellularGatewayPortForwardingRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceCellularSims (UpdateDeviceCellularSimsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceManagementInterface (UpdateDeviceManagementInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceSensorRelationships (UpdateDeviceSensorRelationshipsRequest) returns (GetDeviceSensorRelationships200ResponseInner);

  rpc UpdateDeviceSwitchPort (UpdateDeviceSwitchPortRequest) returns (GetDeviceSwitchPorts200ResponseInner);

  rpc UpdateDeviceSwitchRoutingInterface (UpdateDeviceSwitchRoutingInterfaceRequest) returns (GetDeviceSwitchRoutingInterfaces200ResponseInner);

  rpc UpdateDeviceSwitchRoutingInterfaceDhcp (UpdateDeviceSwitchRoutingInterfaceDhcpRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceSwitchRoutingStaticRoute (UpdateDeviceSwitchRoutingStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceSwitchWarmSpare (UpdateDeviceSwitchWarmSpareRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceWirelessAlternateManagementInterfaceIpv6 (UpdateDeviceWirelessAlternateManagementInterfaceIpv6Request) returns (UpdateDeviceWirelessAlternateManagementInterfaceIpv6200Response);

  rpc UpdateDeviceWirelessBluetoothSettings (UpdateDeviceWirelessBluetoothSettingsRequest) returns (GetDeviceWirelessBluetoothSettings200Response);

  rpc UpdateNetwork (UpdateNetworkRequest) returns (GetNetwork200Response);

  rpc UpdateNetworkAlertsSettings (UpdateNetworkAlertsSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceConnectivityMonitoringDestinations (UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceContentFiltering (UpdateNetworkApplianceContentFilteringRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallCellularFirewallRules (UpdateNetworkApplianceFirewallCellularFirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallFirewalledService (UpdateNetworkApplianceFirewallFirewalledServiceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallInboundCellularFirewallRules (UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest) returns (UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse);

  rpc UpdateNetworkApplianceFirewallInboundFirewallRules (UpdateNetworkApplianceFirewallInboundFirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallL3FirewallRules (UpdateNetworkApplianceFirewallL3FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallL7FirewallRules (UpdateNetworkApplianceFirewallL7FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallOneToManyNatRules (UpdateNetworkApplianceFirewallOneToManyNatRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallOneToOneNatRules (UpdateNetworkApplianceFirewallOneToOneNatRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallPortForwardingRules (UpdateNetworkApplianceFirewallPortForwardingRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallSettings (UpdateNetworkApplianceFirewallSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkAppliancePort (UpdateNetworkAppliancePortRequest) returns (GetNetworkAppliancePorts200ResponseInner);

  rpc UpdateNetworkAppliancePrefixesDelegatedStatic (UpdateNetworkAppliancePrefixesDelegatedStaticRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceRfProfile (UpdateNetworkApplianceRfProfileRequest) returns (GetNetworkApplianceRfProfiles200ResponseAssignedInner);

  rpc UpdateNetworkApplianceSecurityIntrusion (UpdateNetworkApplianceSecurityIntrusionRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceSecurityMalware (UpdateNetworkApplianceSecurityMalwareRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceSettings (UpdateNetworkApplianceSettingsRequest) returns (GetNetworkApplianceSettings200Response);

  rpc UpdateNetworkApplianceSingleLan (UpdateNetworkApplianceSingleLanRequest) returns (GetNetworkApplianceSingleLan200Response);

  rpc UpdateNetworkApplianceSsid (UpdateNetworkApplianceSsidRequest) returns (GetNetworkApplianceSsids200ResponseInner);

  rpc UpdateNetworkApplianceStaticRoute (UpdateNetworkApplianceStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceTrafficShaping (UpdateNetworkApplianceTrafficShapingRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceTrafficShapingCustomPerformanceClass (UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceTrafficShapingRules (UpdateNetworkApplianceTrafficShapingRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceTrafficShapingUplinkBandwidth (UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceTrafficShapingUplinkSelection (UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest) returns (GetNetworkApplianceTrafficShapingUplinkSelection200Response);

  rpc UpdateNetworkApplianceTrafficShapingVpnExclusions (UpdateNetworkApplianceTrafficShapingVpnExclusionsRequest) returns (UpdateNetworkApplianceTrafficShapingVpnExclusions200Response);

  rpc UpdateNetworkApplianceVlan (UpdateNetworkApplianceVlanRequest) returns (GetNetworkApplianceVlans200ResponseInner);

  rpc UpdateNetworkApplianceVlansSettings (UpdateNetworkApplianceVlansSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceVpnBgp (UpdateNetworkApplianceVpnBgpRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceVpnSiteToSiteVpn (UpdateNetworkApplianceVpnSiteToSiteVpnRequest) returns (GetNetworkApplianceVpnSiteToSiteVpn200Response);

  rpc UpdateNetworkApplianceWarmSpare (UpdateNetworkApplianceWarmSpareRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkCameraQualityRetentionProfile (UpdateNetworkCameraQualityRetentionProfileRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkCameraWirelessProfile (UpdateNetworkCameraWirelessProfileRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkCellularGatewayConnectivityMonitoringDestinations (UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkCellularGatewayDhcp (UpdateNetworkCellularGatewayDhcpRequest) returns (GetNetworkCellularGatewayDhcp200Response);

  rpc UpdateNetworkCellularGatewaySubnetPool (UpdateNetworkCellularGatewaySubnetPoolRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkCellularGatewayUplink (UpdateNetworkCellularGatewayUplinkRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkClientPolicy (UpdateNetworkClientPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkClientSplashAuthorizationStatus (UpdateNetworkClientSplashAuthorizationStatusRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkFirmwareUpgrades (UpdateNetworkFirmwareUpgradesRequest) returns (GetNetworkFirmwareUpgrades200Response);

  rpc UpdateNetworkFirmwareUpgradesStagedEvents (UpdateNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc UpdateNetworkFirmwareUpgradesStagedGroup (UpdateNetworkFirmwareUpgradesStagedGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkFirmwareUpgradesStagedStages (UpdateNetworkFirmwareUpgradesStagedStagesRequest) returns (UpdateNetworkFirmwareUpgradesStagedStagesResponse);

  rpc UpdateNetworkFloorPlan (UpdateNetworkFloorPlanRequest) returns (GetNetworkFloorPlans200ResponseInner);

  rpc UpdateNetworkGroupPolicy (UpdateNetworkGroupPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkMerakiAuthUser (UpdateNetworkMerakiAuthUserRequest) returns (GetNetworkMerakiAuthUsers200ResponseInner);

  rpc UpdateNetworkMqttBroker (UpdateNetworkMqttBrokerRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkNetflow (UpdateNetworkNetflowRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSensorMqttBroker (UpdateNetworkSensorMqttBrokerRequest) returns (GetNetworkSensorMqttBrokers200ResponseInner);

  rpc UpdateNetworkSettings (UpdateNetworkSettingsRequest) returns (GetNetworkSettings200Response);

  rpc UpdateNetworkSmDevicesFields (UpdateNetworkSmDevicesFieldsRequest) returns (UpdateNetworkSmDevicesFieldsResponse);

  rpc UpdateNetworkSmTargetGroup (UpdateNetworkSmTargetGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSnmp (UpdateNetworkSnmpRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchAccessControlLists (UpdateNetworkSwitchAccessControlListsRequest) returns (GetNetworkSwitchAccessControlLists200Response);

  rpc UpdateNetworkSwitchAccessPolicy (UpdateNetworkSwitchAccessPolicyRequest) returns (GetNetworkSwitchAccessPolicies200ResponseInner);

  rpc UpdateNetworkSwitchAlternateManagementInterface (UpdateNetworkSwitchAlternateManagementInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchDhcpServerPolicy (UpdateNetworkSwitchDhcpServerPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer (UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) returns (GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner);

  rpc UpdateNetworkSwitchDscpToCosMappings (UpdateNetworkSwitchDscpToCosMappingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchLinkAggregation (UpdateNetworkSwitchLinkAggregationRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchMtu (UpdateNetworkSwitchMtuRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchPortSchedule (UpdateNetworkSwitchPortScheduleRequest) returns (GetNetworkSwitchPortSchedules200ResponseInner);

  rpc UpdateNetworkSwitchQosRule (UpdateNetworkSwitchQosRuleRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchQosRulesOrder (UpdateNetworkSwitchQosRulesOrderRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchRoutingMulticast (UpdateNetworkSwitchRoutingMulticastRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchRoutingMulticastRendezvousPoint (UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchRoutingOspf (UpdateNetworkSwitchRoutingOspfRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchSettings (UpdateNetworkSwitchSettingsRequest) returns (GetNetworkSwitchSettings200Response);

  rpc UpdateNetworkSwitchStackRoutingInterface (UpdateNetworkSwitchStackRoutingInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchStackRoutingInterfaceDhcp (UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchStackRoutingStaticRoute (UpdateNetworkSwitchStackRoutingStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchStormControl (UpdateNetworkSwitchStormControlRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchStp (UpdateNetworkSwitchStpRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSyslogServers (UpdateNetworkSyslogServersRequest) returns (GetNetworkSyslogServers200Response);

  rpc UpdateNetworkTrafficAnalysis (UpdateNetworkTrafficAnalysisRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkVlanProfile (UpdateNetworkVlanProfileRequest) returns (GetNetworkVlanProfiles200ResponseInner);

  rpc UpdateNetworkWebhooksHttpServer (UpdateNetworkWebhooksHttpServerRequest) returns (GetNetworkWebhooksHttpServers200ResponseInner);

  rpc UpdateNetworkWebhooksPayloadTemplate (UpdateNetworkWebhooksPayloadTemplateRequest) returns (GetNetworkWebhooksPayloadTemplates200ResponseInner);

  rpc UpdateNetworkWirelessAlternateManagementInterface (UpdateNetworkWirelessAlternateManagementInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessBilling (UpdateNetworkWirelessBillingRequest) returns (GetNetworkWirelessBilling200Response);

  rpc UpdateNetworkWirelessBluetoothSettings (UpdateNetworkWirelessBluetoothSettingsRequest) returns (GetNetworkWirelessBluetoothSettings200Response);

  rpc UpdateNetworkWirelessEthernetPortsProfile (UpdateNetworkWirelessEthernetPortsProfileRequest) returns (GetNetworkWirelessEthernetPortsProfiles200ResponseInner);

  rpc UpdateNetworkWirelessRfProfile (UpdateNetworkWirelessRfProfileRequest) returns (GetNetworkWirelessRfProfiles200Response);

  rpc UpdateNetworkWirelessSettings (UpdateNetworkWirelessSettingsRequest) returns (GetNetworkWirelessSettings200Response);

  rpc UpdateNetworkWirelessSsid (UpdateNetworkWirelessSsidRequest) returns (GetNetworkWirelessSsids200ResponseInner);

  rpc UpdateNetworkWirelessSsidBonjourForwarding (UpdateNetworkWirelessSsidBonjourForwardingRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidDeviceTypeGroupPolicies (UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidEapOverride (UpdateNetworkWirelessSsidEapOverrideRequest) returns (GetNetworkWirelessSsidEapOverride200Response);

  rpc UpdateNetworkWirelessSsidFirewallL3FirewallRules (UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidFirewallL7FirewallRules (UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidHotspot20 (UpdateNetworkWirelessSsidHotspot20Request) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidIdentityPsk (UpdateNetworkWirelessSsidIdentityPskRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidSchedules (UpdateNetworkWirelessSsidSchedulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidSplashSettings (UpdateNetworkWirelessSsidSplashSettingsRequest) returns (GetNetworkWirelessSsidSplashSettings200Response);

  rpc UpdateNetworkWirelessSsidTrafficShapingRules (UpdateNetworkWirelessSsidTrafficShapingRulesRequest) returns (GetNetworkWirelessSsidTrafficShapingRules200Response);

  rpc UpdateNetworkWirelessSsidVpn (UpdateNetworkWirelessSsidVpnRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganization (UpdateOrganizationRequest) returns (GetOrganizations200ResponseInner);

  rpc UpdateOrganizationActionBatch (UpdateOrganizationActionBatchRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationAdaptivePolicyAcl (UpdateOrganizationAdaptivePolicyAclRequest) returns (GetOrganizationAdaptivePolicyAcls200ResponseInner);

  rpc UpdateOrganizationAdaptivePolicyGroup (UpdateOrganizationAdaptivePolicyGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationAdaptivePolicyPolicy (UpdateOrganizationAdaptivePolicyPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationAdaptivePolicySettings (UpdateOrganizationAdaptivePolicySettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationAdmin (UpdateOrganizationAdminRequest) returns (GetOrganizationAdmins200ResponseInner);

  rpc UpdateOrganizationAlertsProfile (UpdateOrganizationAlertsProfileRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationApplianceSecurityIntrusion (UpdateOrganizationApplianceSecurityIntrusionRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationApplianceVpnThirdPartyVPNPeers (UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest) returns (GetOrganizationApplianceVpnThirdPartyVPNPeers200Response);

  rpc UpdateOrganizationApplianceVpnVpnFirewallRules (UpdateOrganizationApplianceVpnVpnFirewallRulesRequest) returns (GetOrganizationApplianceVpnVpnFirewallRules200Response);

  rpc UpdateOrganizationBrandingPoliciesPriorities (UpdateOrganizationBrandingPoliciesPrioritiesRequest) returns (GetOrganizationBrandingPoliciesPriorities200Response);

  rpc UpdateOrganizationBrandingPolicy (UpdateOrganizationBrandingPolicyRequest) returns (GetOrganizationBrandingPolicies200ResponseInner);

  rpc UpdateOrganizationCameraOnboardingStatuses (UpdateOrganizationCameraOnboardingStatusesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationCameraRole (UpdateOrganizationCameraRoleRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationConfigTemplate (UpdateOrganizationConfigTemplateRequest) returns (GetOrganizationConfigTemplates200ResponseInner);

  rpc UpdateOrganizationConfigTemplateSwitchProfilePort (UpdateOrganizationConfigTemplateSwitchProfilePortRequest) returns (GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner);

  rpc UpdateOrganizationEarlyAccessFeaturesOptIn (UpdateOrganizationEarlyAccessFeaturesOptInRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationInsightMonitoredMediaServer (UpdateOrganizationInsightMonitoredMediaServerRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationLicense (UpdateOrganizationLicenseRequest) returns (GetOrganizationLicenses200ResponseInner);

  rpc UpdateOrganizationLoginSecurity (UpdateOrganizationLoginSecurityRequest) returns (GetOrganizationLoginSecurity200Response);

  rpc UpdateOrganizationPolicyObject (UpdateOrganizationPolicyObjectRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationPolicyObjectsGroup (UpdateOrganizationPolicyObjectsGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationSaml (UpdateOrganizationSamlRequest) returns (GetOrganizationSaml200Response);

  rpc UpdateOrganizationSamlIdp (UpdateOrganizationSamlIdpRequest) returns (UpdateOrganizationSamlIdpResponse);

  rpc UpdateOrganizationSamlRole (UpdateOrganizationSamlRoleRequest) returns (GetOrganizationSamlRoles200ResponseInner);

  rpc UpdateOrganizationSnmp (UpdateOrganizationSnmpRequest) returns (TODO_OBJECT_MAPPING);

  rpc VmxNetworkDevicesClaim (VmxNetworkDevicesClaimRequest) returns (TODO_OBJECT_MAPPING);

  rpc WipeNetworkSmDevices (WipeNetworkSmDevicesRequest) returns (WipeNetworkSmDevices200Response);

}

message AddNetworkSwitchStackRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  AddNetworkSwitchStackRequest addNetworkSwitchStackRequest = 3;

}

message AssignNetworkWirelessEthernetPortsProfilesRequest {
  // Network ID
  string networkId = 1;
  AssignNetworkWirelessEthernetPortsProfilesRequest assignNetworkWirelessEthernetPortsProfilesRequest = 2;

}

message AssignOrganizationLicensesSeatsRequest {
  // Organization ID
  string organizationId = 1;
  AssignOrganizationLicensesSeatsRequest assignOrganizationLicensesSeatsRequest = 2;

}

message BindNetworkRequest {
  // Network ID
  string networkId = 1;
  BindNetworkRequest bindNetworkRequest = 2;

}

message CheckinNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest = 2;

}

message ClaimIntoOrganizationRequest {
  // Organization ID
  string organizationId = 1;
  ClaimIntoOrganizationRequest claimIntoOrganizationRequest = 2;

}

message ClaimIntoOrganizationInventoryRequest {
  // Organization ID
  string organizationId = 1;
  ClaimIntoOrganizationInventoryRequest claimIntoOrganizationInventoryRequest = 2;

}

message ClaimNetworkDevicesRequest {
  // Network ID
  string networkId = 1;
  ClaimNetworkDevicesRequest claimNetworkDevicesRequest = 2;

}

message CloneOrganizationRequest {
  // Organization ID
  string organizationId = 1;
  CloneOrganizationRequest cloneOrganizationRequest = 2;

}

message CloneOrganizationSwitchDevicesRequest {
  // Organization ID
  string organizationId = 1;
  CloneOrganizationSwitchDevicesRequest cloneOrganizationSwitchDevicesRequest = 2;

}

message CombineOrganizationNetworksRequest {
  // Organization ID
  string organizationId = 1;
  CombineOrganizationNetworksRequest combineOrganizationNetworksRequest = 2;

}

message CreateDeviceApplianceVmxAuthenticationTokenRequest {
  // Serial
  string serial = 1;

}

message CreateDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = 2;

}

message CreateDeviceSwitchRoutingStaticRouteRequest {
  // Serial
  string serial = 1;
  CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = 2;

}

message CreateNetworkAppliancePrefixesDelegatedStaticRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkAppliancePrefixesDelegatedStaticRequest createNetworkAppliancePrefixesDelegatedStaticRequest = 2;

}

message CreateNetworkApplianceRfProfileRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkApplianceRfProfileRequest createNetworkApplianceRfProfileRequest = 2;

}

message CreateNetworkApplianceStaticRouteRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkApplianceStaticRouteRequest createNetworkApplianceStaticRouteRequest = 2;

}

message CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest createNetworkApplianceTrafficShapingCustomPerformanceClassRequest = 2;

}

message CreateNetworkApplianceVlanRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkApplianceVlanRequest createNetworkApplianceVlanRequest = 2;

}

message CreateNetworkCameraQualityRetentionProfileRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkCameraQualityRetentionProfileRequest createNetworkCameraQualityRetentionProfileRequest = 2;

}

message CreateNetworkCameraWirelessProfileRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkCameraWirelessProfileRequest createNetworkCameraWirelessProfileRequest = 2;

}

message CreateNetworkFirmwareUpgradesRollbackRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest = 2;

}

message CreateNetworkFirmwareUpgradesStagedEventRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest = 2;

}

message CreateNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = 2;

}

message CreateNetworkFloorPlanRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest = 2;

}

message CreateNetworkGroupPolicyRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest = 2;

}

message CreateNetworkMerakiAuthUserRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest = 2;

}

message CreateNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest = 2;

}

message CreateNetworkPiiRequestRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest = 2;

}

message CreateNetworkSmBypassActivationLockAttemptRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSmBypassActivationLockAttemptRequest createNetworkSmBypassActivationLockAttemptRequest = 2;

}

message CreateNetworkSmTargetGroupRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest = 2;

}

message CreateNetworkSwitchAccessPolicyRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchAccessPolicyRequest createNetworkSwitchAccessPolicyRequest = 2;

}

message CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest = 2;

}

message CreateNetworkSwitchLinkAggregationRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchLinkAggregationRequest createNetworkSwitchLinkAggregationRequest = 2;

}

message CreateNetworkSwitchPortScheduleRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchPortScheduleRequest createNetworkSwitchPortScheduleRequest = 2;

}

message CreateNetworkSwitchQosRuleRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchQosRuleRequest createNetworkSwitchQosRuleRequest = 2;

}

message CreateNetworkSwitchRoutingMulticastRendezvousPointRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchRoutingMulticastRendezvousPointRequest createNetworkSwitchRoutingMulticastRendezvousPointRequest = 2;

}

message CreateNetworkSwitchStackRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSwitchStackRequest createNetworkSwitchStackRequest = 2;

}

message CreateNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest = 3;

}

message CreateNetworkSwitchStackRoutingStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  CreateDeviceSwitchRoutingStaticRouteRequest createDeviceSwitchRoutingStaticRouteRequest = 3;

}

message CreateNetworkVlanProfileRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkVlanProfileRequest createNetworkVlanProfileRequest = 2;

}

message CreateNetworkWebhooksHttpServerRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest = 2;

}

message CreateNetworkWebhooksPayloadTemplateRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest = 2;

}

message CreateNetworkWebhooksWebhookTestRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest = 2;

}

message CreateNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkWirelessEthernetPortsProfileRequest createNetworkWirelessEthernetPortsProfileRequest = 2;

}

message CreateNetworkWirelessRfProfileRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkWirelessRfProfileRequest createNetworkWirelessRfProfileRequest = 2;

}

message CreateNetworkWirelessSsidIdentityPskRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest = 3;

}

message CreateOrganizationRequest {
  CreateOrganizationRequest createOrganizationRequest = 1;

}

message CreateOrganizationActionBatchRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationActionBatchRequest createOrganizationActionBatchRequest = 2;

}

message CreateOrganizationAdaptivePolicyAclRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationAdaptivePolicyAclRequest createOrganizationAdaptivePolicyAclRequest = 2;

}

message CreateOrganizationAdaptivePolicyGroupRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationAdaptivePolicyGroupRequest createOrganizationAdaptivePolicyGroupRequest = 2;

}

message CreateOrganizationAdaptivePolicyPolicyRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationAdaptivePolicyPolicyRequest createOrganizationAdaptivePolicyPolicyRequest = 2;

}

message CreateOrganizationAdminRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationAdminRequest createOrganizationAdminRequest = 2;

}

message CreateOrganizationAlertsProfileRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationAlertsProfileRequest createOrganizationAlertsProfileRequest = 2;

}

message CreateOrganizationBrandingPolicyRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationBrandingPolicyRequest createOrganizationBrandingPolicyRequest = 2;

}

message CreateOrganizationCameraCustomAnalyticsArtifactRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationCameraCustomAnalyticsArtifactRequest createOrganizationCameraCustomAnalyticsArtifactRequest = 2;

}

message CreateOrganizationCameraRoleRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationCameraRoleRequest createOrganizationCameraRoleRequest = 2;

}

message CreateOrganizationConfigTemplateRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationConfigTemplateRequest createOrganizationConfigTemplateRequest = 2;

}

message CreateOrganizationEarlyAccessFeaturesOptInRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationEarlyAccessFeaturesOptInRequest createOrganizationEarlyAccessFeaturesOptInRequest = 2;

}

message CreateOrganizationInsightMonitoredMediaServerRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationInsightMonitoredMediaServerRequest createOrganizationInsightMonitoredMediaServerRequest = 2;

}

message CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest = 2;

}

message CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest createOrganizationInventoryOnboardingCloudMonitoringImportRequest = 2;

}

message CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse {
  repeated CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner data = 1;
}

message CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest = 2;

}

message CreateOrganizationInventoryOnboardingCloudMonitoringPrepareResponse {
  repeated CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner data = 1;
}

message CreateOrganizationNetworkRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationNetworkRequest createOrganizationNetworkRequest = 2;

}

message CreateOrganizationPolicyObjectRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationPolicyObjectRequest createOrganizationPolicyObjectRequest = 2;

}

message CreateOrganizationPolicyObjectsGroupRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationPolicyObjectsGroupRequest createOrganizationPolicyObjectsGroupRequest = 2;

}

message CreateOrganizationSamlIdpRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationSamlIdpRequest createOrganizationSamlIdpRequest = 2;

}

message CreateOrganizationSamlIdpResponse {
  repeated GetOrganizationSamlIdps200ResponseInner data = 1;
}

message CreateOrganizationSamlRoleRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationSamlRoleRequest createOrganizationSamlRoleRequest = 2;

}

message DeferNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;

}

message DeleteDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;

}

message DeleteDeviceSwitchRoutingStaticRouteRequest {
  // Serial
  string serial = 1;
  // Static route ID
  string staticRouteId = 2;

}

message DeleteNetworkRequest {
  // Network ID
  string networkId = 1;

}

message DeleteNetworkAppliancePrefixesDelegatedStaticRequest {
  // Network ID
  string networkId = 1;
  // Static delegated prefix ID
  string staticDelegatedPrefixId = 2;

}

message DeleteNetworkApplianceRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;

}

message DeleteNetworkApplianceStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Static route ID
  string staticRouteId = 2;

}

message DeleteNetworkApplianceTrafficShapingCustomPerformanceClassRequest {
  // Network ID
  string networkId = 1;
  // Custom performance class ID
  string customPerformanceClassId = 2;

}

message DeleteNetworkApplianceVlanRequest {
  // Network ID
  string networkId = 1;
  // Vlan ID
  string vlanId = 2;

}

message DeleteNetworkCameraQualityRetentionProfileRequest {
  // Network ID
  string networkId = 1;
  // Quality retention profile ID
  string qualityRetentionProfileId = 2;

}

message DeleteNetworkCameraWirelessProfileRequest {
  // Network ID
  string networkId = 1;
  // Wireless profile ID
  string wirelessProfileId = 2;

}

message DeleteNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  // Group ID
  string groupId = 2;

}

message DeleteNetworkFloorPlanRequest {
  // Network ID
  string networkId = 1;
  // Floor plan ID
  string floorPlanId = 2;

}

message DeleteNetworkGroupPolicyRequest {
  // Network ID
  string networkId = 1;
  // Group policy ID
  string groupPolicyId = 2;

}

message DeleteNetworkMerakiAuthUserRequest {
  // Network ID
  string networkId = 1;
  // Meraki auth user ID
  string merakiAuthUserId = 2;
  // If the ID supplied is for a splash guest or client VPN user, and that user is not authorized for any other networks in the organization, then also delete the user. 802.1X RADIUS users are always deleted regardless of this optional attribute.
  bool delete = 3;

}

message DeleteNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;

}

message DeleteNetworkPiiRequestRequest {
  // Network ID
  string networkId = 1;
  // Request ID
  string requestId = 2;

}

message DeleteNetworkSmTargetGroupRequest {
  // Network ID
  string networkId = 1;
  // Target group ID
  string targetGroupId = 2;

}

message DeleteNetworkSmUserAccessDeviceRequest {
  // Network ID
  string networkId = 1;
  // User access device ID
  string userAccessDeviceId = 2;

}

message DeleteNetworkSwitchAccessPolicyRequest {
  // Network ID
  string networkId = 1;
  // Access policy number
  string accessPolicyNumber = 2;

}

message DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest {
  // Network ID
  string networkId = 1;
  // Trusted server ID
  string trustedServerId = 2;

}

message DeleteNetworkSwitchLinkAggregationRequest {
  // Network ID
  string networkId = 1;
  // Link aggregation ID
  string linkAggregationId = 2;

}

message DeleteNetworkSwitchPortScheduleRequest {
  // Network ID
  string networkId = 1;
  // Port schedule ID
  string portScheduleId = 2;

}

message DeleteNetworkSwitchQosRuleRequest {
  // Network ID
  string networkId = 1;
  // Qos rule ID
  string qosRuleId = 2;

}

message DeleteNetworkSwitchRoutingMulticastRendezvousPointRequest {
  // Network ID
  string networkId = 1;
  // Rendezvous point ID
  string rendezvousPointId = 2;

}

message DeleteNetworkSwitchStackRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;

}

message DeleteNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;

}

message DeleteNetworkSwitchStackRoutingStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Static route ID
  string staticRouteId = 3;

}

message DeleteNetworkVlanProfileRequest {
  // Network ID
  string networkId = 1;
  // Iname
  string iname = 2;

}

message DeleteNetworkWebhooksHttpServerRequest {
  // Network ID
  string networkId = 1;
  // Http server ID
  string httpServerId = 2;

}

message DeleteNetworkWebhooksPayloadTemplateRequest {
  // Network ID
  string networkId = 1;
  // Payload template ID
  string payloadTemplateId = 2;

}

message DeleteNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  // Profile ID
  string profileId = 2;

}

message DeleteNetworkWirelessRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;

}

message DeleteNetworkWirelessSsidIdentityPskRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  // Identity psk ID
  string identityPskId = 3;

}

message DeleteOrganizationRequest {
  // Organization ID
  string organizationId = 1;

}

message DeleteOrganizationActionBatchRequest {
  // Organization ID
  string organizationId = 1;
  // Action batch ID
  string actionBatchId = 2;

}

message DeleteOrganizationAdaptivePolicyAclRequest {
  // Organization ID
  string organizationId = 1;
  // Acl ID
  string aclId = 2;

}

message DeleteOrganizationAdaptivePolicyGroupRequest {
  // Organization ID
  string organizationId = 1;
  // ID
  string id = 2;

}

message DeleteOrganizationAdaptivePolicyPolicyRequest {
  // Organization ID
  string organizationId = 1;
  // ID
  string id = 2;

}

message DeleteOrganizationAdminRequest {
  // Organization ID
  string organizationId = 1;
  // Admin ID
  string adminId = 2;

}

message DeleteOrganizationAlertsProfileRequest {
  // Organization ID
  string organizationId = 1;
  // Alert config ID
  string alertConfigId = 2;

}

message DeleteOrganizationBrandingPolicyRequest {
  // Organization ID
  string organizationId = 1;
  // Branding policy ID
  string brandingPolicyId = 2;

}

message DeleteOrganizationCameraCustomAnalyticsArtifactRequest {
  // Organization ID
  string organizationId = 1;
  // Artifact ID
  string artifactId = 2;

}

message DeleteOrganizationCameraRoleRequest {
  // Organization ID
  string organizationId = 1;
  // Role ID
  string roleId = 2;

}

message DeleteOrganizationConfigTemplateRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;

}

message DeleteOrganizationEarlyAccessFeaturesOptInRequest {
  // Organization ID
  string organizationId = 1;
  // Opt in ID
  string optInId = 2;

}

message DeleteOrganizationInsightMonitoredMediaServerRequest {
  // Organization ID
  string organizationId = 1;
  // Monitored media server ID
  string monitoredMediaServerId = 2;

}

message DeleteOrganizationPolicyObjectRequest {
  // Organization ID
  string organizationId = 1;
  // Policy object ID
  string policyObjectId = 2;

}

message DeleteOrganizationPolicyObjectsGroupRequest {
  // Organization ID
  string organizationId = 1;
  // Policy object group ID
  string policyObjectGroupId = 2;

}

message DeleteOrganizationSamlIdpRequest {
  // Organization ID
  string organizationId = 1;
  // Idp ID
  string idpId = 2;

}

message DeleteOrganizationSamlRoleRequest {
  // Organization ID
  string organizationId = 1;
  // Saml role ID
  string samlRoleId = 2;

}

message GetDeviceRequest {
  // Serial
  string serial = 1;

}

message GetDeviceApplianceUplinksSettingsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceCameraCustomAnalyticsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceCameraSenseRequest {
  // Serial
  string serial = 1;

}

message GetDeviceCameraSenseObjectDetectionModelsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceCameraSenseObjectDetectionModelsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetDeviceCameraVideoLinkRequest {
  // Serial
  string serial = 1;
  // [optional] The video link will start at this time. The timestamp should be a string in ISO8601 format. If no timestamp is specified, we will assume current time.
  string timestamp = 2;

}

message GetDeviceCameraVideoSettingsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceCameraWirelessProfilesRequest {
  // Serial
  string serial = 1;

}

message GetDeviceCellularGatewayLanRequest {
  // Serial
  string serial = 1;

}

message GetDeviceCellularGatewayPortForwardingRulesRequest {
  // Serial
  string serial = 1;

}

message GetDeviceCellularSimsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceManagementInterfaceRequest {
  // Serial
  string serial = 1;

}

message GetDeviceSensorRelationshipsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceSensorRelationshipsResponse {
  repeated GetDeviceSensorRelationships200ResponseInner data = 1;
}

message GetDeviceSwitchPortRequest {
  // Serial
  string serial = 1;
  // Port ID
  string portId = 2;

}

message GetDeviceSwitchPortsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceSwitchPortsResponse {
  repeated GetDeviceSwitchPorts200ResponseInner data = 1;
}

message GetDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;

}

message GetDeviceSwitchRoutingInterfaceDhcpRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;

}

message GetDeviceSwitchRoutingInterfacesRequest {
  // Serial
  string serial = 1;

}

message GetDeviceSwitchRoutingInterfacesResponse {
  repeated GetDeviceSwitchRoutingInterfaces200ResponseInner data = 1;
}

message GetDeviceSwitchRoutingStaticRouteRequest {
  // Serial
  string serial = 1;
  // Static route ID
  string staticRouteId = 2;

}

message GetDeviceSwitchRoutingStaticRoutesRequest {
  // Serial
  string serial = 1;

}

message GetDeviceSwitchRoutingStaticRoutesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetDeviceSwitchWarmSpareRequest {
  // Serial
  string serial = 1;

}

message GetDeviceWirelessBluetoothSettingsRequest {
  // Serial
  string serial = 1;

}

message GetNetworkRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkAlertsSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceConnectivityMonitoringDestinationsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceContentFilteringRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceContentFilteringCategoriesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallCellularFirewallRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallFirewalledServiceRequest {
  // Network ID
  string networkId = 1;
  // Service
  string service = 2;

}

message GetNetworkApplianceFirewallFirewalledServicesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallFirewalledServicesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceFirewallInboundFirewallRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallL3FirewallRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallL7FirewallRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallOneToManyNatRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallOneToOneNatRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallPortForwardingRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkAppliancePortRequest {
  // Network ID
  string networkId = 1;
  // Port ID
  string portId = 2;

}

message GetNetworkAppliancePortsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkAppliancePortsResponse {
  repeated GetNetworkAppliancePorts200ResponseInner data = 1;
}

message GetNetworkAppliancePrefixesDelegatedStaticRequest {
  // Network ID
  string networkId = 1;
  // Static delegated prefix ID
  string staticDelegatedPrefixId = 2;

}

message GetNetworkAppliancePrefixesDelegatedStaticsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkAppliancePrefixesDelegatedStaticsResponse {
  repeated GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner data = 1;
}

message GetNetworkApplianceRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;

}

message GetNetworkApplianceRfProfilesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSecurityIntrusionRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSecurityMalwareRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSingleLanRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSsidRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkApplianceSsidsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSsidsResponse {
  repeated GetNetworkApplianceSsids200ResponseInner data = 1;
}

message GetNetworkApplianceStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Static route ID
  string staticRouteId = 2;

}

message GetNetworkApplianceStaticRoutesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceStaticRoutesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceTrafficShapingRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceTrafficShapingCustomPerformanceClassRequest {
  // Network ID
  string networkId = 1;
  // Custom performance class ID
  string customPerformanceClassId = 2;

}

message GetNetworkApplianceTrafficShapingCustomPerformanceClassesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceTrafficShapingCustomPerformanceClassesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceTrafficShapingRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceTrafficShapingUplinkBandwidthRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceTrafficShapingUplinkSelectionRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceVlanRequest {
  // Network ID
  string networkId = 1;
  // Vlan ID
  string vlanId = 2;

}

message GetNetworkApplianceVlansRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceVlansResponse {
  repeated GetNetworkApplianceVlans200ResponseInner data = 1;
}

message GetNetworkApplianceVlansSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceVpnBgpRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceVpnSiteToSiteVpnRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceWarmSpareRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkCameraQualityRetentionProfileRequest {
  // Network ID
  string networkId = 1;
  // Quality retention profile ID
  string qualityRetentionProfileId = 2;

}

message GetNetworkCameraQualityRetentionProfilesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkCameraQualityRetentionProfilesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkCameraSchedulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkCameraSchedulesResponse {
  repeated GetNetworkCameraSchedules200ResponseInner data = 1;
}

message GetNetworkCameraWirelessProfileRequest {
  // Network ID
  string networkId = 1;
  // Wireless profile ID
  string wirelessProfileId = 2;

}

message GetNetworkCameraWirelessProfilesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkCameraWirelessProfilesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkCellularGatewayConnectivityMonitoringDestinationsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkCellularGatewayDhcpRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkCellularGatewaySubnetPoolRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkCellularGatewayUplinkRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkClientPolicyRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;

}

message GetNetworkClientSplashAuthorizationStatusRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;

}

message GetNetworkDevicesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkDevicesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkFirmwareUpgradesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  // Group ID
  string groupId = 2;

}

message GetNetworkFirmwareUpgradesStagedGroupsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkFirmwareUpgradesStagedGroupsResponse {
  repeated GetNetworkFirmwareUpgradesStagedGroups200ResponseInner data = 1;
}

message GetNetworkFirmwareUpgradesStagedStagesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkFirmwareUpgradesStagedStagesResponse {
  repeated GetNetworkFirmwareUpgradesStagedStages200ResponseInner data = 1;
}

message GetNetworkFloorPlanRequest {
  // Network ID
  string networkId = 1;
  // Floor plan ID
  string floorPlanId = 2;

}

message GetNetworkFloorPlansRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkFloorPlansResponse {
  repeated GetNetworkFloorPlans200ResponseInner data = 1;
}

message GetNetworkGroupPoliciesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkGroupPoliciesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkGroupPolicyRequest {
  // Network ID
  string networkId = 1;
  // Group policy ID
  string groupPolicyId = 2;

}

message GetNetworkHealthAlertsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkHealthAlertsResponse {
  repeated GetNetworkHealthAlerts200ResponseInner data = 1;
}

message GetNetworkMerakiAuthUserRequest {
  // Network ID
  string networkId = 1;
  // Meraki auth user ID
  string merakiAuthUserId = 2;

}

message GetNetworkMerakiAuthUsersRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkMerakiAuthUsersResponse {
  repeated GetNetworkMerakiAuthUsers200ResponseInner data = 1;
}

message GetNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;

}

message GetNetworkMqttBrokersRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkMqttBrokersResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkNetflowRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkPiiPiiKeysRequest {
  // Network ID
  string networkId = 1;
  // The username of a Systems Manager user
  string username = 2;
  // The email of a network user account or a Systems Manager device
  string email = 3;
  // The MAC of a network client device or a Systems Manager device
  string mac = 4;
  // The serial of a Systems Manager device
  string serial = 5;
  // The IMEI of a Systems Manager device
  string imei = 6;
  // The MAC of a Bluetooth client
  string bluetoothMac = 7;

}

message GetNetworkPiiRequestRequest {
  // Network ID
  string networkId = 1;
  // Request ID
  string requestId = 2;

}

message GetNetworkPiiRequestsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkPiiRequestsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkPiiSmDevicesForKeyRequest {
  // Network ID
  string networkId = 1;
  // The username of a Systems Manager user
  string username = 2;
  // The email of a network user account or a Systems Manager device
  string email = 3;
  // The MAC of a network client device or a Systems Manager device
  string mac = 4;
  // The serial of a Systems Manager device
  string serial = 5;
  // The IMEI of a Systems Manager device
  string imei = 6;
  // The MAC of a Bluetooth client
  string bluetoothMac = 7;

}

message GetNetworkPiiSmOwnersForKeyRequest {
  // Network ID
  string networkId = 1;
  // The username of a Systems Manager user
  string username = 2;
  // The email of a network user account or a Systems Manager device
  string email = 3;
  // The MAC of a network client device or a Systems Manager device
  string mac = 4;
  // The serial of a Systems Manager device
  string serial = 5;
  // The IMEI of a Systems Manager device
  string imei = 6;
  // The MAC of a Bluetooth client
  string bluetoothMac = 7;

}

message GetNetworkPoliciesByClientRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 5;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 6;

}

message GetNetworkPoliciesByClientResponse {
  repeated GetNetworkPoliciesByClient200ResponseInner data = 1;
}

message GetNetworkSensorMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;

}

message GetNetworkSensorMqttBrokersRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSensorMqttBrokersResponse {
  repeated GetNetworkSensorMqttBrokers200ResponseInner data = 1;
}

message GetNetworkSensorRelationshipsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSensorRelationshipsResponse {
  repeated GetNetworkSensorRelationships200ResponseInner data = 1;
}

message GetNetworkSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSmBypassActivationLockAttemptRequest {
  // Network ID
  string networkId = 1;
  // Attempt ID
  string attemptId = 2;

}

message GetNetworkSmDeviceCertsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceCertsResponse {
  repeated GetNetworkSmDeviceCerts200ResponseInner data = 1;
}

message GetNetworkSmDeviceDeviceProfilesRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceDeviceProfilesResponse {
  repeated GetNetworkSmDeviceDeviceProfiles200ResponseInner data = 1;
}

message GetNetworkSmDeviceNetworkAdaptersRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceNetworkAdaptersResponse {
  repeated GetNetworkSmDeviceNetworkAdapters200ResponseInner data = 1;
}

message GetNetworkSmDeviceRestrictionsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceRestrictionsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSmDeviceSecurityCentersRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceSecurityCentersResponse {
  repeated GetNetworkSmDeviceSecurityCenters200ResponseInner data = 1;
}

message GetNetworkSmDeviceSoftwaresRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceSoftwaresResponse {
  repeated GetNetworkSmDeviceSoftwares200ResponseInner data = 1;
}

message GetNetworkSmDeviceWlanListsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceWlanListsResponse {
  repeated GetNetworkSmDeviceWlanLists200ResponseInner data = 1;
}

message GetNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  // Additional fields that will be displayed for each device.     The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,     systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,     ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,     simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,     isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,     hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url.
  repeated string fields = 2;
  // Filter devices by wifi mac(s).
  repeated string wifiMacs = 3;
  // Filter devices by serial(s).
  repeated string serials = 4;
  // Filter devices by id(s).
  repeated string ids = 5;
  // Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
  repeated string scope = 6;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 7;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 8;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 9;

}

message GetNetworkSmDevicesResponse {
  repeated GetNetworkSmDevices200ResponseInner data = 1;
}

message GetNetworkSmProfilesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSmTargetGroupRequest {
  // Network ID
  string networkId = 1;
  // Target group ID
  string targetGroupId = 2;
  // Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response
  bool withDetails = 3;

}

message GetNetworkSmTargetGroupsRequest {
  // Network ID
  string networkId = 1;
  // Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response
  bool withDetails = 2;

}

message GetNetworkSmTargetGroupsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSmTrustedAccessConfigsRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetNetworkSmTrustedAccessConfigsResponse {
  repeated GetNetworkSmTrustedAccessConfigs200ResponseInner data = 1;
}

message GetNetworkSmUserAccessDevicesRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetNetworkSmUserAccessDevicesResponse {
  repeated GetNetworkSmUserAccessDevices200ResponseInner data = 1;
}

message GetNetworkSmUserDeviceProfilesRequest {
  // Network ID
  string networkId = 1;
  // User ID
  string userId = 2;

}

message GetNetworkSmUserDeviceProfilesResponse {
  repeated GetNetworkSmDeviceDeviceProfiles200ResponseInner data = 1;
}

message GetNetworkSmUserSoftwaresRequest {
  // Network ID
  string networkId = 1;
  // User ID
  string userId = 2;

}

message GetNetworkSmUserSoftwaresResponse {
  repeated GetNetworkSmDeviceSoftwares200ResponseInner data = 1;
}

message GetNetworkSmUsersRequest {
  // Network ID
  string networkId = 1;
  // Filter users by id(s).
  repeated string ids = 2;
  // Filter users by username(s).
  repeated string usernames = 3;
  // Filter users by email(s).
  repeated string emails = 4;
  // Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
  repeated string scope = 5;

}

message GetNetworkSmUsersResponse {
  repeated GetNetworkSmUsers200ResponseInner data = 1;
}

message GetNetworkSnmpRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchAccessControlListsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchAccessPoliciesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchAccessPoliciesResponse {
  repeated GetNetworkSwitchAccessPolicies200ResponseInner data = 1;
}

message GetNetworkSwitchAccessPolicyRequest {
  // Network ID
  string networkId = 1;
  // Access policy number
  string accessPolicyNumber = 2;

}

message GetNetworkSwitchAlternateManagementInterfaceRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchDhcpServerPolicyRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse {
  repeated GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner data = 1;
}

message GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse {
  repeated GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ResponseInner data = 1;
}

message GetNetworkSwitchDscpToCosMappingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchLinkAggregationsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchLinkAggregationsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSwitchMtuRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchPortSchedulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchPortSchedulesResponse {
  repeated GetNetworkSwitchPortSchedules200ResponseInner data = 1;
}

message GetNetworkSwitchQosRuleRequest {
  // Network ID
  string networkId = 1;
  // Qos rule ID
  string qosRuleId = 2;

}

message GetNetworkSwitchQosRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchQosRulesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSwitchQosRulesOrderRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchRoutingMulticastRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchRoutingMulticastRendezvousPointRequest {
  // Network ID
  string networkId = 1;
  // Rendezvous point ID
  string rendezvousPointId = 2;

}

message GetNetworkSwitchRoutingMulticastRendezvousPointsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchRoutingMulticastRendezvousPointsResponse {
  repeated array data = 1;
}

message GetNetworkSwitchRoutingOspfRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchStackRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;

}

message GetNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;

}

message GetNetworkSwitchStackRoutingInterfaceDhcpRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;

}

message GetNetworkSwitchStackRoutingInterfacesRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;

}

message GetNetworkSwitchStackRoutingInterfacesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSwitchStackRoutingStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Static route ID
  string staticRouteId = 3;

}

message GetNetworkSwitchStackRoutingStaticRoutesRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;

}

message GetNetworkSwitchStackRoutingStaticRoutesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSwitchStacksRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchStacksResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSwitchStormControlRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSwitchStpRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSyslogServersRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkTrafficAnalysisRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkTrafficShapingApplicationCategoriesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkTrafficShapingDscpTaggingOptionsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkTrafficShapingDscpTaggingOptionsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkVlanProfileRequest {
  // Network ID
  string networkId = 1;
  // Iname
  string iname = 2;

}

message GetNetworkVlanProfilesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkVlanProfilesResponse {
  repeated GetNetworkVlanProfiles200ResponseInner data = 1;
}

message GetNetworkVlanProfilesAssignmentsByDeviceRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match.
  repeated string serials = 5;
  // Optional parameter to filter devices by product types.
  repeated string productTypes = 6;
  // Optional parameter to filter devices by Switch Stack ids.
  repeated string stackIds = 7;

}

message GetNetworkVlanProfilesAssignmentsByDeviceResponse {
  repeated GetNetworkVlanProfilesAssignmentsByDevice200ResponseInner data = 1;
}

message GetNetworkWebhooksHttpServerRequest {
  // Network ID
  string networkId = 1;
  // Http server ID
  string httpServerId = 2;

}

message GetNetworkWebhooksHttpServersRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWebhooksHttpServersResponse {
  repeated GetNetworkWebhooksHttpServers200ResponseInner data = 1;
}

message GetNetworkWebhooksPayloadTemplateRequest {
  // Network ID
  string networkId = 1;
  // Payload template ID
  string payloadTemplateId = 2;

}

message GetNetworkWebhooksPayloadTemplatesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWebhooksPayloadTemplatesResponse {
  repeated GetNetworkWebhooksPayloadTemplates200ResponseInner data = 1;
}

message GetNetworkWebhooksWebhookTestRequest {
  // Network ID
  string networkId = 1;
  // Webhook test ID
  string webhookTestId = 2;

}

message GetNetworkWirelessAlternateManagementInterfaceRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessBillingRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessBluetoothSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  // Profile ID
  string profileId = 2;

}

message GetNetworkWirelessEthernetPortsProfilesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessEthernetPortsProfilesResponse {
  repeated GetNetworkWirelessEthernetPortsProfiles200ResponseInner data = 1;
}

message GetNetworkWirelessRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;

}

message GetNetworkWirelessRfProfilesRequest {
  // Network ID
  string networkId = 1;
  // If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false.
  bool includeTemplateProfiles = 2;

}

message GetNetworkWirelessSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessSsidRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidBonjourForwardingRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidDeviceTypeGroupPoliciesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidEapOverrideRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidFirewallL3FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidFirewallL7FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidHotspot20Request {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidIdentityPskRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  // Identity psk ID
  string identityPskId = 3;

}

message GetNetworkWirelessSsidIdentityPsksRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidIdentityPsksResponse {
  repeated GetNetworkWirelessSsidIdentityPsks200ResponseInner data = 1;
}

message GetNetworkWirelessSsidSchedulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidSplashSettingsRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidTrafficShapingRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidVpnRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessSsidsResponse {
  repeated GetNetworkWirelessSsids200ResponseInner data = 1;
}

message GetOrganizationRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationActionBatchRequest {
  // Organization ID
  string organizationId = 1;
  // Action batch ID
  string actionBatchId = 2;

}

message GetOrganizationActionBatchesRequest {
  // Organization ID
  string organizationId = 1;
  // Filter batches by status. Valid types are pending, completed, and failed.
  string status = 2;

}

message GetOrganizationActionBatchesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationAdaptivePolicyAclRequest {
  // Organization ID
  string organizationId = 1;
  // Acl ID
  string aclId = 2;

}

message GetOrganizationAdaptivePolicyAclsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationAdaptivePolicyAclsResponse {
  repeated GetOrganizationAdaptivePolicyAcls200ResponseInner data = 1;
}

message GetOrganizationAdaptivePolicyGroupRequest {
  // Organization ID
  string organizationId = 1;
  // ID
  string id = 2;

}

message GetOrganizationAdaptivePolicyGroupsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationAdaptivePolicyGroupsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationAdaptivePolicyPoliciesRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationAdaptivePolicyPoliciesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationAdaptivePolicyPolicyRequest {
  // Organization ID
  string organizationId = 1;
  // ID
  string id = 2;

}

message GetOrganizationAdaptivePolicySettingsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationAdminsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationAdminsResponse {
  repeated GetOrganizationAdmins200ResponseInner data = 1;
}

message GetOrganizationAlertsProfilesRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationAlertsProfilesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationApplianceSecurityIntrusionRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationApplianceTrafficShapingVpnExclusionsByNetworkRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter the results by network IDs
  repeated string networkIds = 5;

}

message GetOrganizationApplianceTrafficShapingVpnExclusionsByNetworkResponse {
  repeated UpdateNetworkApplianceTrafficShapingVpnExclusions200Response data = 1;
}

message GetOrganizationApplianceVpnThirdPartyVPNPeersRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationApplianceVpnVpnFirewallRulesRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationBrandingPoliciesRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationBrandingPoliciesResponse {
  repeated GetOrganizationBrandingPolicies200ResponseInner data = 1;
}

message GetOrganizationBrandingPoliciesPrioritiesRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationBrandingPolicyRequest {
  // Organization ID
  string organizationId = 1;
  // Branding policy ID
  string brandingPolicyId = 2;

}

message GetOrganizationCameraCustomAnalyticsArtifactRequest {
  // Organization ID
  string organizationId = 1;
  // Artifact ID
  string artifactId = 2;

}

message GetOrganizationCameraCustomAnalyticsArtifactsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationCameraCustomAnalyticsArtifactsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationCameraOnboardingStatusesRequest {
  // Organization ID
  string organizationId = 1;
  // A list of serial numbers. The returned cameras will be filtered to only include these serials.
  repeated string serials = 2;
  // A list of network IDs. The returned cameras will be filtered to only include these networks.
  repeated string networkIds = 3;

}

message GetOrganizationCameraOnboardingStatusesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationCameraPermissionRequest {
  // Organization ID
  string organizationId = 1;
  // Permission scope ID
  string permissionScopeId = 2;

}

message GetOrganizationCameraPermissionsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationCameraPermissionsResponse {
  repeated GetOrganizationCameraPermissions200ResponseInner data = 1;
}

message GetOrganizationCameraRoleRequest {
  // Organization ID
  string organizationId = 1;
  // Role ID
  string roleId = 2;

}

message GetOrganizationCameraRolesRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationCameraRolesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationClientsSearchRequest {
  // Organization ID
  string organizationId = 1;
  // The MAC address of the client. Required.
  string mac = 2;
  // The number of entries per page returned. Acceptable range is 3 - 5. Default is 5.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetOrganizationConfigTemplateRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;

}

message GetOrganizationConfigTemplateSwitchProfilePortRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;
  // Profile ID
  string profileId = 3;
  // Port ID
  string portId = 4;

}

message GetOrganizationConfigTemplateSwitchProfilePortsRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;
  // Profile ID
  string profileId = 3;

}

message GetOrganizationConfigTemplateSwitchProfilePortsResponse {
  repeated GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner data = 1;
}

message GetOrganizationConfigTemplateSwitchProfilesRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;

}

message GetOrganizationConfigTemplateSwitchProfilesResponse {
  repeated GetOrganizationConfigTemplateSwitchProfiles200ResponseInner data = 1;
}

message GetOrganizationConfigTemplatesRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationConfigTemplatesResponse {
  repeated GetOrganizationConfigTemplates200ResponseInner data = 1;
}

message GetOrganizationDevicesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Filter results by whether or not the device's configuration has been updated after the given timestamp
  string configurationUpdatedAfter = 5;
  // Optional parameter to filter devices by network.
  repeated string networkIds = 6;
  // Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
  repeated string productTypes = 7;
  // Optional parameter to filter devices by tags.
  repeated string tags = 8;
  // Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
  string tagsFilterType = 9;
  // Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
  string name = 10;
  // Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
  string mac = 11;
  // Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
  string serial = 12;
  // Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
  string model = 13;
  // Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
  repeated string macs = 14;
  // Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
  repeated string serials = 15;
  // Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
  repeated string sensorMetrics = 16;
  // Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
  repeated string sensorAlertProfileIds = 17;
  // Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
  repeated string models = 18;

}

message GetOrganizationDevicesResponse {
  repeated GetNetworkFloorPlans200ResponseInnerDevicesInner data = 1;
}

message GetOrganizationEarlyAccessFeaturesRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationEarlyAccessFeaturesResponse {
  repeated GetOrganizationEarlyAccessFeatures200ResponseInner data = 1;
}

message GetOrganizationEarlyAccessFeaturesOptInRequest {
  // Organization ID
  string organizationId = 1;
  // Opt in ID
  string optInId = 2;

}

message GetOrganizationEarlyAccessFeaturesOptInsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationEarlyAccessFeaturesOptInsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationFirmwareUpgradesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter the upgrade by status.
  repeated string status = 5;
  // Optional parameter to filter the upgrade by product type.
  repeated string productTypes = 6;

}

message GetOrganizationFirmwareUpgradesResponse {
  repeated GetOrganizationFirmwareUpgrades200ResponseInner data = 1;
}

message GetOrganizationFirmwareUpgradesByDeviceRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter by network
  repeated string networkIds = 5;
  // Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
  repeated string serials = 6;
  // Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
  repeated string macs = 7;
  // Optional parameter to filter by firmware upgrade batch ids.
  repeated string firmwareUpgradeBatchIds = 8;
  // Optional parameter to filter by firmware upgrade statuses.
  repeated string upgradeStatuses = 9;

}

message GetOrganizationFirmwareUpgradesByDeviceResponse {
  repeated GetOrganizationFirmwareUpgradesByDevice200ResponseInner data = 1;
}

message GetOrganizationInsightApplicationsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationInsightApplicationsResponse {
  repeated GetOrganizationInsightApplications200ResponseInner data = 1;
}

message GetOrganizationInsightMonitoredMediaServerRequest {
  // Organization ID
  string organizationId = 1;
  // Monitored media server ID
  string monitoredMediaServerId = 2;

}

message GetOrganizationInsightMonitoredMediaServersRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationInsightMonitoredMediaServersResponse {
  repeated GetOrganizationInsightMonitoredMediaServers200ResponseInner data = 1;
}

message GetOrganizationInventoryDeviceRequest {
  // Organization ID
  string organizationId = 1;
  // Serial
  string serial = 2;

}

message GetOrganizationInventoryDevicesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Filter results by used or unused inventory. Accepted values are 'used' or 'unused'.
  string usedState = 5;
  // Search for devices in inventory based on serial number, mac address, or model.
  string search = 6;
  // Search for devices in inventory based on mac addresses.
  repeated string macs = 7;
  // Search for devices in inventory based on network ids.
  repeated string networkIds = 8;
  // Search for devices in inventory based on serials.
  repeated string serials = 9;
  // Search for devices in inventory based on model.
  repeated string models = 10;
  // Search for devices in inventory based on order numbers.
  repeated string orderNumbers = 11;
  // Filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
  repeated string tags = 12;
  // To use with 'tags' parameter, to filter devices which contain ANY or ALL given tags. Accepted values are 'withAnyTags' or 'withAllTags', default is 'withAnyTags'.
  string tagsFilterType = 13;
  // Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
  repeated string productTypes = 14;

}

message GetOrganizationInventoryDevicesResponse {
  repeated GetOrganizationInventoryDevices200ResponseInner data = 1;
}

message GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest {
  // Organization ID
  string organizationId = 1;
  // import ids from an imports
  repeated string importIds = 2;

}

message GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse {
  repeated GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner data = 1;
}

message GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest {
  // Organization ID
  string organizationId = 1;
  // Device Type switch or wireless controller
  string deviceType = 2;
  // The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse {
  repeated GetNetwork200Response data = 1;
}

message GetOrganizationLicenseRequest {
  // Organization ID
  string organizationId = 1;
  // License ID
  string licenseId = 2;

}

message GetOrganizationLicensesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device.
  string deviceSerial = 5;
  // Filter the licenses to those assigned in a particular network
  string networkId = 6;
  // Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'recentlyQueued', 'unused' or 'unusedActive'
  string state = 7;

}

message GetOrganizationLicensesResponse {
  repeated GetOrganizationLicenses200ResponseInner data = 1;
}

message GetOrganizationLicensingCotermLicensesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Filter for licenses that are invalidated
  bool invalidated = 5;
  // Filter for licenses that are expired
  bool expired = 6;

}

message GetOrganizationLicensingCotermLicensesResponse {
  repeated GetOrganizationLicensingCotermLicenses200ResponseInner data = 1;
}

message GetOrganizationLoginSecurityRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationNetworksRequest {
  // Organization ID
  string organizationId = 1;
  // An optional parameter that is the ID of a config template. Will return all networks bound to that template.
  string configTemplateId = 2;
  // An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false.
  bool isBoundToConfigTemplate = 3;
  // An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
  repeated string tags = 4;
  // An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
  string tagsFilterType = 5;
  // The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
  int32 perPage = 6;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 7;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 8;

}

message GetOrganizationNetworksResponse {
  repeated GetNetwork200Response data = 1;
}

message GetOrganizationPolicyObjectRequest {
  // Organization ID
  string organizationId = 1;
  // Policy object ID
  string policyObjectId = 2;

}

message GetOrganizationPolicyObjectsRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 10 - 5000. Default is 5000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetOrganizationPolicyObjectsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationPolicyObjectsGroupRequest {
  // Organization ID
  string organizationId = 1;
  // Policy object group ID
  string policyObjectGroupId = 2;

}

message GetOrganizationPolicyObjectsGroupsRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 10 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetOrganizationPolicyObjectsGroupsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationSamlRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationSamlIdpRequest {
  // Organization ID
  string organizationId = 1;
  // Idp ID
  string idpId = 2;

}

message GetOrganizationSamlIdpsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationSamlIdpsResponse {
  repeated GetOrganizationSamlIdps200ResponseInner data = 1;
}

message GetOrganizationSamlRoleRequest {
  // Organization ID
  string organizationId = 1;
  // Saml role ID
  string samlRoleId = 2;

}

message GetOrganizationSamlRolesRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationSamlRolesResponse {
  repeated GetOrganizationSamlRoles200ResponseInner data = 1;
}

message GetOrganizationSmApnsCertRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationSmVppAccountRequest {
  // Organization ID
  string organizationId = 1;
  // Vpp account ID
  string vppAccountId = 2;

}

message GetOrganizationSmVppAccountsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationSmVppAccountsResponse {
  repeated GetOrganizationSmVppAccounts200ResponseInner data = 1;
}

message GetOrganizationSnmpRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationSwitchPortsBySwitchRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter switchports by network.
  repeated string networkIds = 5;
  // Optional parameter to filter switchports belonging to the specified port profiles.
  repeated string portProfileIds = 6;
  // Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
  string name = 7;
  // Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
  string mac = 8;
  // Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
  repeated string macs = 9;
  // Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
  string serial = 10;
  // Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
  repeated string serials = 11;
  // Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
  string configurationUpdatedAfter = 12;

}

message GetOrganizationSwitchPortsBySwitchResponse {
  repeated GetOrganizationSwitchPortsBySwitch200ResponseInner data = 1;
}

message GetOrganizationsResponse {
  repeated GetOrganizations200ResponseInner data = 1;
}

message InstallNetworkSmDeviceAppsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  InstallNetworkSmDeviceAppsRequest installNetworkSmDeviceAppsRequest = 3;

}

message LockNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest = 2;

}

message ModifyNetworkSmDevicesTagsRequest {
  // Network ID
  string networkId = 1;
  ModifyNetworkSmDevicesTagsRequest modifyNetworkSmDevicesTagsRequest = 2;

}

message ModifyNetworkSmDevicesTagsResponse {
  repeated ModifyNetworkSmDevicesTags200ResponseInner data = 1;
}

message MoveNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  MoveNetworkSmDevicesRequest moveNetworkSmDevicesRequest = 2;

}

message MoveOrganizationLicensesRequest {
  // Organization ID
  string organizationId = 1;
  MoveOrganizationLicensesRequest moveOrganizationLicensesRequest = 2;

}

message MoveOrganizationLicensesSeatsRequest {
  // Organization ID
  string organizationId = 1;
  MoveOrganizationLicensesSeatsRequest moveOrganizationLicensesSeatsRequest = 2;

}

message MoveOrganizationLicensingCotermLicensesRequest {
  // Organization ID
  string organizationId = 1;
  MoveOrganizationLicensingCotermLicensesRequest moveOrganizationLicensingCotermLicensesRequest = 2;

}

message ProvisionNetworkClientsRequest {
  // Network ID
  string networkId = 1;
  ProvisionNetworkClientsRequest provisionNetworkClientsRequest = 2;

}

message ReassignNetworkVlanProfilesAssignmentsRequest {
  // Network ID
  string networkId = 1;
  ReassignNetworkVlanProfilesAssignmentsRequest reassignNetworkVlanProfilesAssignmentsRequest = 2;

}

message RefreshNetworkSmDeviceDetailsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message ReleaseFromOrganizationInventoryRequest {
  // Organization ID
  string organizationId = 1;
  ReleaseFromOrganizationInventoryRequest releaseFromOrganizationInventoryRequest = 2;

}

message RemoveNetworkDevicesRequest {
  // Network ID
  string networkId = 1;
  RemoveNetworkDevicesRequest removeNetworkDevicesRequest = 2;

}

message RemoveNetworkSwitchStackRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  RemoveNetworkSwitchStackRequest removeNetworkSwitchStackRequest = 3;

}

message RenewOrganizationLicensesSeatsRequest {
  // Organization ID
  string organizationId = 1;
  RenewOrganizationLicensesSeatsRequest renewOrganizationLicensesSeatsRequest = 2;

}

message RollbacksNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;
  RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest = 2;

}

message SetNetworkWirelessEthernetPortsProfilesDefaultRequest {
  // Network ID
  string networkId = 1;
  SetNetworkWirelessEthernetPortsProfilesDefaultRequest setNetworkWirelessEthernetPortsProfilesDefaultRequest = 2;

}

message SplitNetworkRequest {
  // Network ID
  string networkId = 1;

}

message SwapNetworkApplianceWarmSpareRequest {
  // Network ID
  string networkId = 1;

}

message UnbindNetworkRequest {
  // Network ID
  string networkId = 1;
  UnbindNetworkRequest unbindNetworkRequest = 2;

}

message UnenrollNetworkSmDeviceRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message UninstallNetworkSmDeviceAppsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  UninstallNetworkSmDeviceAppsRequest uninstallNetworkSmDeviceAppsRequest = 3;

}

message UpdateDeviceRequest {
  // Serial
  string serial = 1;
  UpdateDeviceRequest updateDeviceRequest = 2;

}

message UpdateDeviceApplianceUplinksSettingsRequest {
  // Serial
  string serial = 1;
  UpdateDeviceApplianceUplinksSettingsRequest updateDeviceApplianceUplinksSettingsRequest = 2;

}

message UpdateDeviceCameraCustomAnalyticsRequest {
  // Serial
  string serial = 1;
  UpdateDeviceCameraCustomAnalyticsRequest updateDeviceCameraCustomAnalyticsRequest = 2;

}

message UpdateDeviceCameraSenseRequest {
  // Serial
  string serial = 1;
  UpdateDeviceCameraSenseRequest updateDeviceCameraSenseRequest = 2;

}

message UpdateDeviceCameraVideoSettingsRequest {
  // Serial
  string serial = 1;
  UpdateDeviceCameraVideoSettingsRequest updateDeviceCameraVideoSettingsRequest = 2;

}

message UpdateDeviceCameraWirelessProfilesRequest {
  // Serial
  string serial = 1;
  UpdateDeviceCameraWirelessProfilesRequest updateDeviceCameraWirelessProfilesRequest = 2;

}

message UpdateDeviceCellularGatewayLanRequest {
  // Serial
  string serial = 1;
  UpdateDeviceCellularGatewayLanRequest updateDeviceCellularGatewayLanRequest = 2;

}

message UpdateDeviceCellularGatewayPortForwardingRulesRequest {
  // Serial
  string serial = 1;
  UpdateDeviceCellularGatewayPortForwardingRulesRequest updateDeviceCellularGatewayPortForwardingRulesRequest = 2;

}

message UpdateDeviceCellularSimsRequest {
  // Serial
  string serial = 1;
  UpdateDeviceCellularSimsRequest updateDeviceCellularSimsRequest = 2;

}

message UpdateDeviceManagementInterfaceRequest {
  // Serial
  string serial = 1;
  UpdateDeviceManagementInterfaceRequest updateDeviceManagementInterfaceRequest = 2;

}

message UpdateDeviceSensorRelationshipsRequest {
  // Serial
  string serial = 1;
  UpdateDeviceSensorRelationshipsRequest updateDeviceSensorRelationshipsRequest = 2;

}

message UpdateDeviceSwitchPortRequest {
  // Serial
  string serial = 1;
  // Port ID
  string portId = 2;
  UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest = 3;

}

message UpdateDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;
  CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = 3;

}

message UpdateDeviceSwitchRoutingInterfaceDhcpRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;
  UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest = 3;

}

message UpdateDeviceSwitchRoutingStaticRouteRequest {
  // Serial
  string serial = 1;
  // Static route ID
  string staticRouteId = 2;
  UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = 3;

}

message UpdateDeviceSwitchWarmSpareRequest {
  // Serial
  string serial = 1;
  UpdateDeviceSwitchWarmSpareRequest updateDeviceSwitchWarmSpareRequest = 2;

}

message UpdateDeviceWirelessAlternateManagementInterfaceIpv6Request {
  // Serial
  string serial = 1;
  UpdateDeviceWirelessAlternateManagementInterfaceIpv6Request updateDeviceWirelessAlternateManagementInterfaceIpv6Request = 2;

}

message UpdateDeviceWirelessBluetoothSettingsRequest {
  // Serial
  string serial = 1;
  UpdateDeviceWirelessBluetoothSettingsRequest updateDeviceWirelessBluetoothSettingsRequest = 2;

}

message UpdateNetworkRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkRequest updateNetworkRequest = 2;

}

message UpdateNetworkAlertsSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest = 2;

}

message UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest updateNetworkApplianceConnectivityMonitoringDestinationsRequest = 2;

}

message UpdateNetworkApplianceContentFilteringRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceContentFilteringRequest updateNetworkApplianceContentFilteringRequest = 2;

}

message UpdateNetworkApplianceFirewallCellularFirewallRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallFirewalledServiceRequest {
  // Network ID
  string networkId = 1;
  // Service
  string service = 2;
  UpdateNetworkApplianceFirewallFirewalledServiceRequest updateNetworkApplianceFirewallFirewalledServiceRequest = 3;

}

message UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message UpdateNetworkApplianceFirewallInboundFirewallRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallL3FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallL7FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallL7FirewallRulesRequest updateNetworkApplianceFirewallL7FirewallRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallOneToManyNatRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallOneToManyNatRulesRequest updateNetworkApplianceFirewallOneToManyNatRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallOneToOneNatRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallOneToOneNatRulesRequest updateNetworkApplianceFirewallOneToOneNatRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallPortForwardingRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallPortForwardingRulesRequest updateNetworkApplianceFirewallPortForwardingRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallSettingsRequest updateNetworkApplianceFirewallSettingsRequest = 2;

}

message UpdateNetworkAppliancePortRequest {
  // Network ID
  string networkId = 1;
  // Port ID
  string portId = 2;
  UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest = 3;

}

message UpdateNetworkAppliancePrefixesDelegatedStaticRequest {
  // Network ID
  string networkId = 1;
  // Static delegated prefix ID
  string staticDelegatedPrefixId = 2;
  UpdateNetworkAppliancePrefixesDelegatedStaticRequest updateNetworkAppliancePrefixesDelegatedStaticRequest = 3;

}

message UpdateNetworkApplianceRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;
  UpdateNetworkApplianceRfProfileRequest updateNetworkApplianceRfProfileRequest = 3;

}

message UpdateNetworkApplianceSecurityIntrusionRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceSecurityIntrusionRequest updateNetworkApplianceSecurityIntrusionRequest = 2;

}

message UpdateNetworkApplianceSecurityMalwareRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceSecurityMalwareRequest updateNetworkApplianceSecurityMalwareRequest = 2;

}

message UpdateNetworkApplianceSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceSettingsRequest updateNetworkApplianceSettingsRequest = 2;

}

message UpdateNetworkApplianceSingleLanRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceSingleLanRequest updateNetworkApplianceSingleLanRequest = 2;

}

message UpdateNetworkApplianceSsidRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkApplianceSsidRequest updateNetworkApplianceSsidRequest = 3;

}

message UpdateNetworkApplianceStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Static route ID
  string staticRouteId = 2;
  UpdateNetworkApplianceStaticRouteRequest updateNetworkApplianceStaticRouteRequest = 3;

}

message UpdateNetworkApplianceTrafficShapingRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceTrafficShapingRequest updateNetworkApplianceTrafficShapingRequest = 2;

}

message UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest {
  // Network ID
  string networkId = 1;
  // Custom performance class ID
  string customPerformanceClassId = 2;
  UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest = 3;

}

message UpdateNetworkApplianceTrafficShapingRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceTrafficShapingRulesRequest updateNetworkApplianceTrafficShapingRulesRequest = 2;

}

message UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest updateNetworkApplianceTrafficShapingUplinkBandwidthRequest = 2;

}

message UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest updateNetworkApplianceTrafficShapingUplinkSelectionRequest = 2;

}

message UpdateNetworkApplianceTrafficShapingVpnExclusionsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceTrafficShapingVpnExclusionsRequest updateNetworkApplianceTrafficShapingVpnExclusionsRequest = 2;

}

message UpdateNetworkApplianceVlanRequest {
  // Network ID
  string networkId = 1;
  // Vlan ID
  string vlanId = 2;
  UpdateNetworkApplianceVlanRequest updateNetworkApplianceVlanRequest = 3;

}

message UpdateNetworkApplianceVlansSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceVlansSettingsRequest updateNetworkApplianceVlansSettingsRequest = 2;

}

message UpdateNetworkApplianceVpnBgpRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceVpnBgpRequest updateNetworkApplianceVpnBgpRequest = 2;

}

message UpdateNetworkApplianceVpnSiteToSiteVpnRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceVpnSiteToSiteVpnRequest updateNetworkApplianceVpnSiteToSiteVpnRequest = 2;

}

message UpdateNetworkApplianceWarmSpareRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceWarmSpareRequest updateNetworkApplianceWarmSpareRequest = 2;

}

message UpdateNetworkCameraQualityRetentionProfileRequest {
  // Network ID
  string networkId = 1;
  // Quality retention profile ID
  string qualityRetentionProfileId = 2;
  UpdateNetworkCameraQualityRetentionProfileRequest updateNetworkCameraQualityRetentionProfileRequest = 3;

}

message UpdateNetworkCameraWirelessProfileRequest {
  // Network ID
  string networkId = 1;
  // Wireless profile ID
  string wirelessProfileId = 2;
  UpdateNetworkCameraWirelessProfileRequest updateNetworkCameraWirelessProfileRequest = 3;

}

message UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest = 2;

}

message UpdateNetworkCellularGatewayDhcpRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkCellularGatewayDhcpRequest updateNetworkCellularGatewayDhcpRequest = 2;

}

message UpdateNetworkCellularGatewaySubnetPoolRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkCellularGatewaySubnetPoolRequest updateNetworkCellularGatewaySubnetPoolRequest = 2;

}

message UpdateNetworkCellularGatewayUplinkRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkCellularGatewayUplinkRequest updateNetworkCellularGatewayUplinkRequest = 2;

}

message UpdateNetworkClientPolicyRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;
  UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest = 3;

}

message UpdateNetworkClientSplashAuthorizationStatusRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;
  UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest = 3;

}

message UpdateNetworkFirmwareUpgradesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest = 2;

}

message UpdateNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest = 2;

}

message UpdateNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  // Group ID
  string groupId = 2;
  CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = 3;

}

message UpdateNetworkFirmwareUpgradesStagedStagesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest = 2;

}

message UpdateNetworkFirmwareUpgradesStagedStagesResponse {
  repeated GetNetworkFirmwareUpgradesStagedStages200ResponseInner data = 1;
}

message UpdateNetworkFloorPlanRequest {
  // Network ID
  string networkId = 1;
  // Floor plan ID
  string floorPlanId = 2;
  UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest = 3;

}

message UpdateNetworkGroupPolicyRequest {
  // Network ID
  string networkId = 1;
  // Group policy ID
  string groupPolicyId = 2;
  UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest = 3;

}

message UpdateNetworkMerakiAuthUserRequest {
  // Network ID
  string networkId = 1;
  // Meraki auth user ID
  string merakiAuthUserId = 2;
  UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest = 3;

}

message UpdateNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;
  UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest = 3;

}

message UpdateNetworkNetflowRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkNetflowRequest updateNetworkNetflowRequest = 2;

}

message UpdateNetworkSensorMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;
  UpdateNetworkSensorMqttBrokerRequest updateNetworkSensorMqttBrokerRequest = 3;

}

message UpdateNetworkSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSettingsRequest updateNetworkSettingsRequest = 2;

}

message UpdateNetworkSmDevicesFieldsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSmDevicesFieldsRequest updateNetworkSmDevicesFieldsRequest = 2;

}

message UpdateNetworkSmDevicesFieldsResponse {
  repeated UpdateNetworkSmDevicesFields200ResponseInner data = 1;
}

message UpdateNetworkSmTargetGroupRequest {
  // Network ID
  string networkId = 1;
  // Target group ID
  string targetGroupId = 2;
  CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest = 3;

}

message UpdateNetworkSnmpRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSnmpRequest updateNetworkSnmpRequest = 2;

}

message UpdateNetworkSwitchAccessControlListsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchAccessControlListsRequest updateNetworkSwitchAccessControlListsRequest = 2;

}

message UpdateNetworkSwitchAccessPolicyRequest {
  // Network ID
  string networkId = 1;
  // Access policy number
  string accessPolicyNumber = 2;
  UpdateNetworkSwitchAccessPolicyRequest updateNetworkSwitchAccessPolicyRequest = 3;

}

message UpdateNetworkSwitchAlternateManagementInterfaceRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchAlternateManagementInterfaceRequest updateNetworkSwitchAlternateManagementInterfaceRequest = 2;

}

message UpdateNetworkSwitchDhcpServerPolicyRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchDhcpServerPolicyRequest updateNetworkSwitchDhcpServerPolicyRequest = 2;

}

message UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest {
  // Network ID
  string networkId = 1;
  // Trusted server ID
  string trustedServerId = 2;
  UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest = 3;

}

message UpdateNetworkSwitchDscpToCosMappingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchDscpToCosMappingsRequest updateNetworkSwitchDscpToCosMappingsRequest = 2;

}

message UpdateNetworkSwitchLinkAggregationRequest {
  // Network ID
  string networkId = 1;
  // Link aggregation ID
  string linkAggregationId = 2;
  UpdateNetworkSwitchLinkAggregationRequest updateNetworkSwitchLinkAggregationRequest = 3;

}

message UpdateNetworkSwitchMtuRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchMtuRequest updateNetworkSwitchMtuRequest = 2;

}

message UpdateNetworkSwitchPortScheduleRequest {
  // Network ID
  string networkId = 1;
  // Port schedule ID
  string portScheduleId = 2;
  UpdateNetworkSwitchPortScheduleRequest updateNetworkSwitchPortScheduleRequest = 3;

}

message UpdateNetworkSwitchQosRuleRequest {
  // Network ID
  string networkId = 1;
  // Qos rule ID
  string qosRuleId = 2;
  UpdateNetworkSwitchQosRuleRequest updateNetworkSwitchQosRuleRequest = 3;

}

message UpdateNetworkSwitchQosRulesOrderRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchQosRulesOrderRequest updateNetworkSwitchQosRulesOrderRequest = 2;

}

message UpdateNetworkSwitchRoutingMulticastRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchRoutingMulticastRequest updateNetworkSwitchRoutingMulticastRequest = 2;

}

message UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest {
  // Network ID
  string networkId = 1;
  // Rendezvous point ID
  string rendezvousPointId = 2;
  UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest updateNetworkSwitchRoutingMulticastRendezvousPointRequest = 3;

}

message UpdateNetworkSwitchRoutingOspfRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchRoutingOspfRequest updateNetworkSwitchRoutingOspfRequest = 2;

}

message UpdateNetworkSwitchSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchSettingsRequest updateNetworkSwitchSettingsRequest = 2;

}

message UpdateNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;
  UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest = 4;

}

message UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;
  UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest = 4;

}

message UpdateNetworkSwitchStackRoutingStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Static route ID
  string staticRouteId = 3;
  UpdateDeviceSwitchRoutingStaticRouteRequest updateDeviceSwitchRoutingStaticRouteRequest = 4;

}

message UpdateNetworkSwitchStormControlRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchStormControlRequest updateNetworkSwitchStormControlRequest = 2;

}

message UpdateNetworkSwitchStpRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSwitchStpRequest updateNetworkSwitchStpRequest = 2;

}

message UpdateNetworkSyslogServersRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest = 2;

}

message UpdateNetworkTrafficAnalysisRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest = 2;

}

message UpdateNetworkVlanProfileRequest {
  // Network ID
  string networkId = 1;
  // Iname
  string iname = 2;
  UpdateNetworkVlanProfileRequest updateNetworkVlanProfileRequest = 3;

}

message UpdateNetworkWebhooksHttpServerRequest {
  // Network ID
  string networkId = 1;
  // Http server ID
  string httpServerId = 2;
  UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest = 3;

}

message UpdateNetworkWebhooksPayloadTemplateRequest {
  // Network ID
  string networkId = 1;
  // Payload template ID
  string payloadTemplateId = 2;
  UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest = 3;

}

message UpdateNetworkWirelessAlternateManagementInterfaceRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkWirelessAlternateManagementInterfaceRequest updateNetworkWirelessAlternateManagementInterfaceRequest = 2;

}

message UpdateNetworkWirelessBillingRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkWirelessBillingRequest updateNetworkWirelessBillingRequest = 2;

}

message UpdateNetworkWirelessBluetoothSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkWirelessBluetoothSettingsRequest updateNetworkWirelessBluetoothSettingsRequest = 2;

}

message UpdateNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  // Profile ID
  string profileId = 2;
  UpdateNetworkWirelessEthernetPortsProfileRequest updateNetworkWirelessEthernetPortsProfileRequest = 3;

}

message UpdateNetworkWirelessRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;
  UpdateNetworkWirelessRfProfileRequest updateNetworkWirelessRfProfileRequest = 3;

}

message UpdateNetworkWirelessSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkWirelessSettingsRequest updateNetworkWirelessSettingsRequest = 2;

}

message UpdateNetworkWirelessSsidRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidRequest updateNetworkWirelessSsidRequest = 3;

}

message UpdateNetworkWirelessSsidBonjourForwardingRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidBonjourForwardingRequest updateNetworkWirelessSsidBonjourForwardingRequest = 3;

}

message UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest = 3;

}

message UpdateNetworkWirelessSsidEapOverrideRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidEapOverrideRequest updateNetworkWirelessSsidEapOverrideRequest = 3;

}

message UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest updateNetworkWirelessSsidFirewallL3FirewallRulesRequest = 3;

}

message UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest updateNetworkWirelessSsidFirewallL7FirewallRulesRequest = 3;

}

message UpdateNetworkWirelessSsidHotspot20Request {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidHotspot20Request updateNetworkWirelessSsidHotspot20Request = 3;

}

message UpdateNetworkWirelessSsidIdentityPskRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  // Identity psk ID
  string identityPskId = 3;
  UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest = 4;

}

message UpdateNetworkWirelessSsidSchedulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidSchedulesRequest updateNetworkWirelessSsidSchedulesRequest = 3;

}

message UpdateNetworkWirelessSsidSplashSettingsRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest = 3;

}

message UpdateNetworkWirelessSsidTrafficShapingRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidTrafficShapingRulesRequest updateNetworkWirelessSsidTrafficShapingRulesRequest = 3;

}

message UpdateNetworkWirelessSsidVpnRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidVpnRequest updateNetworkWirelessSsidVpnRequest = 3;

}

message UpdateOrganizationRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationRequest updateOrganizationRequest = 2;

}

message UpdateOrganizationActionBatchRequest {
  // Organization ID
  string organizationId = 1;
  // Action batch ID
  string actionBatchId = 2;
  UpdateOrganizationActionBatchRequest updateOrganizationActionBatchRequest = 3;

}

message UpdateOrganizationAdaptivePolicyAclRequest {
  // Organization ID
  string organizationId = 1;
  // Acl ID
  string aclId = 2;
  UpdateOrganizationAdaptivePolicyAclRequest updateOrganizationAdaptivePolicyAclRequest = 3;

}

message UpdateOrganizationAdaptivePolicyGroupRequest {
  // Organization ID
  string organizationId = 1;
  // ID
  string id = 2;
  UpdateOrganizationAdaptivePolicyGroupRequest updateOrganizationAdaptivePolicyGroupRequest = 3;

}

message UpdateOrganizationAdaptivePolicyPolicyRequest {
  // Organization ID
  string organizationId = 1;
  // ID
  string id = 2;
  UpdateOrganizationAdaptivePolicyPolicyRequest updateOrganizationAdaptivePolicyPolicyRequest = 3;

}

message UpdateOrganizationAdaptivePolicySettingsRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationAdaptivePolicySettingsRequest updateOrganizationAdaptivePolicySettingsRequest = 2;

}

message UpdateOrganizationAdminRequest {
  // Organization ID
  string organizationId = 1;
  // Admin ID
  string adminId = 2;
  UpdateOrganizationAdminRequest updateOrganizationAdminRequest = 3;

}

message UpdateOrganizationAlertsProfileRequest {
  // Organization ID
  string organizationId = 1;
  // Alert config ID
  string alertConfigId = 2;
  UpdateOrganizationAlertsProfileRequest updateOrganizationAlertsProfileRequest = 3;

}

message UpdateOrganizationApplianceSecurityIntrusionRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationApplianceSecurityIntrusionRequest updateOrganizationApplianceSecurityIntrusionRequest = 2;

}

message UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest updateOrganizationApplianceVpnThirdPartyVPNPeersRequest = 2;

}

message UpdateOrganizationApplianceVpnVpnFirewallRulesRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationApplianceVpnVpnFirewallRulesRequest updateOrganizationApplianceVpnVpnFirewallRulesRequest = 2;

}

message UpdateOrganizationBrandingPoliciesPrioritiesRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationBrandingPoliciesPrioritiesRequest updateOrganizationBrandingPoliciesPrioritiesRequest = 2;

}

message UpdateOrganizationBrandingPolicyRequest {
  // Organization ID
  string organizationId = 1;
  // Branding policy ID
  string brandingPolicyId = 2;
  UpdateOrganizationBrandingPolicyRequest updateOrganizationBrandingPolicyRequest = 3;

}

message UpdateOrganizationCameraOnboardingStatusesRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationCameraOnboardingStatusesRequest updateOrganizationCameraOnboardingStatusesRequest = 2;

}

message UpdateOrganizationCameraRoleRequest {
  // Organization ID
  string organizationId = 1;
  // Role ID
  string roleId = 2;
  UpdateOrganizationCameraRoleRequest updateOrganizationCameraRoleRequest = 3;

}

message UpdateOrganizationConfigTemplateRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;
  UpdateOrganizationConfigTemplateRequest updateOrganizationConfigTemplateRequest = 3;

}

message UpdateOrganizationConfigTemplateSwitchProfilePortRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;
  // Profile ID
  string profileId = 3;
  // Port ID
  string portId = 4;
  UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest = 5;

}

message UpdateOrganizationEarlyAccessFeaturesOptInRequest {
  // Organization ID
  string organizationId = 1;
  // Opt in ID
  string optInId = 2;
  UpdateOrganizationEarlyAccessFeaturesOptInRequest updateOrganizationEarlyAccessFeaturesOptInRequest = 3;

}

message UpdateOrganizationInsightMonitoredMediaServerRequest {
  // Organization ID
  string organizationId = 1;
  // Monitored media server ID
  string monitoredMediaServerId = 2;
  UpdateOrganizationInsightMonitoredMediaServerRequest updateOrganizationInsightMonitoredMediaServerRequest = 3;

}

message UpdateOrganizationLicenseRequest {
  // Organization ID
  string organizationId = 1;
  // License ID
  string licenseId = 2;
  UpdateOrganizationLicenseRequest updateOrganizationLicenseRequest = 3;

}

message UpdateOrganizationLoginSecurityRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationLoginSecurityRequest updateOrganizationLoginSecurityRequest = 2;

}

message UpdateOrganizationPolicyObjectRequest {
  // Organization ID
  string organizationId = 1;
  // Policy object ID
  string policyObjectId = 2;
  UpdateOrganizationPolicyObjectRequest updateOrganizationPolicyObjectRequest = 3;

}

message UpdateOrganizationPolicyObjectsGroupRequest {
  // Organization ID
  string organizationId = 1;
  // Policy object group ID
  string policyObjectGroupId = 2;
  UpdateOrganizationPolicyObjectsGroupRequest updateOrganizationPolicyObjectsGroupRequest = 3;

}

message UpdateOrganizationSamlRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationSamlRequest updateOrganizationSamlRequest = 2;

}

message UpdateOrganizationSamlIdpRequest {
  // Organization ID
  string organizationId = 1;
  // Idp ID
  string idpId = 2;
  UpdateOrganizationSamlIdpRequest updateOrganizationSamlIdpRequest = 3;

}

message UpdateOrganizationSamlIdpResponse {
  repeated GetOrganizationSamlIdps200ResponseInner data = 1;
}

message UpdateOrganizationSamlRoleRequest {
  // Organization ID
  string organizationId = 1;
  // Saml role ID
  string samlRoleId = 2;
  UpdateOrganizationSamlRoleRequest updateOrganizationSamlRoleRequest = 3;

}

message UpdateOrganizationSnmpRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationSnmpRequest updateOrganizationSnmpRequest = 2;

}

message VmxNetworkDevicesClaimRequest {
  // Network ID
  string networkId = 1;
  VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest = 2;

}

message WipeNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  WipeNetworkSmDevicesRequest wipeNetworkSmDevicesRequest = 2;

}

