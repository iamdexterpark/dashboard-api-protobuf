/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.smservice;

import "google/protobuf/empty.proto";
import public "models/checkin_network_sm_devices200_response.proto";
import public "models/checkin_network_sm_devices_request.proto";
import public "models/create_network_sm_bypass_activation_lock_attempt_request.proto";
import public "models/create_network_sm_target_group_request.proto";
import public "models/get_network_sm_device_cellular_usage_history200_response_inner.proto";
import public "models/get_network_sm_device_certs200_response_inner.proto";
import public "models/get_network_sm_device_connectivity200_response_inner.proto";
import public "models/get_network_sm_device_desktop_logs200_response_inner.proto";
import public "models/get_network_sm_device_device_command_logs200_response_inner.proto";
import public "models/get_network_sm_device_device_profiles200_response_inner.proto";
import public "models/get_network_sm_device_network_adapters200_response_inner.proto";
import public "models/get_network_sm_device_performance_history200_response_inner.proto";
import public "models/get_network_sm_device_security_centers200_response_inner.proto";
import public "models/get_network_sm_device_softwares200_response_inner.proto";
import public "models/get_network_sm_device_wlan_lists200_response_inner.proto";
import public "models/get_network_sm_devices200_response_inner.proto";
import public "models/get_network_sm_trusted_access_configs200_response_inner.proto";
import public "models/get_network_sm_user_access_devices200_response_inner.proto";
import public "models/get_network_sm_users200_response_inner.proto";
import public "models/get_organization_sm_apns_cert200_response.proto";
import public "models/get_organization_sm_vpp_accounts200_response_inner.proto";
import public "models/install_network_sm_device_apps_request.proto";
import public "models/lock_network_sm_devices_request.proto";
import public "models/modify_network_sm_devices_tags200_response_inner.proto";
import public "models/modify_network_sm_devices_tags_request.proto";
import public "models/move_network_sm_devices200_response.proto";
import public "models/move_network_sm_devices_request.proto";
import public "models/todo_object_mapping.proto";
import public "models/unenroll_network_sm_device200_response.proto";
import public "models/uninstall_network_sm_device_apps_request.proto";
import public "models/update_network_sm_devices_fields200_response_inner.proto";
import public "models/update_network_sm_devices_fields_request.proto";
import public "models/wipe_network_sm_devices200_response.proto";
import public "models/wipe_network_sm_devices_request.proto";

service SmService {
  rpc CheckinNetworkSmDevices (CheckinNetworkSmDevicesRequest) returns (CheckinNetworkSmDevices200Response);

  rpc CreateNetworkSmBypassActivationLockAttempt (CreateNetworkSmBypassActivationLockAttemptRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkSmTargetGroup (CreateNetworkSmTargetGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc DeleteNetworkSmTargetGroup (DeleteNetworkSmTargetGroupRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSmUserAccessDevice (DeleteNetworkSmUserAccessDeviceRequest) returns (google.protobuf.Empty);

  rpc GetNetworkSmBypassActivationLockAttempt (GetNetworkSmBypassActivationLockAttemptRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSmDeviceCellularUsageHistory (GetNetworkSmDeviceCellularUsageHistoryRequest) returns (GetNetworkSmDeviceCellularUsageHistoryResponse);

  rpc GetNetworkSmDeviceCerts (GetNetworkSmDeviceCertsRequest) returns (GetNetworkSmDeviceCertsResponse);

  rpc GetNetworkSmDeviceConnectivity (GetNetworkSmDeviceConnectivityRequest) returns (GetNetworkSmDeviceConnectivityResponse);

  rpc GetNetworkSmDeviceDesktopLogs (GetNetworkSmDeviceDesktopLogsRequest) returns (GetNetworkSmDeviceDesktopLogsResponse);

  rpc GetNetworkSmDeviceDeviceCommandLogs (GetNetworkSmDeviceDeviceCommandLogsRequest) returns (GetNetworkSmDeviceDeviceCommandLogsResponse);

  rpc GetNetworkSmDeviceDeviceProfiles (GetNetworkSmDeviceDeviceProfilesRequest) returns (GetNetworkSmDeviceDeviceProfilesResponse);

  rpc GetNetworkSmDeviceNetworkAdapters (GetNetworkSmDeviceNetworkAdaptersRequest) returns (GetNetworkSmDeviceNetworkAdaptersResponse);

  rpc GetNetworkSmDevicePerformanceHistory (GetNetworkSmDevicePerformanceHistoryRequest) returns (GetNetworkSmDevicePerformanceHistoryResponse);

  rpc GetNetworkSmDeviceRestrictions (GetNetworkSmDeviceRestrictionsRequest) returns (GetNetworkSmDeviceRestrictionsResponse);

  rpc GetNetworkSmDeviceSecurityCenters (GetNetworkSmDeviceSecurityCentersRequest) returns (GetNetworkSmDeviceSecurityCentersResponse);

  rpc GetNetworkSmDeviceSoftwares (GetNetworkSmDeviceSoftwaresRequest) returns (GetNetworkSmDeviceSoftwaresResponse);

  rpc GetNetworkSmDeviceWlanLists (GetNetworkSmDeviceWlanListsRequest) returns (GetNetworkSmDeviceWlanListsResponse);

  rpc GetNetworkSmDevices (GetNetworkSmDevicesRequest) returns (GetNetworkSmDevicesResponse);

  rpc GetNetworkSmProfiles (GetNetworkSmProfilesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSmTargetGroup (GetNetworkSmTargetGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSmTargetGroups (GetNetworkSmTargetGroupsRequest) returns (GetNetworkSmTargetGroupsResponse);

  rpc GetNetworkSmTrustedAccessConfigs (GetNetworkSmTrustedAccessConfigsRequest) returns (GetNetworkSmTrustedAccessConfigsResponse);

  rpc GetNetworkSmUserAccessDevices (GetNetworkSmUserAccessDevicesRequest) returns (GetNetworkSmUserAccessDevicesResponse);

  rpc GetNetworkSmUserDeviceProfiles (GetNetworkSmUserDeviceProfilesRequest) returns (GetNetworkSmUserDeviceProfilesResponse);

  rpc GetNetworkSmUserSoftwares (GetNetworkSmUserSoftwaresRequest) returns (GetNetworkSmUserSoftwaresResponse);

  rpc GetNetworkSmUsers (GetNetworkSmUsersRequest) returns (GetNetworkSmUsersResponse);

  rpc GetOrganizationSmApnsCert (GetOrganizationSmApnsCertRequest) returns (GetOrganizationSmApnsCert200Response);

  rpc GetOrganizationSmVppAccount (GetOrganizationSmVppAccountRequest) returns (GetOrganizationSmVppAccounts200ResponseInner);

  rpc GetOrganizationSmVppAccounts (GetOrganizationSmVppAccountsRequest) returns (GetOrganizationSmVppAccountsResponse);

  rpc InstallNetworkSmDeviceApps (InstallNetworkSmDeviceAppsRequest) returns (google.protobuf.Empty);

  rpc LockNetworkSmDevices (LockNetworkSmDevicesRequest) returns (CheckinNetworkSmDevices200Response);

  rpc ModifyNetworkSmDevicesTags (ModifyNetworkSmDevicesTagsRequest) returns (ModifyNetworkSmDevicesTagsResponse);

  rpc MoveNetworkSmDevices (MoveNetworkSmDevicesRequest) returns (MoveNetworkSmDevices200Response);

  rpc RefreshNetworkSmDeviceDetails (RefreshNetworkSmDeviceDetailsRequest) returns (google.protobuf.Empty);

  rpc UnenrollNetworkSmDevice (UnenrollNetworkSmDeviceRequest) returns (UnenrollNetworkSmDevice200Response);

  rpc UninstallNetworkSmDeviceApps (UninstallNetworkSmDeviceAppsRequest) returns (google.protobuf.Empty);

  rpc UpdateNetworkSmDevicesFields (UpdateNetworkSmDevicesFieldsRequest) returns (UpdateNetworkSmDevicesFieldsResponse);

  rpc UpdateNetworkSmTargetGroup (UpdateNetworkSmTargetGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc WipeNetworkSmDevices (WipeNetworkSmDevicesRequest) returns (WipeNetworkSmDevices200Response);

}

message CheckinNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest = 2;

}

message CreateNetworkSmBypassActivationLockAttemptRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSmBypassActivationLockAttemptRequest createNetworkSmBypassActivationLockAttemptRequest = 2;

}

message CreateNetworkSmTargetGroupRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest = 2;

}

message DeleteNetworkSmTargetGroupRequest {
  // Network ID
  string networkId = 1;
  // Target group ID
  string targetGroupId = 2;

}

message DeleteNetworkSmUserAccessDeviceRequest {
  // Network ID
  string networkId = 1;
  // User access device ID
  string userAccessDeviceId = 2;

}

message GetNetworkSmBypassActivationLockAttemptRequest {
  // Network ID
  string networkId = 1;
  // Attempt ID
  string attemptId = 2;

}

message GetNetworkSmDeviceCellularUsageHistoryRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceCellularUsageHistoryResponse {
  repeated GetNetworkSmDeviceCellularUsageHistory200ResponseInner data = 1;
}

message GetNetworkSmDeviceCertsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceCertsResponse {
  repeated GetNetworkSmDeviceCerts200ResponseInner data = 1;
}

message GetNetworkSmDeviceConnectivityRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetNetworkSmDeviceConnectivityResponse {
  repeated GetNetworkSmDeviceConnectivity200ResponseInner data = 1;
}

message GetNetworkSmDeviceDesktopLogsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetNetworkSmDeviceDesktopLogsResponse {
  repeated GetNetworkSmDeviceDesktopLogs200ResponseInner data = 1;
}

message GetNetworkSmDeviceDeviceCommandLogsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetNetworkSmDeviceDeviceCommandLogsResponse {
  repeated GetNetworkSmDeviceDeviceCommandLogs200ResponseInner data = 1;
}

message GetNetworkSmDeviceDeviceProfilesRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceDeviceProfilesResponse {
  repeated GetNetworkSmDeviceDeviceProfiles200ResponseInner data = 1;
}

message GetNetworkSmDeviceNetworkAdaptersRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceNetworkAdaptersResponse {
  repeated GetNetworkSmDeviceNetworkAdapters200ResponseInner data = 1;
}

message GetNetworkSmDevicePerformanceHistoryRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetNetworkSmDevicePerformanceHistoryResponse {
  repeated GetNetworkSmDevicePerformanceHistory200ResponseInner data = 1;
}

message GetNetworkSmDeviceRestrictionsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceRestrictionsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSmDeviceSecurityCentersRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceSecurityCentersResponse {
  repeated GetNetworkSmDeviceSecurityCenters200ResponseInner data = 1;
}

message GetNetworkSmDeviceSoftwaresRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceSoftwaresResponse {
  repeated GetNetworkSmDeviceSoftwares200ResponseInner data = 1;
}

message GetNetworkSmDeviceWlanListsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceWlanListsResponse {
  repeated GetNetworkSmDeviceWlanLists200ResponseInner data = 1;
}

message GetNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  // Additional fields that will be displayed for each device.     The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,     systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,     ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,     simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,     isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,     hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url.
  repeated string fields = 2;
  // Filter devices by wifi mac(s).
  repeated string wifiMacs = 3;
  // Filter devices by serial(s).
  repeated string serials = 4;
  // Filter devices by id(s).
  repeated string ids = 5;
  // Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
  repeated string scope = 6;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 7;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 8;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 9;

}

message GetNetworkSmDevicesResponse {
  repeated GetNetworkSmDevices200ResponseInner data = 1;
}

message GetNetworkSmProfilesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSmTargetGroupRequest {
  // Network ID
  string networkId = 1;
  // Target group ID
  string targetGroupId = 2;
  // Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response
  bool withDetails = 3;

}

message GetNetworkSmTargetGroupsRequest {
  // Network ID
  string networkId = 1;
  // Boolean indicating if the the ids of the devices or users scoped by the target group should be included in the response
  bool withDetails = 2;

}

message GetNetworkSmTargetGroupsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSmTrustedAccessConfigsRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetNetworkSmTrustedAccessConfigsResponse {
  repeated GetNetworkSmTrustedAccessConfigs200ResponseInner data = 1;
}

message GetNetworkSmUserAccessDevicesRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetNetworkSmUserAccessDevicesResponse {
  repeated GetNetworkSmUserAccessDevices200ResponseInner data = 1;
}

message GetNetworkSmUserDeviceProfilesRequest {
  // Network ID
  string networkId = 1;
  // User ID
  string userId = 2;

}

message GetNetworkSmUserDeviceProfilesResponse {
  repeated GetNetworkSmDeviceDeviceProfiles200ResponseInner data = 1;
}

message GetNetworkSmUserSoftwaresRequest {
  // Network ID
  string networkId = 1;
  // User ID
  string userId = 2;

}

message GetNetworkSmUserSoftwaresResponse {
  repeated GetNetworkSmDeviceSoftwares200ResponseInner data = 1;
}

message GetNetworkSmUsersRequest {
  // Network ID
  string networkId = 1;
  // Filter users by id(s).
  repeated string ids = 2;
  // Filter users by username(s).
  repeated string usernames = 3;
  // Filter users by email(s).
  repeated string emails = 4;
  // Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
  repeated string scope = 5;

}

message GetNetworkSmUsersResponse {
  repeated GetNetworkSmUsers200ResponseInner data = 1;
}

message GetOrganizationSmApnsCertRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationSmVppAccountRequest {
  // Organization ID
  string organizationId = 1;
  // Vpp account ID
  string vppAccountId = 2;

}

message GetOrganizationSmVppAccountsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationSmVppAccountsResponse {
  repeated GetOrganizationSmVppAccounts200ResponseInner data = 1;
}

message InstallNetworkSmDeviceAppsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  InstallNetworkSmDeviceAppsRequest installNetworkSmDeviceAppsRequest = 3;

}

message LockNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest = 2;

}

message ModifyNetworkSmDevicesTagsRequest {
  // Network ID
  string networkId = 1;
  ModifyNetworkSmDevicesTagsRequest modifyNetworkSmDevicesTagsRequest = 2;

}

message ModifyNetworkSmDevicesTagsResponse {
  repeated ModifyNetworkSmDevicesTags200ResponseInner data = 1;
}

message MoveNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  MoveNetworkSmDevicesRequest moveNetworkSmDevicesRequest = 2;

}

message RefreshNetworkSmDeviceDetailsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message UnenrollNetworkSmDeviceRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message UninstallNetworkSmDeviceAppsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  UninstallNetworkSmDeviceAppsRequest uninstallNetworkSmDeviceAppsRequest = 3;

}

message UpdateNetworkSmDevicesFieldsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSmDevicesFieldsRequest updateNetworkSmDevicesFieldsRequest = 2;

}

message UpdateNetworkSmDevicesFieldsResponse {
  repeated UpdateNetworkSmDevicesFields200ResponseInner data = 1;
}

message UpdateNetworkSmTargetGroupRequest {
  // Network ID
  string networkId = 1;
  // Target group ID
  string targetGroupId = 2;
  CreateNetworkSmTargetGroupRequest createNetworkSmTargetGroupRequest = 3;

}

message WipeNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  WipeNetworkSmDevicesRequest wipeNetworkSmDevicesRequest = 2;

}

