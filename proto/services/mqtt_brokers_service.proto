/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.mqttbrokersservice;

import "google/protobuf/empty.proto";
import public "models/create_network_mqtt_broker_request.proto";
import public "models/get_network_sensor_mqtt_brokers200_response_inner.proto";
import public "models/todo_object_mapping.proto";
import public "models/update_network_mqtt_broker_request.proto";
import public "models/update_network_sensor_mqtt_broker_request.proto";

service MqttBrokersService {
  rpc CreateNetworkMqttBroker (CreateNetworkMqttBrokerRequest) returns (TODO_OBJECT_MAPPING);

  rpc DeleteNetworkMqttBroker (DeleteNetworkMqttBrokerRequest) returns (google.protobuf.Empty);

  rpc GetNetworkMqttBroker (GetNetworkMqttBrokerRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkMqttBrokers (GetNetworkMqttBrokersRequest) returns (GetNetworkMqttBrokersResponse);

  rpc GetNetworkSensorMqttBroker (GetNetworkSensorMqttBrokerRequest) returns (GetNetworkSensorMqttBrokers200ResponseInner);

  rpc GetNetworkSensorMqttBrokers (GetNetworkSensorMqttBrokersRequest) returns (GetNetworkSensorMqttBrokersResponse);

  rpc UpdateNetworkMqttBroker (UpdateNetworkMqttBrokerRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSensorMqttBroker (UpdateNetworkSensorMqttBrokerRequest) returns (GetNetworkSensorMqttBrokers200ResponseInner);

}

message CreateNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest = 2;

}

message DeleteNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;

}

message GetNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;

}

message GetNetworkMqttBrokersRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkMqttBrokersResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSensorMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;

}

message GetNetworkSensorMqttBrokersRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSensorMqttBrokersResponse {
  repeated GetNetworkSensorMqttBrokers200ResponseInner data = 1;
}

message UpdateNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;
  UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest = 3;

}

message UpdateNetworkSensorMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;
  UpdateNetworkSensorMqttBrokerRequest updateNetworkSensorMqttBrokerRequest = 3;

}

