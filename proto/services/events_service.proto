/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.eventsservice;

import "google/protobuf/empty.proto";
import public "models/create_network_firmware_upgrades_staged_event_request.proto";
import public "models/get_network_events200_response.proto";
import public "models/get_network_events_event_types200_response_inner.proto";
import public "models/get_network_firmware_upgrades_staged_events200_response.proto";
import public "models/rollbacks_network_firmware_upgrades_staged_events_request.proto";
import public "models/todo_object_mapping.proto";
import public "models/update_network_firmware_upgrades_staged_events_request.proto";

service EventsService {
  rpc CreateNetworkFirmwareUpgradesStagedEvent (CreateNetworkFirmwareUpgradesStagedEventRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc DeferNetworkFirmwareUpgradesStagedEvents (DeferNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc GetNetworkApplianceClientSecurityEvents (GetNetworkApplianceClientSecurityEventsRequest) returns (GetNetworkApplianceClientSecurityEventsResponse);

  rpc GetNetworkApplianceSecurityEvents (GetNetworkApplianceSecurityEventsRequest) returns (GetNetworkApplianceSecurityEventsResponse);

  rpc GetNetworkEvents (GetNetworkEventsRequest) returns (GetNetworkEvents200Response);

  rpc GetNetworkEventsEventTypes (GetNetworkEventsEventTypesRequest) returns (GetNetworkEventsEventTypesResponse);

  rpc GetNetworkFirmwareUpgradesStagedEvents (GetNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc GetOrganizationApplianceSecurityEvents (GetOrganizationApplianceSecurityEventsRequest) returns (GetOrganizationApplianceSecurityEventsResponse);

  rpc RollbacksNetworkFirmwareUpgradesStagedEvents (RollbacksNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc UpdateNetworkFirmwareUpgradesStagedEvents (UpdateNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

}

message CreateNetworkFirmwareUpgradesStagedEventRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest = 2;

}

message DeferNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceClientSecurityEventsRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;
  // The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today.
  string t0 = 3;
  // The end of the timespan for the data. t1 can be a maximum of 791 days after t0.
  string t1 = 4;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days.
  float timespan = 5;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 6;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 7;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 8;
  // Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
  string sortOrder = 9;

}

message GetNetworkApplianceClientSecurityEventsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceSecurityEventsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 365 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days.
  float timespan = 4;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 5;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 6;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 7;
  // Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
  string sortOrder = 8;

}

message GetNetworkApplianceSecurityEventsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkEventsRequest {
  // Network ID
  string networkId = 1;
  // The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
  string productType = 2;
  // A list of event types. The returned events will be filtered to only include events with these types.
  repeated string includedEventTypes = 3;
  // A list of event types. The returned events will be filtered to exclude events with these types.
  repeated string excludedEventTypes = 4;
  // The MAC address of the Meraki device which the list of events will be filtered with
  string deviceMac = 5;
  // The serial of the Meraki device which the list of events will be filtered with
  string deviceSerial = 6;
  // The name of the Meraki device which the list of events will be filtered with
  string deviceName = 7;
  // The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
  string clientIp = 8;
  // The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
  string clientMac = 9;
  // The name, or partial name, of the client which the list of events will be filtered with
  string clientName = 10;
  // The MAC address of the Systems Manager device which the list of events will be filtered with
  string smDeviceMac = 11;
  // The name of the Systems Manager device which the list of events will be filtered with
  string smDeviceName = 12;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
  int32 perPage = 13;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 14;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 15;

}

message GetNetworkEventsEventTypesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkEventsEventTypesResponse {
  repeated GetNetworkEventsEventTypes200ResponseInner data = 1;
}

message GetNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;

}

message GetOrganizationApplianceSecurityEventsRequest {
  // Organization ID
  string organizationId = 1;
  // The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 365 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days.
  float timespan = 4;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 5;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 6;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 7;
  // Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
  string sortOrder = 8;

}

message GetOrganizationApplianceSecurityEventsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message RollbacksNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;
  RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest = 2;

}

message UpdateNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest = 2;

}

