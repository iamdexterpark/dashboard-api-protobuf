/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.applianceservice;

import "google/protobuf/empty.proto";
import public "models/create_device_appliance_vmx_authentication_token201_response.proto";
import public "models/create_network_appliance_prefixes_delegated_static_request.proto";
import public "models/create_network_appliance_rf_profile_request.proto";
import public "models/create_network_appliance_static_route_request.proto";
import public "models/create_network_appliance_traffic_shaping_custom_performance_class_request.proto";
import public "models/create_network_appliance_vlan201_response.proto";
import public "models/create_network_appliance_vlan_request.proto";
import public "models/get_device_appliance_uplinks_settings200_response.proto";
import public "models/get_network_appliance_firewall_l7_firewall_rules_application_categories200_response.proto";
import public "models/get_network_appliance_ports200_response_inner.proto";
import public "models/get_network_appliance_prefixes_delegated_statics200_response_inner.proto";
import public "models/get_network_appliance_rf_profiles200_response.proto";
import public "models/get_network_appliance_rf_profiles200_response_assigned_inner.proto";
import public "models/get_network_appliance_settings200_response.proto";
import public "models/get_network_appliance_single_lan200_response.proto";
import public "models/get_network_appliance_ssids200_response_inner.proto";
import public "models/get_network_appliance_traffic_shaping_uplink_bandwidth200_response.proto";
import public "models/get_network_appliance_traffic_shaping_uplink_selection200_response.proto";
import public "models/get_network_appliance_vlans200_response_inner.proto";
import public "models/get_network_appliance_vpn_site_to_site_vpn200_response.proto";
import public "models/get_organization_appliance_uplinks_usage_by_network200_response_inner.proto";
import public "models/get_organization_appliance_vpn_third_party_vpn_peers200_response.proto";
import public "models/get_organization_appliance_vpn_vpn_firewall_rules200_response.proto";
import public "models/todo_object_mapping.proto";
import public "models/update_device_appliance_uplinks_settings_request.proto";
import public "models/update_network_appliance_connectivity_monitoring_destinations_request.proto";
import public "models/update_network_appliance_content_filtering_request.proto";
import public "models/update_network_appliance_firewall_cellular_firewall_rules_request.proto";
import public "models/update_network_appliance_firewall_firewalled_service_request.proto";
import public "models/update_network_appliance_firewall_inbound_firewall_rules_request.proto";
import public "models/update_network_appliance_firewall_l7_firewall_rules_request.proto";
import public "models/update_network_appliance_firewall_one_to_many_nat_rules_request.proto";
import public "models/update_network_appliance_firewall_one_to_one_nat_rules_request.proto";
import public "models/update_network_appliance_firewall_port_forwarding_rules_request.proto";
import public "models/update_network_appliance_firewall_settings_request.proto";
import public "models/update_network_appliance_port_request.proto";
import public "models/update_network_appliance_prefixes_delegated_static_request.proto";
import public "models/update_network_appliance_rf_profile_request.proto";
import public "models/update_network_appliance_security_intrusion_request.proto";
import public "models/update_network_appliance_security_malware_request.proto";
import public "models/update_network_appliance_settings_request.proto";
import public "models/update_network_appliance_single_lan_request.proto";
import public "models/update_network_appliance_ssid_request.proto";
import public "models/update_network_appliance_static_route_request.proto";
import public "models/update_network_appliance_traffic_shaping_custom_performance_class_request.proto";
import public "models/update_network_appliance_traffic_shaping_request.proto";
import public "models/update_network_appliance_traffic_shaping_rules_request.proto";
import public "models/update_network_appliance_traffic_shaping_uplink_bandwidth_request.proto";
import public "models/update_network_appliance_traffic_shaping_uplink_selection_request.proto";
import public "models/update_network_appliance_traffic_shaping_vpn_exclusions200_response.proto";
import public "models/update_network_appliance_traffic_shaping_vpn_exclusions_request.proto";
import public "models/update_network_appliance_vlan_request.proto";
import public "models/update_network_appliance_vlans_settings_request.proto";
import public "models/update_network_appliance_vpn_bgp_request.proto";
import public "models/update_network_appliance_vpn_site_to_site_vpn_request.proto";
import public "models/update_network_appliance_warm_spare_request.proto";
import public "models/update_organization_appliance_security_intrusion_request.proto";
import public "models/update_organization_appliance_vpn_third_party_vpn_peers_request.proto";
import public "models/update_organization_appliance_vpn_vpn_firewall_rules_request.proto";

service ApplianceService {
  rpc CreateDeviceApplianceVmxAuthenticationToken (CreateDeviceApplianceVmxAuthenticationTokenRequest) returns (CreateDeviceApplianceVmxAuthenticationToken201Response);

  rpc CreateNetworkAppliancePrefixesDelegatedStatic (CreateNetworkAppliancePrefixesDelegatedStaticRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkApplianceRfProfile (CreateNetworkApplianceRfProfileRequest) returns (GetNetworkApplianceRfProfiles200ResponseAssignedInner);

  rpc CreateNetworkApplianceStaticRoute (CreateNetworkApplianceStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkApplianceTrafficShapingCustomPerformanceClass (CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkApplianceVlan (CreateNetworkApplianceVlanRequest) returns (CreateNetworkApplianceVlan201Response);

  rpc DeleteNetworkAppliancePrefixesDelegatedStatic (DeleteNetworkAppliancePrefixesDelegatedStaticRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkApplianceRfProfile (DeleteNetworkApplianceRfProfileRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkApplianceStaticRoute (DeleteNetworkApplianceStaticRouteRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkApplianceTrafficShapingCustomPerformanceClass (DeleteNetworkApplianceTrafficShapingCustomPerformanceClassRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkApplianceVlan (DeleteNetworkApplianceVlanRequest) returns (google.protobuf.Empty);

  rpc GetDeviceApplianceDhcpSubnets (GetDeviceApplianceDhcpSubnetsRequest) returns (GetDeviceApplianceDhcpSubnetsResponse);

  rpc GetDeviceAppliancePerformance (GetDeviceAppliancePerformanceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceAppliancePrefixesDelegated (GetDeviceAppliancePrefixesDelegatedRequest) returns (GetDeviceAppliancePrefixesDelegatedResponse);

  rpc GetDeviceAppliancePrefixesDelegatedVlanAssignments (GetDeviceAppliancePrefixesDelegatedVlanAssignmentsRequest) returns (GetDeviceAppliancePrefixesDelegatedVlanAssignmentsResponse);

  rpc GetDeviceApplianceUplinksSettings (GetDeviceApplianceUplinksSettingsRequest) returns (GetDeviceApplianceUplinksSettings200Response);

  rpc GetNetworkApplianceClientSecurityEvents (GetNetworkApplianceClientSecurityEventsRequest) returns (GetNetworkApplianceClientSecurityEventsResponse);

  rpc GetNetworkApplianceConnectivityMonitoringDestinations (GetNetworkApplianceConnectivityMonitoringDestinationsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceContentFiltering (GetNetworkApplianceContentFilteringRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceContentFilteringCategories (GetNetworkApplianceContentFilteringCategoriesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallCellularFirewallRules (GetNetworkApplianceFirewallCellularFirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallFirewalledService (GetNetworkApplianceFirewallFirewalledServiceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallFirewalledServices (GetNetworkApplianceFirewallFirewalledServicesRequest) returns (GetNetworkApplianceFirewallFirewalledServicesResponse);

  rpc GetNetworkApplianceFirewallInboundCellularFirewallRules (GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest) returns (GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse);

  rpc GetNetworkApplianceFirewallInboundFirewallRules (GetNetworkApplianceFirewallInboundFirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallL3FirewallRules (GetNetworkApplianceFirewallL3FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallL7FirewallRules (GetNetworkApplianceFirewallL7FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallL7FirewallRulesApplicationCategories (GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest) returns (GetNetworkApplianceFirewallL7FirewallRulesApplicationCategories200Response);

  rpc GetNetworkApplianceFirewallOneToManyNatRules (GetNetworkApplianceFirewallOneToManyNatRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallOneToOneNatRules (GetNetworkApplianceFirewallOneToOneNatRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallPortForwardingRules (GetNetworkApplianceFirewallPortForwardingRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceFirewallSettings (GetNetworkApplianceFirewallSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkAppliancePort (GetNetworkAppliancePortRequest) returns (GetNetworkAppliancePorts200ResponseInner);

  rpc GetNetworkAppliancePorts (GetNetworkAppliancePortsRequest) returns (GetNetworkAppliancePortsResponse);

  rpc GetNetworkAppliancePrefixesDelegatedStatic (GetNetworkAppliancePrefixesDelegatedStaticRequest) returns (GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner);

  rpc GetNetworkAppliancePrefixesDelegatedStatics (GetNetworkAppliancePrefixesDelegatedStaticsRequest) returns (GetNetworkAppliancePrefixesDelegatedStaticsResponse);

  rpc GetNetworkApplianceRfProfile (GetNetworkApplianceRfProfileRequest) returns (GetNetworkApplianceRfProfiles200ResponseAssignedInner);

  rpc GetNetworkApplianceRfProfiles (GetNetworkApplianceRfProfilesRequest) returns (GetNetworkApplianceRfProfiles200Response);

  rpc GetNetworkApplianceSecurityEvents (GetNetworkApplianceSecurityEventsRequest) returns (GetNetworkApplianceSecurityEventsResponse);

  rpc GetNetworkApplianceSecurityIntrusion (GetNetworkApplianceSecurityIntrusionRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceSecurityMalware (GetNetworkApplianceSecurityMalwareRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceSettings (GetNetworkApplianceSettingsRequest) returns (GetNetworkApplianceSettings200Response);

  rpc GetNetworkApplianceSingleLan (GetNetworkApplianceSingleLanRequest) returns (GetNetworkApplianceSingleLan200Response);

  rpc GetNetworkApplianceSsid (GetNetworkApplianceSsidRequest) returns (GetNetworkApplianceSsids200ResponseInner);

  rpc GetNetworkApplianceSsids (GetNetworkApplianceSsidsRequest) returns (GetNetworkApplianceSsidsResponse);

  rpc GetNetworkApplianceStaticRoute (GetNetworkApplianceStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceStaticRoutes (GetNetworkApplianceStaticRoutesRequest) returns (GetNetworkApplianceStaticRoutesResponse);

  rpc GetNetworkApplianceTrafficShaping (GetNetworkApplianceTrafficShapingRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceTrafficShapingCustomPerformanceClass (GetNetworkApplianceTrafficShapingCustomPerformanceClassRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceTrafficShapingCustomPerformanceClasses (GetNetworkApplianceTrafficShapingCustomPerformanceClassesRequest) returns (GetNetworkApplianceTrafficShapingCustomPerformanceClassesResponse);

  rpc GetNetworkApplianceTrafficShapingRules (GetNetworkApplianceTrafficShapingRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceTrafficShapingUplinkBandwidth (GetNetworkApplianceTrafficShapingUplinkBandwidthRequest) returns (GetNetworkApplianceTrafficShapingUplinkBandwidth200Response);

  rpc GetNetworkApplianceTrafficShapingUplinkSelection (GetNetworkApplianceTrafficShapingUplinkSelectionRequest) returns (GetNetworkApplianceTrafficShapingUplinkSelection200Response);

  rpc GetNetworkApplianceUplinksUsageHistory (GetNetworkApplianceUplinksUsageHistoryRequest) returns (GetNetworkApplianceUplinksUsageHistoryResponse);

  rpc GetNetworkApplianceVlan (GetNetworkApplianceVlanRequest) returns (GetNetworkApplianceVlans200ResponseInner);

  rpc GetNetworkApplianceVlans (GetNetworkApplianceVlansRequest) returns (GetNetworkApplianceVlansResponse);

  rpc GetNetworkApplianceVlansSettings (GetNetworkApplianceVlansSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceVpnBgp (GetNetworkApplianceVpnBgpRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkApplianceVpnSiteToSiteVpn (GetNetworkApplianceVpnSiteToSiteVpnRequest) returns (GetNetworkApplianceVpnSiteToSiteVpn200Response);

  rpc GetNetworkApplianceWarmSpare (GetNetworkApplianceWarmSpareRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationApplianceSecurityEvents (GetOrganizationApplianceSecurityEventsRequest) returns (GetOrganizationApplianceSecurityEventsResponse);

  rpc GetOrganizationApplianceSecurityIntrusion (GetOrganizationApplianceSecurityIntrusionRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationApplianceTrafficShapingVpnExclusionsByNetwork (GetOrganizationApplianceTrafficShapingVpnExclusionsByNetworkRequest) returns (GetOrganizationApplianceTrafficShapingVpnExclusionsByNetworkResponse);

  rpc GetOrganizationApplianceUplinkStatuses (GetOrganizationApplianceUplinkStatusesRequest) returns (GetOrganizationApplianceUplinkStatusesResponse);

  rpc GetOrganizationApplianceUplinksUsageByNetwork (GetOrganizationApplianceUplinksUsageByNetworkRequest) returns (GetOrganizationApplianceUplinksUsageByNetworkResponse);

  rpc GetOrganizationApplianceVpnStats (GetOrganizationApplianceVpnStatsRequest) returns (GetOrganizationApplianceVpnStatsResponse);

  rpc GetOrganizationApplianceVpnStatuses (GetOrganizationApplianceVpnStatusesRequest) returns (GetOrganizationApplianceVpnStatusesResponse);

  rpc GetOrganizationApplianceVpnThirdPartyVPNPeers (GetOrganizationApplianceVpnThirdPartyVPNPeersRequest) returns (GetOrganizationApplianceVpnThirdPartyVPNPeers200Response);

  rpc GetOrganizationApplianceVpnVpnFirewallRules (GetOrganizationApplianceVpnVpnFirewallRulesRequest) returns (GetOrganizationApplianceVpnVpnFirewallRules200Response);

  rpc SwapNetworkApplianceWarmSpare (SwapNetworkApplianceWarmSpareRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceApplianceUplinksSettings (UpdateDeviceApplianceUplinksSettingsRequest) returns (GetDeviceApplianceUplinksSettings200Response);

  rpc UpdateNetworkApplianceConnectivityMonitoringDestinations (UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceContentFiltering (UpdateNetworkApplianceContentFilteringRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallCellularFirewallRules (UpdateNetworkApplianceFirewallCellularFirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallFirewalledService (UpdateNetworkApplianceFirewallFirewalledServiceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallInboundCellularFirewallRules (UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest) returns (UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse);

  rpc UpdateNetworkApplianceFirewallInboundFirewallRules (UpdateNetworkApplianceFirewallInboundFirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallL3FirewallRules (UpdateNetworkApplianceFirewallL3FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallL7FirewallRules (UpdateNetworkApplianceFirewallL7FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallOneToManyNatRules (UpdateNetworkApplianceFirewallOneToManyNatRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallOneToOneNatRules (UpdateNetworkApplianceFirewallOneToOneNatRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallPortForwardingRules (UpdateNetworkApplianceFirewallPortForwardingRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceFirewallSettings (UpdateNetworkApplianceFirewallSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkAppliancePort (UpdateNetworkAppliancePortRequest) returns (GetNetworkAppliancePorts200ResponseInner);

  rpc UpdateNetworkAppliancePrefixesDelegatedStatic (UpdateNetworkAppliancePrefixesDelegatedStaticRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceRfProfile (UpdateNetworkApplianceRfProfileRequest) returns (GetNetworkApplianceRfProfiles200ResponseAssignedInner);

  rpc UpdateNetworkApplianceSecurityIntrusion (UpdateNetworkApplianceSecurityIntrusionRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceSecurityMalware (UpdateNetworkApplianceSecurityMalwareRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceSettings (UpdateNetworkApplianceSettingsRequest) returns (GetNetworkApplianceSettings200Response);

  rpc UpdateNetworkApplianceSingleLan (UpdateNetworkApplianceSingleLanRequest) returns (GetNetworkApplianceSingleLan200Response);

  rpc UpdateNetworkApplianceSsid (UpdateNetworkApplianceSsidRequest) returns (GetNetworkApplianceSsids200ResponseInner);

  rpc UpdateNetworkApplianceStaticRoute (UpdateNetworkApplianceStaticRouteRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceTrafficShaping (UpdateNetworkApplianceTrafficShapingRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceTrafficShapingCustomPerformanceClass (UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceTrafficShapingRules (UpdateNetworkApplianceTrafficShapingRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceTrafficShapingUplinkBandwidth (UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceTrafficShapingUplinkSelection (UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest) returns (GetNetworkApplianceTrafficShapingUplinkSelection200Response);

  rpc UpdateNetworkApplianceTrafficShapingVpnExclusions (UpdateNetworkApplianceTrafficShapingVpnExclusionsRequest) returns (UpdateNetworkApplianceTrafficShapingVpnExclusions200Response);

  rpc UpdateNetworkApplianceVlan (UpdateNetworkApplianceVlanRequest) returns (GetNetworkApplianceVlans200ResponseInner);

  rpc UpdateNetworkApplianceVlansSettings (UpdateNetworkApplianceVlansSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceVpnBgp (UpdateNetworkApplianceVpnBgpRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkApplianceVpnSiteToSiteVpn (UpdateNetworkApplianceVpnSiteToSiteVpnRequest) returns (GetNetworkApplianceVpnSiteToSiteVpn200Response);

  rpc UpdateNetworkApplianceWarmSpare (UpdateNetworkApplianceWarmSpareRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationApplianceSecurityIntrusion (UpdateOrganizationApplianceSecurityIntrusionRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationApplianceVpnThirdPartyVPNPeers (UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest) returns (GetOrganizationApplianceVpnThirdPartyVPNPeers200Response);

  rpc UpdateOrganizationApplianceVpnVpnFirewallRules (UpdateOrganizationApplianceVpnVpnFirewallRulesRequest) returns (GetOrganizationApplianceVpnVpnFirewallRules200Response);

}

message CreateDeviceApplianceVmxAuthenticationTokenRequest {
  // Serial
  string serial = 1;

}

message CreateNetworkAppliancePrefixesDelegatedStaticRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkAppliancePrefixesDelegatedStaticRequest createNetworkAppliancePrefixesDelegatedStaticRequest = 2;

}

message CreateNetworkApplianceRfProfileRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkApplianceRfProfileRequest createNetworkApplianceRfProfileRequest = 2;

}

message CreateNetworkApplianceStaticRouteRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkApplianceStaticRouteRequest createNetworkApplianceStaticRouteRequest = 2;

}

message CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkApplianceTrafficShapingCustomPerformanceClassRequest createNetworkApplianceTrafficShapingCustomPerformanceClassRequest = 2;

}

message CreateNetworkApplianceVlanRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkApplianceVlanRequest createNetworkApplianceVlanRequest = 2;

}

message DeleteNetworkAppliancePrefixesDelegatedStaticRequest {
  // Network ID
  string networkId = 1;
  // Static delegated prefix ID
  string staticDelegatedPrefixId = 2;

}

message DeleteNetworkApplianceRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;

}

message DeleteNetworkApplianceStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Static route ID
  string staticRouteId = 2;

}

message DeleteNetworkApplianceTrafficShapingCustomPerformanceClassRequest {
  // Network ID
  string networkId = 1;
  // Custom performance class ID
  string customPerformanceClassId = 2;

}

message DeleteNetworkApplianceVlanRequest {
  // Network ID
  string networkId = 1;
  // Vlan ID
  string vlanId = 2;

}

message GetDeviceApplianceDhcpSubnetsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceApplianceDhcpSubnetsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetDeviceAppliancePerformanceRequest {
  // Serial
  string serial = 1;

}

message GetDeviceAppliancePrefixesDelegatedRequest {
  // Serial
  string serial = 1;

}

message GetDeviceAppliancePrefixesDelegatedResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetDeviceAppliancePrefixesDelegatedVlanAssignmentsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceAppliancePrefixesDelegatedVlanAssignmentsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetDeviceApplianceUplinksSettingsRequest {
  // Serial
  string serial = 1;

}

message GetNetworkApplianceClientSecurityEventsRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;
  // The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 791 days from today.
  string t0 = 3;
  // The end of the timespan for the data. t1 can be a maximum of 791 days after t0.
  string t1 = 4;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 31 days.
  float timespan = 5;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 6;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 7;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 8;
  // Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
  string sortOrder = 9;

}

message GetNetworkApplianceClientSecurityEventsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceConnectivityMonitoringDestinationsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceContentFilteringRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceContentFilteringCategoriesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallCellularFirewallRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallFirewalledServiceRequest {
  // Network ID
  string networkId = 1;
  // Service
  string service = 2;

}

message GetNetworkApplianceFirewallFirewalledServicesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallFirewalledServicesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceFirewallInboundCellularFirewallRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallInboundCellularFirewallRulesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceFirewallInboundFirewallRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallL3FirewallRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallL7FirewallRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallOneToManyNatRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallOneToOneNatRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallPortForwardingRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceFirewallSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkAppliancePortRequest {
  // Network ID
  string networkId = 1;
  // Port ID
  string portId = 2;

}

message GetNetworkAppliancePortsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkAppliancePortsResponse {
  repeated GetNetworkAppliancePorts200ResponseInner data = 1;
}

message GetNetworkAppliancePrefixesDelegatedStaticRequest {
  // Network ID
  string networkId = 1;
  // Static delegated prefix ID
  string staticDelegatedPrefixId = 2;

}

message GetNetworkAppliancePrefixesDelegatedStaticsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkAppliancePrefixesDelegatedStaticsResponse {
  repeated GetNetworkAppliancePrefixesDelegatedStatics200ResponseInner data = 1;
}

message GetNetworkApplianceRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;

}

message GetNetworkApplianceRfProfilesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSecurityEventsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 365 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days.
  float timespan = 4;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 5;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 6;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 7;
  // Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
  string sortOrder = 8;

}

message GetNetworkApplianceSecurityEventsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceSecurityIntrusionRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSecurityMalwareRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSingleLanRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSsidRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkApplianceSsidsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceSsidsResponse {
  repeated GetNetworkApplianceSsids200ResponseInner data = 1;
}

message GetNetworkApplianceStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Static route ID
  string staticRouteId = 2;

}

message GetNetworkApplianceStaticRoutesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceStaticRoutesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceTrafficShapingRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceTrafficShapingCustomPerformanceClassRequest {
  // Network ID
  string networkId = 1;
  // Custom performance class ID
  string customPerformanceClassId = 2;

}

message GetNetworkApplianceTrafficShapingCustomPerformanceClassesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceTrafficShapingCustomPerformanceClassesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceTrafficShapingRulesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceTrafficShapingUplinkBandwidthRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceTrafficShapingUplinkSelectionRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceUplinksUsageHistoryRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 10 minutes.
  float timespan = 4;
  // The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 600, 1800, 3600, 86400. The default is 60.
  int32 resolution = 5;

}

message GetNetworkApplianceUplinksUsageHistoryResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkApplianceVlanRequest {
  // Network ID
  string networkId = 1;
  // Vlan ID
  string vlanId = 2;

}

message GetNetworkApplianceVlansRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceVlansResponse {
  repeated GetNetworkApplianceVlans200ResponseInner data = 1;
}

message GetNetworkApplianceVlansSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceVpnBgpRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceVpnSiteToSiteVpnRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkApplianceWarmSpareRequest {
  // Network ID
  string networkId = 1;

}

message GetOrganizationApplianceSecurityEventsRequest {
  // Organization ID
  string organizationId = 1;
  // The beginning of the timespan for the data. Data is gathered after the specified t0 value. The maximum lookback period is 365 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 365 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 31 days.
  float timespan = 4;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 5;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 6;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 7;
  // Sorted order of security events based on event detection time. Order options are 'ascending' or 'descending'. Default is ascending order.
  string sortOrder = 8;

}

message GetOrganizationApplianceSecurityEventsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationApplianceSecurityIntrusionRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationApplianceTrafficShapingVpnExclusionsByNetworkRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter the results by network IDs
  repeated string networkIds = 5;

}

message GetOrganizationApplianceTrafficShapingVpnExclusionsByNetworkResponse {
  repeated UpdateNetworkApplianceTrafficShapingVpnExclusions200Response data = 1;
}

message GetOrganizationApplianceUplinkStatusesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // A list of network IDs. The returned devices will be filtered to only include these networks.
  repeated string networkIds = 5;
  // A list of serial numbers. The returned devices will be filtered to only include these serials.
  repeated string serials = 6;
  // A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs.
  repeated string iccids = 7;

}

message GetOrganizationApplianceUplinkStatusesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationApplianceUplinksUsageByNetworkRequest {
  // Organization ID
  string organizationId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 14 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 14 days. The default is 1 day.
  float timespan = 4;

}

message GetOrganizationApplianceUplinksUsageByNetworkResponse {
  repeated GetOrganizationApplianceUplinksUsageByNetwork200ResponseInner data = 1;
}

message GetOrganizationApplianceVpnStatsRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 300. Default is 300.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
  repeated string networkIds = 5;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 6;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 7;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 8;

}

message GetOrganizationApplianceVpnStatsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationApplianceVpnStatusesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 300. Default is 300.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
  repeated string networkIds = 5;

}

message GetOrganizationApplianceVpnStatusesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationApplianceVpnThirdPartyVPNPeersRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationApplianceVpnVpnFirewallRulesRequest {
  // Organization ID
  string organizationId = 1;

}

message SwapNetworkApplianceWarmSpareRequest {
  // Network ID
  string networkId = 1;

}

message UpdateDeviceApplianceUplinksSettingsRequest {
  // Serial
  string serial = 1;
  UpdateDeviceApplianceUplinksSettingsRequest updateDeviceApplianceUplinksSettingsRequest = 2;

}

message UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceConnectivityMonitoringDestinationsRequest updateNetworkApplianceConnectivityMonitoringDestinationsRequest = 2;

}

message UpdateNetworkApplianceContentFilteringRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceContentFilteringRequest updateNetworkApplianceContentFilteringRequest = 2;

}

message UpdateNetworkApplianceFirewallCellularFirewallRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallFirewalledServiceRequest {
  // Network ID
  string networkId = 1;
  // Service
  string service = 2;
  UpdateNetworkApplianceFirewallFirewalledServiceRequest updateNetworkApplianceFirewallFirewalledServiceRequest = 3;

}

message UpdateNetworkApplianceFirewallInboundCellularFirewallRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallCellularFirewallRulesRequest updateNetworkApplianceFirewallCellularFirewallRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallInboundCellularFirewallRulesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message UpdateNetworkApplianceFirewallInboundFirewallRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallL3FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallInboundFirewallRulesRequest updateNetworkApplianceFirewallInboundFirewallRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallL7FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallL7FirewallRulesRequest updateNetworkApplianceFirewallL7FirewallRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallOneToManyNatRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallOneToManyNatRulesRequest updateNetworkApplianceFirewallOneToManyNatRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallOneToOneNatRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallOneToOneNatRulesRequest updateNetworkApplianceFirewallOneToOneNatRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallPortForwardingRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallPortForwardingRulesRequest updateNetworkApplianceFirewallPortForwardingRulesRequest = 2;

}

message UpdateNetworkApplianceFirewallSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceFirewallSettingsRequest updateNetworkApplianceFirewallSettingsRequest = 2;

}

message UpdateNetworkAppliancePortRequest {
  // Network ID
  string networkId = 1;
  // Port ID
  string portId = 2;
  UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest = 3;

}

message UpdateNetworkAppliancePrefixesDelegatedStaticRequest {
  // Network ID
  string networkId = 1;
  // Static delegated prefix ID
  string staticDelegatedPrefixId = 2;
  UpdateNetworkAppliancePrefixesDelegatedStaticRequest updateNetworkAppliancePrefixesDelegatedStaticRequest = 3;

}

message UpdateNetworkApplianceRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;
  UpdateNetworkApplianceRfProfileRequest updateNetworkApplianceRfProfileRequest = 3;

}

message UpdateNetworkApplianceSecurityIntrusionRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceSecurityIntrusionRequest updateNetworkApplianceSecurityIntrusionRequest = 2;

}

message UpdateNetworkApplianceSecurityMalwareRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceSecurityMalwareRequest updateNetworkApplianceSecurityMalwareRequest = 2;

}

message UpdateNetworkApplianceSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceSettingsRequest updateNetworkApplianceSettingsRequest = 2;

}

message UpdateNetworkApplianceSingleLanRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceSingleLanRequest updateNetworkApplianceSingleLanRequest = 2;

}

message UpdateNetworkApplianceSsidRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkApplianceSsidRequest updateNetworkApplianceSsidRequest = 3;

}

message UpdateNetworkApplianceStaticRouteRequest {
  // Network ID
  string networkId = 1;
  // Static route ID
  string staticRouteId = 2;
  UpdateNetworkApplianceStaticRouteRequest updateNetworkApplianceStaticRouteRequest = 3;

}

message UpdateNetworkApplianceTrafficShapingRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceTrafficShapingRequest updateNetworkApplianceTrafficShapingRequest = 2;

}

message UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest {
  // Network ID
  string networkId = 1;
  // Custom performance class ID
  string customPerformanceClassId = 2;
  UpdateNetworkApplianceTrafficShapingCustomPerformanceClassRequest updateNetworkApplianceTrafficShapingCustomPerformanceClassRequest = 3;

}

message UpdateNetworkApplianceTrafficShapingRulesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceTrafficShapingRulesRequest updateNetworkApplianceTrafficShapingRulesRequest = 2;

}

message UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceTrafficShapingUplinkBandwidthRequest updateNetworkApplianceTrafficShapingUplinkBandwidthRequest = 2;

}

message UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceTrafficShapingUplinkSelectionRequest updateNetworkApplianceTrafficShapingUplinkSelectionRequest = 2;

}

message UpdateNetworkApplianceTrafficShapingVpnExclusionsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceTrafficShapingVpnExclusionsRequest updateNetworkApplianceTrafficShapingVpnExclusionsRequest = 2;

}

message UpdateNetworkApplianceVlanRequest {
  // Network ID
  string networkId = 1;
  // Vlan ID
  string vlanId = 2;
  UpdateNetworkApplianceVlanRequest updateNetworkApplianceVlanRequest = 3;

}

message UpdateNetworkApplianceVlansSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceVlansSettingsRequest updateNetworkApplianceVlansSettingsRequest = 2;

}

message UpdateNetworkApplianceVpnBgpRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceVpnBgpRequest updateNetworkApplianceVpnBgpRequest = 2;

}

message UpdateNetworkApplianceVpnSiteToSiteVpnRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceVpnSiteToSiteVpnRequest updateNetworkApplianceVpnSiteToSiteVpnRequest = 2;

}

message UpdateNetworkApplianceWarmSpareRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkApplianceWarmSpareRequest updateNetworkApplianceWarmSpareRequest = 2;

}

message UpdateOrganizationApplianceSecurityIntrusionRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationApplianceSecurityIntrusionRequest updateOrganizationApplianceSecurityIntrusionRequest = 2;

}

message UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationApplianceVpnThirdPartyVPNPeersRequest updateOrganizationApplianceVpnThirdPartyVPNPeersRequest = 2;

}

message UpdateOrganizationApplianceVpnVpnFirewallRulesRequest {
  // Organization ID
  string organizationId = 1;
  UpdateOrganizationApplianceVpnVpnFirewallRulesRequest updateOrganizationApplianceVpnVpnFirewallRulesRequest = 2;

}

