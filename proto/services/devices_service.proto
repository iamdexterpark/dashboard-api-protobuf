/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.devicesservice;

import "google/protobuf/empty.proto";
import public "models/blink_device_leds202_response.proto";
import public "models/blink_device_leds_request.proto";
import public "models/checkin_network_sm_devices200_response.proto";
import public "models/checkin_network_sm_devices_request.proto";
import public "models/claim_network_devices_request.proto";
import public "models/clone_organization_switch_devices_request.proto";
import public "models/create_device_live_tools_ping201_response.proto";
import public "models/create_device_live_tools_ping_device_request.proto";
import public "models/create_device_live_tools_ping_request.proto";
import public "models/get_device_live_tools_ping200_response.proto";
import public "models/get_device_wireless_connection_stats200_response.proto";
import public "models/get_network_floor_plans200_response_inner_devices_inner.proto";
import public "models/get_network_sm_device_cellular_usage_history200_response_inner.proto";
import public "models/get_network_sm_device_certs200_response_inner.proto";
import public "models/get_network_sm_device_connectivity200_response_inner.proto";
import public "models/get_network_sm_device_desktop_logs200_response_inner.proto";
import public "models/get_network_sm_device_device_command_logs200_response_inner.proto";
import public "models/get_network_sm_device_device_profiles200_response_inner.proto";
import public "models/get_network_sm_device_network_adapters200_response_inner.proto";
import public "models/get_network_sm_device_performance_history200_response_inner.proto";
import public "models/get_network_sm_device_security_centers200_response_inner.proto";
import public "models/get_network_sm_device_softwares200_response_inner.proto";
import public "models/get_network_sm_device_wlan_lists200_response_inner.proto";
import public "models/get_network_sm_devices200_response_inner.proto";
import public "models/get_organization_devices_availabilities200_response_inner.proto";
import public "models/get_organization_devices_availabilities_change_history200_response_inner.proto";
import public "models/get_organization_devices_provisioning_statuses200_response_inner.proto";
import public "models/get_organization_devices_statuses200_response_inner.proto";
import public "models/get_organization_devices_statuses_overview200_response.proto";
import public "models/get_organization_devices_uplinks_addresses_by_device200_response_inner.proto";
import public "models/get_organization_devices_uplinks_loss_and_latency200_response_inner.proto";
import public "models/get_organization_inventory_devices200_response_inner.proto";
import public "models/get_organization_summary_top_devices_by_usage200_response_inner.proto";
import public "models/get_organization_summary_top_devices_models_by_usage200_response_inner.proto";
import public "models/get_organization_wireless_devices_channel_utilization_by_device200_response_inner.proto";
import public "models/get_organization_wireless_devices_channel_utilization_by_network200_response_inner.proto";
import public "models/get_organization_wireless_devices_channel_utilization_history_by_device_by_interval200_response_inner.proto";
import public "models/get_organization_wireless_devices_channel_utilization_history_by_network_by_interval200_response_inner.proto";
import public "models/get_organization_wireless_devices_ethernet_statuses200_response_inner.proto";
import public "models/install_network_sm_device_apps_request.proto";
import public "models/lock_network_sm_devices_request.proto";
import public "models/modify_network_sm_devices_tags200_response_inner.proto";
import public "models/modify_network_sm_devices_tags_request.proto";
import public "models/move_network_sm_devices200_response.proto";
import public "models/move_network_sm_devices_request.proto";
import public "models/reboot_device202_response.proto";
import public "models/remove_network_devices_request.proto";
import public "models/todo_object_mapping.proto";
import public "models/unenroll_network_sm_device200_response.proto";
import public "models/uninstall_network_sm_device_apps_request.proto";
import public "models/update_device_cellular_sims_request.proto";
import public "models/update_device_management_interface_request.proto";
import public "models/update_device_request.proto";
import public "models/update_network_sm_devices_fields200_response_inner.proto";
import public "models/update_network_sm_devices_fields_request.proto";
import public "models/vmx_network_devices_claim_request.proto";
import public "models/wipe_network_sm_devices200_response.proto";
import public "models/wipe_network_sm_devices_request.proto";

service DevicesService {
  rpc BlinkDeviceLeds (BlinkDeviceLedsRequest) returns (BlinkDeviceLeds202Response);

  rpc CheckinNetworkSmDevices (CheckinNetworkSmDevicesRequest) returns (CheckinNetworkSmDevices200Response);

  rpc ClaimNetworkDevices (ClaimNetworkDevicesRequest) returns (google.protobuf.Empty);

  rpc CloneOrganizationSwitchDevices (CloneOrganizationSwitchDevicesRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateDeviceLiveToolsPing (CreateDeviceLiveToolsPingRequest) returns (CreateDeviceLiveToolsPing201Response);

  rpc CreateDeviceLiveToolsPingDevice (CreateDeviceLiveToolsPingDeviceRequest) returns (CreateDeviceLiveToolsPing201Response);

  rpc GetDevice (GetDeviceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceCellularSims (GetDeviceCellularSimsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceClients (GetDeviceClientsRequest) returns (GetDeviceClientsResponse);

  rpc GetDeviceLiveToolsPing (GetDeviceLiveToolsPingRequest) returns (GetDeviceLiveToolsPing200Response);

  rpc GetDeviceLiveToolsPingDevice (GetDeviceLiveToolsPingDeviceRequest) returns (GetDeviceLiveToolsPing200Response);

  rpc GetDeviceLldpCdp (GetDeviceLldpCdpRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceLossAndLatencyHistory (GetDeviceLossAndLatencyHistoryRequest) returns (GetDeviceLossAndLatencyHistoryResponse);

  rpc GetDeviceManagementInterface (GetDeviceManagementInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkDevices (GetNetworkDevicesRequest) returns (GetNetworkDevicesResponse);

  rpc GetNetworkSmDeviceCellularUsageHistory (GetNetworkSmDeviceCellularUsageHistoryRequest) returns (GetNetworkSmDeviceCellularUsageHistoryResponse);

  rpc GetNetworkSmDeviceCerts (GetNetworkSmDeviceCertsRequest) returns (GetNetworkSmDeviceCertsResponse);

  rpc GetNetworkSmDeviceConnectivity (GetNetworkSmDeviceConnectivityRequest) returns (GetNetworkSmDeviceConnectivityResponse);

  rpc GetNetworkSmDeviceDesktopLogs (GetNetworkSmDeviceDesktopLogsRequest) returns (GetNetworkSmDeviceDesktopLogsResponse);

  rpc GetNetworkSmDeviceDeviceCommandLogs (GetNetworkSmDeviceDeviceCommandLogsRequest) returns (GetNetworkSmDeviceDeviceCommandLogsResponse);

  rpc GetNetworkSmDeviceDeviceProfiles (GetNetworkSmDeviceDeviceProfilesRequest) returns (GetNetworkSmDeviceDeviceProfilesResponse);

  rpc GetNetworkSmDeviceNetworkAdapters (GetNetworkSmDeviceNetworkAdaptersRequest) returns (GetNetworkSmDeviceNetworkAdaptersResponse);

  rpc GetNetworkSmDevicePerformanceHistory (GetNetworkSmDevicePerformanceHistoryRequest) returns (GetNetworkSmDevicePerformanceHistoryResponse);

  rpc GetNetworkSmDeviceRestrictions (GetNetworkSmDeviceRestrictionsRequest) returns (GetNetworkSmDeviceRestrictionsResponse);

  rpc GetNetworkSmDeviceSecurityCenters (GetNetworkSmDeviceSecurityCentersRequest) returns (GetNetworkSmDeviceSecurityCentersResponse);

  rpc GetNetworkSmDeviceSoftwares (GetNetworkSmDeviceSoftwaresRequest) returns (GetNetworkSmDeviceSoftwaresResponse);

  rpc GetNetworkSmDeviceWlanLists (GetNetworkSmDeviceWlanListsRequest) returns (GetNetworkSmDeviceWlanListsResponse);

  rpc GetNetworkSmDevices (GetNetworkSmDevicesRequest) returns (GetNetworkSmDevicesResponse);

  rpc GetNetworkWirelessDevicesConnectionStats (GetNetworkWirelessDevicesConnectionStatsRequest) returns (GetNetworkWirelessDevicesConnectionStatsResponse);

  rpc GetNetworkWirelessDevicesLatencyStats (GetNetworkWirelessDevicesLatencyStatsRequest) returns (GetNetworkWirelessDevicesLatencyStatsResponse);

  rpc GetOrganizationDevices (GetOrganizationDevicesRequest) returns (GetOrganizationDevicesResponse);

  rpc GetOrganizationDevicesAvailabilities (GetOrganizationDevicesAvailabilitiesRequest) returns (GetOrganizationDevicesAvailabilitiesResponse);

  rpc GetOrganizationDevicesAvailabilitiesChangeHistory (GetOrganizationDevicesAvailabilitiesChangeHistoryRequest) returns (GetOrganizationDevicesAvailabilitiesChangeHistoryResponse);

  rpc GetOrganizationDevicesProvisioningStatuses (GetOrganizationDevicesProvisioningStatusesRequest) returns (GetOrganizationDevicesProvisioningStatusesResponse);

  rpc GetOrganizationDevicesStatuses (GetOrganizationDevicesStatusesRequest) returns (GetOrganizationDevicesStatusesResponse);

  rpc GetOrganizationDevicesStatusesOverview (GetOrganizationDevicesStatusesOverviewRequest) returns (GetOrganizationDevicesStatusesOverview200Response);

  rpc GetOrganizationDevicesUplinksAddressesByDevice (GetOrganizationDevicesUplinksAddressesByDeviceRequest) returns (GetOrganizationDevicesUplinksAddressesByDeviceResponse);

  rpc GetOrganizationDevicesUplinksLossAndLatency (GetOrganizationDevicesUplinksLossAndLatencyRequest) returns (GetOrganizationDevicesUplinksLossAndLatencyResponse);

  rpc GetOrganizationInventoryDevice (GetOrganizationInventoryDeviceRequest) returns (GetOrganizationInventoryDevices200ResponseInner);

  rpc GetOrganizationInventoryDevices (GetOrganizationInventoryDevicesRequest) returns (GetOrganizationInventoryDevicesResponse);

  rpc GetOrganizationSummaryTopDevicesByUsage (GetOrganizationSummaryTopDevicesByUsageRequest) returns (GetOrganizationSummaryTopDevicesByUsageResponse);

  rpc GetOrganizationSummaryTopDevicesModelsByUsage (GetOrganizationSummaryTopDevicesModelsByUsageRequest) returns (GetOrganizationSummaryTopDevicesModelsByUsageResponse);

  rpc GetOrganizationWirelessDevicesChannelUtilizationByDevice (GetOrganizationWirelessDevicesChannelUtilizationByDeviceRequest) returns (GetOrganizationWirelessDevicesChannelUtilizationByDeviceResponse);

  rpc GetOrganizationWirelessDevicesChannelUtilizationByNetwork (GetOrganizationWirelessDevicesChannelUtilizationByNetworkRequest) returns (GetOrganizationWirelessDevicesChannelUtilizationByNetworkResponse);

  rpc GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByInterval (GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalRequest) returns (GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalResponse);

  rpc GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByInterval (GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalRequest) returns (GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalResponse);

  rpc GetOrganizationWirelessDevicesEthernetStatuses (GetOrganizationWirelessDevicesEthernetStatusesRequest) returns (GetOrganizationWirelessDevicesEthernetStatusesResponse);

  rpc InstallNetworkSmDeviceApps (InstallNetworkSmDeviceAppsRequest) returns (google.protobuf.Empty);

  rpc LockNetworkSmDevices (LockNetworkSmDevicesRequest) returns (CheckinNetworkSmDevices200Response);

  rpc ModifyNetworkSmDevicesTags (ModifyNetworkSmDevicesTagsRequest) returns (ModifyNetworkSmDevicesTagsResponse);

  rpc MoveNetworkSmDevices (MoveNetworkSmDevicesRequest) returns (MoveNetworkSmDevices200Response);

  rpc RebootDevice (RebootDeviceRequest) returns (RebootDevice202Response);

  rpc RefreshNetworkSmDeviceDetails (RefreshNetworkSmDeviceDetailsRequest) returns (google.protobuf.Empty);

  rpc RemoveNetworkDevices (RemoveNetworkDevicesRequest) returns (google.protobuf.Empty);

  rpc UnenrollNetworkSmDevice (UnenrollNetworkSmDeviceRequest) returns (UnenrollNetworkSmDevice200Response);

  rpc UninstallNetworkSmDeviceApps (UninstallNetworkSmDeviceAppsRequest) returns (google.protobuf.Empty);

  rpc UpdateDevice (UpdateDeviceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceCellularSims (UpdateDeviceCellularSimsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateDeviceManagementInterface (UpdateDeviceManagementInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSmDevicesFields (UpdateNetworkSmDevicesFieldsRequest) returns (UpdateNetworkSmDevicesFieldsResponse);

  rpc VmxNetworkDevicesClaim (VmxNetworkDevicesClaimRequest) returns (TODO_OBJECT_MAPPING);

  rpc WipeNetworkSmDevices (WipeNetworkSmDevicesRequest) returns (WipeNetworkSmDevices200Response);

}

message BlinkDeviceLedsRequest {
  // Serial
  string serial = 1;
  BlinkDeviceLedsRequest blinkDeviceLedsRequest = 2;

}

message CheckinNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  CheckinNetworkSmDevicesRequest checkinNetworkSmDevicesRequest = 2;

}

message ClaimNetworkDevicesRequest {
  // Network ID
  string networkId = 1;
  ClaimNetworkDevicesRequest claimNetworkDevicesRequest = 2;

}

message CloneOrganizationSwitchDevicesRequest {
  // Organization ID
  string organizationId = 1;
  CloneOrganizationSwitchDevicesRequest cloneOrganizationSwitchDevicesRequest = 2;

}

message CreateDeviceLiveToolsPingRequest {
  // Serial
  string serial = 1;
  CreateDeviceLiveToolsPingRequest createDeviceLiveToolsPingRequest = 2;

}

message CreateDeviceLiveToolsPingDeviceRequest {
  // Serial
  string serial = 1;
  CreateDeviceLiveToolsPingDeviceRequest createDeviceLiveToolsPingDeviceRequest = 2;

}

message GetDeviceRequest {
  // Serial
  string serial = 1;

}

message GetDeviceCellularSimsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceClientsRequest {
  // Serial
  string serial = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 3;

}

message GetDeviceClientsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetDeviceLiveToolsPingRequest {
  // Serial
  string serial = 1;
  // ID
  string id = 2;

}

message GetDeviceLiveToolsPingDeviceRequest {
  // Serial
  string serial = 1;
  // ID
  string id = 2;

}

message GetDeviceLldpCdpRequest {
  // Serial
  string serial = 1;

}

message GetDeviceLossAndLatencyHistoryRequest {
  // Serial
  string serial = 1;
  // The destination IP used to obtain the requested stats. This is required.
  string ip = 2;
  // The beginning of the timespan for the data. The maximum lookback period is 60 days from today.
  string t0 = 3;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 4;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 5;
  // The time resolution in seconds for returned data. The valid resolutions are: 60, 600, 3600, 86400. The default is 60.
  int32 resolution = 6;
  // The WAN uplink used to obtain the requested stats. Valid uplinks are wan1, wan2, wan3, cellular. The default is wan1.
  string uplink = 7;

}

message GetDeviceLossAndLatencyHistoryResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetDeviceManagementInterfaceRequest {
  // Serial
  string serial = 1;

}

message GetNetworkDevicesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkDevicesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSmDeviceCellularUsageHistoryRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceCellularUsageHistoryResponse {
  repeated GetNetworkSmDeviceCellularUsageHistory200ResponseInner data = 1;
}

message GetNetworkSmDeviceCertsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceCertsResponse {
  repeated GetNetworkSmDeviceCerts200ResponseInner data = 1;
}

message GetNetworkSmDeviceConnectivityRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetNetworkSmDeviceConnectivityResponse {
  repeated GetNetworkSmDeviceConnectivity200ResponseInner data = 1;
}

message GetNetworkSmDeviceDesktopLogsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetNetworkSmDeviceDesktopLogsResponse {
  repeated GetNetworkSmDeviceDesktopLogs200ResponseInner data = 1;
}

message GetNetworkSmDeviceDeviceCommandLogsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetNetworkSmDeviceDeviceCommandLogsResponse {
  repeated GetNetworkSmDeviceDeviceCommandLogs200ResponseInner data = 1;
}

message GetNetworkSmDeviceDeviceProfilesRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceDeviceProfilesResponse {
  repeated GetNetworkSmDeviceDeviceProfiles200ResponseInner data = 1;
}

message GetNetworkSmDeviceNetworkAdaptersRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceNetworkAdaptersResponse {
  repeated GetNetworkSmDeviceNetworkAdapters200ResponseInner data = 1;
}

message GetNetworkSmDevicePerformanceHistoryRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetNetworkSmDevicePerformanceHistoryResponse {
  repeated GetNetworkSmDevicePerformanceHistory200ResponseInner data = 1;
}

message GetNetworkSmDeviceRestrictionsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceRestrictionsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSmDeviceSecurityCentersRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceSecurityCentersResponse {
  repeated GetNetworkSmDeviceSecurityCenters200ResponseInner data = 1;
}

message GetNetworkSmDeviceSoftwaresRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceSoftwaresResponse {
  repeated GetNetworkSmDeviceSoftwares200ResponseInner data = 1;
}

message GetNetworkSmDeviceWlanListsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message GetNetworkSmDeviceWlanListsResponse {
  repeated GetNetworkSmDeviceWlanLists200ResponseInner data = 1;
}

message GetNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  // Additional fields that will be displayed for each device.     The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,     systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,     ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,     simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,     isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,     hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, and url.
  repeated string fields = 2;
  // Filter devices by wifi mac(s).
  repeated string wifiMacs = 3;
  // Filter devices by serial(s).
  repeated string serials = 4;
  // Filter devices by id(s).
  repeated string ids = 5;
  // Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
  repeated string scope = 6;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 7;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 8;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 9;

}

message GetNetworkSmDevicesResponse {
  repeated GetNetworkSmDevices200ResponseInner data = 1;
}

message GetNetworkWirelessDevicesConnectionStatsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 4;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 5;
  // Filter results by SSID
  int32 ssid = 6;
  // Filter results by VLAN
  int32 vlan = 7;
  // Filter results by AP Tag
  string apTag = 8;

}

message GetNetworkWirelessDevicesConnectionStatsResponse {
  repeated GetDeviceWirelessConnectionStats200Response data = 1;
}

message GetNetworkWirelessDevicesLatencyStatsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 4;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 5;
  // Filter results by SSID
  int32 ssid = 6;
  // Filter results by VLAN
  int32 vlan = 7;
  // Filter results by AP Tag
  string apTag = 8;
  // Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
  string fields = 9;

}

message GetNetworkWirelessDevicesLatencyStatsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationDevicesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Filter results by whether or not the device's configuration has been updated after the given timestamp
  string configurationUpdatedAfter = 5;
  // Optional parameter to filter devices by network.
  repeated string networkIds = 6;
  // Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
  repeated string productTypes = 7;
  // Optional parameter to filter devices by tags.
  repeated string tags = 8;
  // Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
  string tagsFilterType = 9;
  // Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
  string name = 10;
  // Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
  string mac = 11;
  // Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
  string serial = 12;
  // Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
  string model = 13;
  // Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
  repeated string macs = 14;
  // Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
  repeated string serials = 15;
  // Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
  repeated string sensorMetrics = 16;
  // Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
  repeated string sensorAlertProfileIds = 17;
  // Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
  repeated string models = 18;

}

message GetOrganizationDevicesResponse {
  repeated GetNetworkFloorPlans200ResponseInnerDevicesInner data = 1;
}

message GetOrganizationDevicesAvailabilitiesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches.
  repeated string networkIds = 5;
  // Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches.
  repeated string productTypes = 6;
  // Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
  repeated string serials = 7;
  // An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
  repeated string tags = 8;
  // An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
  string tagsFilterType = 9;

}

message GetOrganizationDevicesAvailabilitiesResponse {
  repeated GetOrganizationDevicesAvailabilities200ResponseInner data = 1;
}

message GetOrganizationDevicesAvailabilitiesChangeHistoryRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // The beginning of the timespan for the data. The maximum lookback period is 14 days from today.
  string t0 = 5;
  // The end of the timespan for the data. t1 can be a maximum of 14 days after t0.
  string t1 = 6;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 14 days. The default is 1 day.
  float timespan = 7;
  // Optional parameter to filter device availabilities history by device serial numbers
  repeated string serials = 8;
  // Optional parameter to filter device availabilities history by device product types
  repeated string productTypes = 9;
  // Optional parameter to filter device availabilities history by network IDs
  repeated string networkIds = 10;
  // Optional parameter to filter device availabilities history by device statuses
  repeated string statuses = 11;

}

message GetOrganizationDevicesAvailabilitiesChangeHistoryResponse {
  repeated GetOrganizationDevicesAvailabilitiesChangeHistory200ResponseInner data = 1;
}

message GetOrganizationDevicesProvisioningStatusesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter device by network ID. This filter uses multiple exact matches.
  repeated string networkIds = 5;
  // Optional parameter to filter device by device product types. This filter uses multiple exact matches.
  repeated string productTypes = 6;
  // Optional parameter to filter device by device serial numbers. This filter uses multiple exact matches.
  repeated string serials = 7;
  // An optional parameter to filter devices by the provisioning status. Accepted statuses: unprovisioned, incomplete, complete.
  string status = 8;
  // An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
  repeated string tags = 9;
  // An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
  string tagsFilterType = 10;

}

message GetOrganizationDevicesProvisioningStatusesResponse {
  repeated GetOrganizationDevicesProvisioningStatuses200ResponseInner data = 1;
}

message GetOrganizationDevicesStatusesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter devices by network ids.
  repeated string networkIds = 5;
  // Optional parameter to filter devices by serials.
  repeated string serials = 6;
  // Optional parameter to filter devices by statuses. Valid statuses are [\"online\", \"alerting\", \"offline\", \"dormant\"].
  repeated string statuses = 7;
  // An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
  repeated string productTypes = 8;
  // Optional parameter to filter devices by models.
  repeated string models = 9;
  // An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
  repeated string tags = 10;
  // An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
  string tagsFilterType = 11;

}

message GetOrganizationDevicesStatusesResponse {
  repeated GetOrganizationDevicesStatuses200ResponseInner data = 1;
}

message GetOrganizationDevicesStatusesOverviewRequest {
  // Organization ID
  string organizationId = 1;
  // An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
  repeated string productTypes = 2;
  // An optional parameter to filter device statuses by network.
  repeated string networkIds = 3;

}

message GetOrganizationDevicesUplinksAddressesByDeviceRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches.
  repeated string networkIds = 5;
  // Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches.
  repeated string productTypes = 6;
  // Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
  repeated string serials = 7;
  // An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
  repeated string tags = 8;
  // An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
  string tagsFilterType = 9;

}

message GetOrganizationDevicesUplinksAddressesByDeviceResponse {
  repeated GetOrganizationDevicesUplinksAddressesByDevice200ResponseInner data = 1;
}

message GetOrganizationDevicesUplinksLossAndLatencyRequest {
  // Organization ID
  string organizationId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 60 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 5 minutes after t0. The latest possible time that t1 can be is 2 minutes into the past.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 5 minutes. The default is 5 minutes.
  float timespan = 4;
  // Optional filter for a specific WAN uplink. Valid uplinks are wan1, wan2, wan3, cellular. Default will return all uplinks.
  string uplink = 5;
  // Optional filter for a specific destination IP. Default will return all destination IPs.
  string ip = 6;

}

message GetOrganizationDevicesUplinksLossAndLatencyResponse {
  repeated GetOrganizationDevicesUplinksLossAndLatency200ResponseInner data = 1;
}

message GetOrganizationInventoryDeviceRequest {
  // Organization ID
  string organizationId = 1;
  // Serial
  string serial = 2;

}

message GetOrganizationInventoryDevicesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Filter results by used or unused inventory. Accepted values are 'used' or 'unused'.
  string usedState = 5;
  // Search for devices in inventory based on serial number, mac address, or model.
  string search = 6;
  // Search for devices in inventory based on mac addresses.
  repeated string macs = 7;
  // Search for devices in inventory based on network ids.
  repeated string networkIds = 8;
  // Search for devices in inventory based on serials.
  repeated string serials = 9;
  // Search for devices in inventory based on model.
  repeated string models = 10;
  // Search for devices in inventory based on order numbers.
  repeated string orderNumbers = 11;
  // Filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
  repeated string tags = 12;
  // To use with 'tags' parameter, to filter devices which contain ANY or ALL given tags. Accepted values are 'withAnyTags' or 'withAllTags', default is 'withAnyTags'.
  string tagsFilterType = 13;
  // Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
  repeated string productTypes = 14;

}

message GetOrganizationInventoryDevicesResponse {
  repeated GetOrganizationInventoryDevices200ResponseInner data = 1;
}

message GetOrganizationSummaryTopDevicesByUsageRequest {
  // Organization ID
  string organizationId = 1;
  // The beginning of the timespan for the data.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be greater than or equal to 8 hours and be less than or equal to 31 days. The default is 1 day.
  float timespan = 4;

}

message GetOrganizationSummaryTopDevicesByUsageResponse {
  repeated GetOrganizationSummaryTopDevicesByUsage200ResponseInner data = 1;
}

message GetOrganizationSummaryTopDevicesModelsByUsageRequest {
  // Organization ID
  string organizationId = 1;
  // The beginning of the timespan for the data.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be greater than or equal to 8 hours and be less than or equal to 31 days. The default is 1 day.
  float timespan = 4;

}

message GetOrganizationSummaryTopDevicesModelsByUsageResponse {
  repeated GetOrganizationSummaryTopDevicesModelsByUsage200ResponseInner data = 1;
}

message GetOrganizationWirelessDevicesChannelUtilizationByDeviceRequest {
  // Organization ID
  string organizationId = 1;
  // Filter results by network.
  repeated string networkIds = 2;
  // Filter results by device.
  repeated string serials = 3;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // The beginning of the timespan for the data. The maximum lookback period is 90 days from today.
  string t0 = 7;
  // The end of the timespan for the data. t1 can be a maximum of 90 days after t0.
  string t1 = 8;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 90 days. The default is 7 days.
  float timespan = 9;
  // The time interval in seconds for returned data. The valid intervals are: 300, 600, 3600, 7200, 14400, 21600. The default is 3600.
  int32 interval = 10;

}

message GetOrganizationWirelessDevicesChannelUtilizationByDeviceResponse {
  repeated GetOrganizationWirelessDevicesChannelUtilizationByDevice200ResponseInner data = 1;
}

message GetOrganizationWirelessDevicesChannelUtilizationByNetworkRequest {
  // Organization ID
  string organizationId = 1;
  // Filter results by network.
  repeated string networkIds = 2;
  // Filter results by device.
  repeated string serials = 3;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // The beginning of the timespan for the data. The maximum lookback period is 90 days from today.
  string t0 = 7;
  // The end of the timespan for the data. t1 can be a maximum of 90 days after t0.
  string t1 = 8;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 90 days. The default is 7 days.
  float timespan = 9;
  // The time interval in seconds for returned data. The valid intervals are: 300, 600, 3600, 7200, 14400, 21600. The default is 3600.
  int32 interval = 10;

}

message GetOrganizationWirelessDevicesChannelUtilizationByNetworkResponse {
  repeated GetOrganizationWirelessDevicesChannelUtilizationByNetwork200ResponseInner data = 1;
}

message GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalRequest {
  // Organization ID
  string organizationId = 1;
  // Filter results by network.
  repeated string networkIds = 2;
  // Filter results by device.
  repeated string serials = 3;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 7;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 8;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
  float timespan = 9;
  // The time interval in seconds for returned data. The valid intervals are: 300, 600, 3600, 7200, 14400, 21600. The default is 3600.
  int32 interval = 10;

}

message GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalResponse {
  repeated GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByInterval200ResponseInner data = 1;
}

message GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalRequest {
  // Organization ID
  string organizationId = 1;
  // Filter results by network.
  repeated string networkIds = 2;
  // Filter results by device.
  repeated string serials = 3;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 7;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 8;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
  float timespan = 9;
  // The time interval in seconds for returned data. The valid intervals are: 300, 600, 3600, 7200, 14400, 21600. The default is 3600.
  int32 interval = 10;

}

message GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalResponse {
  repeated GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByInterval200ResponseInner data = 1;
}

message GetOrganizationWirelessDevicesEthernetStatusesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
  repeated string networkIds = 5;

}

message GetOrganizationWirelessDevicesEthernetStatusesResponse {
  repeated GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner data = 1;
}

message InstallNetworkSmDeviceAppsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  InstallNetworkSmDeviceAppsRequest installNetworkSmDeviceAppsRequest = 3;

}

message LockNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  LockNetworkSmDevicesRequest lockNetworkSmDevicesRequest = 2;

}

message ModifyNetworkSmDevicesTagsRequest {
  // Network ID
  string networkId = 1;
  ModifyNetworkSmDevicesTagsRequest modifyNetworkSmDevicesTagsRequest = 2;

}

message ModifyNetworkSmDevicesTagsResponse {
  repeated ModifyNetworkSmDevicesTags200ResponseInner data = 1;
}

message MoveNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  MoveNetworkSmDevicesRequest moveNetworkSmDevicesRequest = 2;

}

message RebootDeviceRequest {
  // Serial
  string serial = 1;

}

message RefreshNetworkSmDeviceDetailsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message RemoveNetworkDevicesRequest {
  // Network ID
  string networkId = 1;
  RemoveNetworkDevicesRequest removeNetworkDevicesRequest = 2;

}

message UnenrollNetworkSmDeviceRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;

}

message UninstallNetworkSmDeviceAppsRequest {
  // Network ID
  string networkId = 1;
  // Device ID
  string deviceId = 2;
  UninstallNetworkSmDeviceAppsRequest uninstallNetworkSmDeviceAppsRequest = 3;

}

message UpdateDeviceRequest {
  // Serial
  string serial = 1;
  UpdateDeviceRequest updateDeviceRequest = 2;

}

message UpdateDeviceCellularSimsRequest {
  // Serial
  string serial = 1;
  UpdateDeviceCellularSimsRequest updateDeviceCellularSimsRequest = 2;

}

message UpdateDeviceManagementInterfaceRequest {
  // Serial
  string serial = 1;
  UpdateDeviceManagementInterfaceRequest updateDeviceManagementInterfaceRequest = 2;

}

message UpdateNetworkSmDevicesFieldsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSmDevicesFieldsRequest updateNetworkSmDevicesFieldsRequest = 2;

}

message UpdateNetworkSmDevicesFieldsResponse {
  repeated UpdateNetworkSmDevicesFields200ResponseInner data = 1;
}

message VmxNetworkDevicesClaimRequest {
  // Network ID
  string networkId = 1;
  VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest = 2;

}

message WipeNetworkSmDevicesRequest {
  // Network ID
  string networkId = 1;
  WipeNetworkSmDevicesRequest wipeNetworkSmDevicesRequest = 2;

}

