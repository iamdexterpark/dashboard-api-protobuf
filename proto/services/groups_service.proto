/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.groupsservice;

import "google/protobuf/empty.proto";
import public "models/create_network_firmware_upgrades_staged_group_request.proto";
import public "models/create_organization_adaptive_policy_group_request.proto";
import public "models/create_organization_policy_objects_group_request.proto";
import public "models/get_network_firmware_upgrades_staged_groups200_response_inner.proto";
import public "models/todo_object_mapping.proto";
import public "models/update_organization_adaptive_policy_group_request.proto";
import public "models/update_organization_policy_objects_group_request.proto";

service GroupsService {
  rpc CreateNetworkFirmwareUpgradesStagedGroup (CreateNetworkFirmwareUpgradesStagedGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationAdaptivePolicyGroup (CreateOrganizationAdaptivePolicyGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateOrganizationPolicyObjectsGroup (CreateOrganizationPolicyObjectsGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc DeleteNetworkFirmwareUpgradesStagedGroup (DeleteNetworkFirmwareUpgradesStagedGroupRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationAdaptivePolicyGroup (DeleteOrganizationAdaptivePolicyGroupRequest) returns (google.protobuf.Empty);

  rpc DeleteOrganizationPolicyObjectsGroup (DeleteOrganizationPolicyObjectsGroupRequest) returns (google.protobuf.Empty);

  rpc GetNetworkFirmwareUpgradesStagedGroup (GetNetworkFirmwareUpgradesStagedGroupRequest) returns (GetNetworkFirmwareUpgradesStagedGroups200ResponseInner);

  rpc GetNetworkFirmwareUpgradesStagedGroups (GetNetworkFirmwareUpgradesStagedGroupsRequest) returns (GetNetworkFirmwareUpgradesStagedGroupsResponse);

  rpc GetOrganizationAdaptivePolicyGroup (GetOrganizationAdaptivePolicyGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationAdaptivePolicyGroups (GetOrganizationAdaptivePolicyGroupsRequest) returns (GetOrganizationAdaptivePolicyGroupsResponse);

  rpc GetOrganizationPolicyObjectsGroup (GetOrganizationPolicyObjectsGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetOrganizationPolicyObjectsGroups (GetOrganizationPolicyObjectsGroupsRequest) returns (GetOrganizationPolicyObjectsGroupsResponse);

  rpc UpdateNetworkFirmwareUpgradesStagedGroup (UpdateNetworkFirmwareUpgradesStagedGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationAdaptivePolicyGroup (UpdateOrganizationAdaptivePolicyGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateOrganizationPolicyObjectsGroup (UpdateOrganizationPolicyObjectsGroupRequest) returns (TODO_OBJECT_MAPPING);

}

message CreateNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = 2;

}

message CreateOrganizationAdaptivePolicyGroupRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationAdaptivePolicyGroupRequest createOrganizationAdaptivePolicyGroupRequest = 2;

}

message CreateOrganizationPolicyObjectsGroupRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationPolicyObjectsGroupRequest createOrganizationPolicyObjectsGroupRequest = 2;

}

message DeleteNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  // Group ID
  string groupId = 2;

}

message DeleteOrganizationAdaptivePolicyGroupRequest {
  // Organization ID
  string organizationId = 1;
  // ID
  string id = 2;

}

message DeleteOrganizationPolicyObjectsGroupRequest {
  // Organization ID
  string organizationId = 1;
  // Policy object group ID
  string policyObjectGroupId = 2;

}

message GetNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  // Group ID
  string groupId = 2;

}

message GetNetworkFirmwareUpgradesStagedGroupsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkFirmwareUpgradesStagedGroupsResponse {
  repeated GetNetworkFirmwareUpgradesStagedGroups200ResponseInner data = 1;
}

message GetOrganizationAdaptivePolicyGroupRequest {
  // Organization ID
  string organizationId = 1;
  // ID
  string id = 2;

}

message GetOrganizationAdaptivePolicyGroupsRequest {
  // Organization ID
  string organizationId = 1;

}

message GetOrganizationAdaptivePolicyGroupsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetOrganizationPolicyObjectsGroupRequest {
  // Organization ID
  string organizationId = 1;
  // Policy object group ID
  string policyObjectGroupId = 2;

}

message GetOrganizationPolicyObjectsGroupsRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 10 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetOrganizationPolicyObjectsGroupsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message UpdateNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  // Group ID
  string groupId = 2;
  CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = 3;

}

message UpdateOrganizationAdaptivePolicyGroupRequest {
  // Organization ID
  string organizationId = 1;
  // ID
  string id = 2;
  UpdateOrganizationAdaptivePolicyGroupRequest updateOrganizationAdaptivePolicyGroupRequest = 3;

}

message UpdateOrganizationPolicyObjectsGroupRequest {
  // Organization ID
  string organizationId = 1;
  // Policy object group ID
  string policyObjectGroupId = 2;
  UpdateOrganizationPolicyObjectsGroupRequest updateOrganizationPolicyObjectsGroupRequest = 3;

}

