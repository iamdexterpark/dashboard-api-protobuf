/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.portsservice;

import "google/protobuf/empty.proto";
import public "models/assign_network_wireless_ethernet_ports_profiles201_response.proto";
import public "models/assign_network_wireless_ethernet_ports_profiles_request.proto";
import public "models/create_network_wireless_ethernet_ports_profile_request.proto";
import public "models/cycle_device_switch_ports200_response.proto";
import public "models/cycle_device_switch_ports_request.proto";
import public "models/get_device_switch_ports200_response_inner.proto";
import public "models/get_device_switch_ports_statuses200_response_inner.proto";
import public "models/get_network_appliance_ports200_response_inner.proto";
import public "models/get_network_wireless_ethernet_ports_profiles200_response_inner.proto";
import public "models/get_organization_config_template_switch_profile_ports200_response_inner.proto";
import public "models/get_organization_switch_ports_by_switch200_response_inner.proto";
import public "models/set_network_wireless_ethernet_ports_profiles_default200_response.proto";
import public "models/set_network_wireless_ethernet_ports_profiles_default_request.proto";
import public "models/todo_object_mapping.proto";
import public "models/update_device_switch_port_request.proto";
import public "models/update_network_appliance_port_request.proto";
import public "models/update_network_wireless_ethernet_ports_profile_request.proto";
import public "models/update_organization_config_template_switch_profile_port_request.proto";

service PortsService {
  rpc AssignNetworkWirelessEthernetPortsProfiles (AssignNetworkWirelessEthernetPortsProfilesRequest) returns (AssignNetworkWirelessEthernetPortsProfiles201Response);

  rpc CreateNetworkWirelessEthernetPortsProfile (CreateNetworkWirelessEthernetPortsProfileRequest) returns (GetNetworkWirelessEthernetPortsProfiles200ResponseInner);

  rpc CycleDeviceSwitchPorts (CycleDeviceSwitchPortsRequest) returns (CycleDeviceSwitchPorts200Response);

  rpc DeleteNetworkWirelessEthernetPortsProfile (DeleteNetworkWirelessEthernetPortsProfileRequest) returns (google.protobuf.Empty);

  rpc GetDeviceSwitchPort (GetDeviceSwitchPortRequest) returns (GetDeviceSwitchPorts200ResponseInner);

  rpc GetDeviceSwitchPorts (GetDeviceSwitchPortsRequest) returns (GetDeviceSwitchPortsResponse);

  rpc GetDeviceSwitchPortsStatuses (GetDeviceSwitchPortsStatusesRequest) returns (GetDeviceSwitchPortsStatusesResponse);

  rpc GetDeviceSwitchPortsStatusesPackets (GetDeviceSwitchPortsStatusesPacketsRequest) returns (GetDeviceSwitchPortsStatusesPacketsResponse);

  rpc GetNetworkAppliancePort (GetNetworkAppliancePortRequest) returns (GetNetworkAppliancePorts200ResponseInner);

  rpc GetNetworkAppliancePorts (GetNetworkAppliancePortsRequest) returns (GetNetworkAppliancePortsResponse);

  rpc GetNetworkWirelessEthernetPortsProfile (GetNetworkWirelessEthernetPortsProfileRequest) returns (GetNetworkWirelessEthernetPortsProfiles200ResponseInner);

  rpc GetNetworkWirelessEthernetPortsProfiles (GetNetworkWirelessEthernetPortsProfilesRequest) returns (GetNetworkWirelessEthernetPortsProfilesResponse);

  rpc GetOrganizationConfigTemplateSwitchProfilePort (GetOrganizationConfigTemplateSwitchProfilePortRequest) returns (GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner);

  rpc GetOrganizationConfigTemplateSwitchProfilePorts (GetOrganizationConfigTemplateSwitchProfilePortsRequest) returns (GetOrganizationConfigTemplateSwitchProfilePortsResponse);

  rpc GetOrganizationSwitchPortsBySwitch (GetOrganizationSwitchPortsBySwitchRequest) returns (GetOrganizationSwitchPortsBySwitchResponse);

  rpc SetNetworkWirelessEthernetPortsProfilesDefault (SetNetworkWirelessEthernetPortsProfilesDefaultRequest) returns (SetNetworkWirelessEthernetPortsProfilesDefault200Response);

  rpc UpdateDeviceSwitchPort (UpdateDeviceSwitchPortRequest) returns (GetDeviceSwitchPorts200ResponseInner);

  rpc UpdateNetworkAppliancePort (UpdateNetworkAppliancePortRequest) returns (GetNetworkAppliancePorts200ResponseInner);

  rpc UpdateNetworkWirelessEthernetPortsProfile (UpdateNetworkWirelessEthernetPortsProfileRequest) returns (GetNetworkWirelessEthernetPortsProfiles200ResponseInner);

  rpc UpdateOrganizationConfigTemplateSwitchProfilePort (UpdateOrganizationConfigTemplateSwitchProfilePortRequest) returns (GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner);

}

message AssignNetworkWirelessEthernetPortsProfilesRequest {
  // Network ID
  string networkId = 1;
  AssignNetworkWirelessEthernetPortsProfilesRequest assignNetworkWirelessEthernetPortsProfilesRequest = 2;

}

message CreateNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkWirelessEthernetPortsProfileRequest createNetworkWirelessEthernetPortsProfileRequest = 2;

}

message CycleDeviceSwitchPortsRequest {
  // Serial
  string serial = 1;
  CycleDeviceSwitchPortsRequest cycleDeviceSwitchPortsRequest = 2;

}

message DeleteNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  // Profile ID
  string profileId = 2;

}

message GetDeviceSwitchPortRequest {
  // Serial
  string serial = 1;
  // Port ID
  string portId = 2;

}

message GetDeviceSwitchPortsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceSwitchPortsResponse {
  repeated GetDeviceSwitchPorts200ResponseInner data = 1;
}

message GetDeviceSwitchPortsStatusesRequest {
  // Serial
  string serial = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 3;

}

message GetDeviceSwitchPortsStatusesResponse {
  repeated GetDeviceSwitchPortsStatuses200ResponseInner data = 1;
}

message GetDeviceSwitchPortsStatusesPacketsRequest {
  // Serial
  string serial = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 1 day from today.
  string t0 = 2;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 1 day. The default is 1 day.
  float timespan = 3;

}

message GetDeviceSwitchPortsStatusesPacketsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkAppliancePortRequest {
  // Network ID
  string networkId = 1;
  // Port ID
  string portId = 2;

}

message GetNetworkAppliancePortsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkAppliancePortsResponse {
  repeated GetNetworkAppliancePorts200ResponseInner data = 1;
}

message GetNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  // Profile ID
  string profileId = 2;

}

message GetNetworkWirelessEthernetPortsProfilesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessEthernetPortsProfilesResponse {
  repeated GetNetworkWirelessEthernetPortsProfiles200ResponseInner data = 1;
}

message GetOrganizationConfigTemplateSwitchProfilePortRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;
  // Profile ID
  string profileId = 3;
  // Port ID
  string portId = 4;

}

message GetOrganizationConfigTemplateSwitchProfilePortsRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;
  // Profile ID
  string profileId = 3;

}

message GetOrganizationConfigTemplateSwitchProfilePortsResponse {
  repeated GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner data = 1;
}

message GetOrganizationSwitchPortsBySwitchRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter switchports by network.
  repeated string networkIds = 5;
  // Optional parameter to filter switchports belonging to the specified port profiles.
  repeated string portProfileIds = 6;
  // Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
  string name = 7;
  // Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
  string mac = 8;
  // Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
  repeated string macs = 9;
  // Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
  string serial = 10;
  // Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
  repeated string serials = 11;
  // Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
  string configurationUpdatedAfter = 12;

}

message GetOrganizationSwitchPortsBySwitchResponse {
  repeated GetOrganizationSwitchPortsBySwitch200ResponseInner data = 1;
}

message SetNetworkWirelessEthernetPortsProfilesDefaultRequest {
  // Network ID
  string networkId = 1;
  SetNetworkWirelessEthernetPortsProfilesDefaultRequest setNetworkWirelessEthernetPortsProfilesDefaultRequest = 2;

}

message UpdateDeviceSwitchPortRequest {
  // Serial
  string serial = 1;
  // Port ID
  string portId = 2;
  UpdateDeviceSwitchPortRequest updateDeviceSwitchPortRequest = 3;

}

message UpdateNetworkAppliancePortRequest {
  // Network ID
  string networkId = 1;
  // Port ID
  string portId = 2;
  UpdateNetworkAppliancePortRequest updateNetworkAppliancePortRequest = 3;

}

message UpdateNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  // Profile ID
  string profileId = 2;
  UpdateNetworkWirelessEthernetPortsProfileRequest updateNetworkWirelessEthernetPortsProfileRequest = 3;

}

message UpdateOrganizationConfigTemplateSwitchProfilePortRequest {
  // Organization ID
  string organizationId = 1;
  // Config template ID
  string configTemplateId = 2;
  // Profile ID
  string profileId = 3;
  // Port ID
  string portId = 4;
  UpdateOrganizationConfigTemplateSwitchProfilePortRequest updateOrganizationConfigTemplateSwitchProfilePortRequest = 5;

}

