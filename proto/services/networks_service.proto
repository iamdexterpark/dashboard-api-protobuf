/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.networksservice;

import "google/protobuf/empty.proto";
import public "models/bind_network_request.proto";
import public "models/claim_network_devices_request.proto";
import public "models/combine_organization_networks200_response.proto";
import public "models/combine_organization_networks_request.proto";
import public "models/create_network_firmware_upgrades_rollback200_response.proto";
import public "models/create_network_firmware_upgrades_rollback_request.proto";
import public "models/create_network_firmware_upgrades_staged_event_request.proto";
import public "models/create_network_firmware_upgrades_staged_group_request.proto";
import public "models/create_network_floor_plan_request.proto";
import public "models/create_network_group_policy_request.proto";
import public "models/create_network_meraki_auth_user_request.proto";
import public "models/create_network_mqtt_broker_request.proto";
import public "models/create_network_pii_request_request.proto";
import public "models/create_network_vlan_profile_request.proto";
import public "models/create_network_webhooks_http_server_request.proto";
import public "models/create_network_webhooks_payload_template_request.proto";
import public "models/create_network_webhooks_webhook_test201_response.proto";
import public "models/create_network_webhooks_webhook_test_request.proto";
import public "models/create_organization_network_request.proto";
import public "models/get_network200_response.proto";
import public "models/get_network_alerts_history200_response_inner.proto";
import public "models/get_network_client200_response.proto";
import public "models/get_network_clients200_response.proto";
import public "models/get_network_events200_response.proto";
import public "models/get_network_events_event_types200_response_inner.proto";
import public "models/get_network_firmware_upgrades200_response.proto";
import public "models/get_network_firmware_upgrades_staged_events200_response.proto";
import public "models/get_network_firmware_upgrades_staged_groups200_response_inner.proto";
import public "models/get_network_firmware_upgrades_staged_stages200_response_inner.proto";
import public "models/get_network_floor_plans200_response_inner.proto";
import public "models/get_network_health_alerts200_response_inner.proto";
import public "models/get_network_meraki_auth_users200_response_inner.proto";
import public "models/get_network_policies_by_client200_response_inner.proto";
import public "models/get_network_settings200_response.proto";
import public "models/get_network_syslog_servers200_response.proto";
import public "models/get_network_vlan_profiles200_response_inner.proto";
import public "models/get_network_vlan_profiles_assignments_by_device200_response_inner.proto";
import public "models/get_network_webhooks_http_servers200_response_inner.proto";
import public "models/get_network_webhooks_payload_templates200_response_inner.proto";
import public "models/provision_network_clients_request.proto";
import public "models/reassign_network_vlan_profiles_assignments200_response.proto";
import public "models/reassign_network_vlan_profiles_assignments_request.proto";
import public "models/remove_network_devices_request.proto";
import public "models/rollbacks_network_firmware_upgrades_staged_events_request.proto";
import public "models/split_network200_response.proto";
import public "models/todo_object_mapping.proto";
import public "models/unbind_network_request.proto";
import public "models/update_network_alerts_settings_request.proto";
import public "models/update_network_client_policy_request.proto";
import public "models/update_network_client_splash_authorization_status_request.proto";
import public "models/update_network_firmware_upgrades_request.proto";
import public "models/update_network_firmware_upgrades_staged_events_request.proto";
import public "models/update_network_firmware_upgrades_staged_stages_request.proto";
import public "models/update_network_floor_plan_request.proto";
import public "models/update_network_group_policy_request.proto";
import public "models/update_network_meraki_auth_user_request.proto";
import public "models/update_network_mqtt_broker_request.proto";
import public "models/update_network_netflow_request.proto";
import public "models/update_network_request.proto";
import public "models/update_network_settings_request.proto";
import public "models/update_network_snmp_request.proto";
import public "models/update_network_syslog_servers_request.proto";
import public "models/update_network_traffic_analysis_request.proto";
import public "models/update_network_vlan_profile_request.proto";
import public "models/update_network_webhooks_http_server_request.proto";
import public "models/update_network_webhooks_payload_template_request.proto";
import public "models/vmx_network_devices_claim_request.proto";

service NetworksService {
  rpc BindNetwork (BindNetworkRequest) returns (TODO_OBJECT_MAPPING);

  rpc ClaimNetworkDevices (ClaimNetworkDevicesRequest) returns (google.protobuf.Empty);

  rpc CombineOrganizationNetworks (CombineOrganizationNetworksRequest) returns (CombineOrganizationNetworks200Response);

  rpc CreateNetworkFirmwareUpgradesRollback (CreateNetworkFirmwareUpgradesRollbackRequest) returns (CreateNetworkFirmwareUpgradesRollback200Response);

  rpc CreateNetworkFirmwareUpgradesStagedEvent (CreateNetworkFirmwareUpgradesStagedEventRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc CreateNetworkFirmwareUpgradesStagedGroup (CreateNetworkFirmwareUpgradesStagedGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkFloorPlan (CreateNetworkFloorPlanRequest) returns (GetNetworkFloorPlans200ResponseInner);

  rpc CreateNetworkGroupPolicy (CreateNetworkGroupPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkMerakiAuthUser (CreateNetworkMerakiAuthUserRequest) returns (GetNetworkMerakiAuthUsers200ResponseInner);

  rpc CreateNetworkMqttBroker (CreateNetworkMqttBrokerRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkPiiRequest (CreateNetworkPiiRequestRequest) returns (TODO_OBJECT_MAPPING);

  rpc CreateNetworkVlanProfile (CreateNetworkVlanProfileRequest) returns (GetNetworkVlanProfiles200ResponseInner);

  rpc CreateNetworkWebhooksHttpServer (CreateNetworkWebhooksHttpServerRequest) returns (GetNetworkWebhooksHttpServers200ResponseInner);

  rpc CreateNetworkWebhooksPayloadTemplate (CreateNetworkWebhooksPayloadTemplateRequest) returns (GetNetworkWebhooksPayloadTemplates200ResponseInner);

  rpc CreateNetworkWebhooksWebhookTest (CreateNetworkWebhooksWebhookTestRequest) returns (CreateNetworkWebhooksWebhookTest201Response);

  rpc CreateOrganizationNetwork (CreateOrganizationNetworkRequest) returns (GetNetwork200Response);

  rpc DeferNetworkFirmwareUpgradesStagedEvents (DeferNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc DeleteNetwork (DeleteNetworkRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkFirmwareUpgradesStagedGroup (DeleteNetworkFirmwareUpgradesStagedGroupRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkFloorPlan (DeleteNetworkFloorPlanRequest) returns (GetNetworkFloorPlans200ResponseInner);

  rpc DeleteNetworkGroupPolicy (DeleteNetworkGroupPolicyRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkMerakiAuthUser (DeleteNetworkMerakiAuthUserRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkMqttBroker (DeleteNetworkMqttBrokerRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkPiiRequest (DeleteNetworkPiiRequestRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkVlanProfile (DeleteNetworkVlanProfileRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkWebhooksHttpServer (DeleteNetworkWebhooksHttpServerRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkWebhooksPayloadTemplate (DeleteNetworkWebhooksPayloadTemplateRequest) returns (google.protobuf.Empty);

  rpc GetNetwork (GetNetworkRequest) returns (GetNetwork200Response);

  rpc GetNetworkAlertsHistory (GetNetworkAlertsHistoryRequest) returns (GetNetworkAlertsHistoryResponse);

  rpc GetNetworkAlertsSettings (GetNetworkAlertsSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkBluetoothClient (GetNetworkBluetoothClientRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkBluetoothClients (GetNetworkBluetoothClientsRequest) returns (GetNetworkBluetoothClientsResponse);

  rpc GetNetworkClient (GetNetworkClientRequest) returns (GetNetworkClient200Response);

  rpc GetNetworkClientPolicy (GetNetworkClientPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkClientSplashAuthorizationStatus (GetNetworkClientSplashAuthorizationStatusRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkClientTrafficHistory (GetNetworkClientTrafficHistoryRequest) returns (GetNetworkClientTrafficHistoryResponse);

  rpc GetNetworkClientUsageHistory (GetNetworkClientUsageHistoryRequest) returns (GetNetworkClientUsageHistoryResponse);

  rpc GetNetworkClients (GetNetworkClientsRequest) returns (GetNetworkClients200Response);

  rpc GetNetworkClientsApplicationUsage (GetNetworkClientsApplicationUsageRequest) returns (GetNetworkClientsApplicationUsageResponse);

  rpc GetNetworkClientsBandwidthUsageHistory (GetNetworkClientsBandwidthUsageHistoryRequest) returns (GetNetworkClientsBandwidthUsageHistoryResponse);

  rpc GetNetworkClientsOverview (GetNetworkClientsOverviewRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkClientsUsageHistories (GetNetworkClientsUsageHistoriesRequest) returns (GetNetworkClientsUsageHistoriesResponse);

  rpc GetNetworkDevices (GetNetworkDevicesRequest) returns (GetNetworkDevicesResponse);

  rpc GetNetworkEvents (GetNetworkEventsRequest) returns (GetNetworkEvents200Response);

  rpc GetNetworkEventsEventTypes (GetNetworkEventsEventTypesRequest) returns (GetNetworkEventsEventTypesResponse);

  rpc GetNetworkFirmwareUpgrades (GetNetworkFirmwareUpgradesRequest) returns (GetNetworkFirmwareUpgrades200Response);

  rpc GetNetworkFirmwareUpgradesStagedEvents (GetNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc GetNetworkFirmwareUpgradesStagedGroup (GetNetworkFirmwareUpgradesStagedGroupRequest) returns (GetNetworkFirmwareUpgradesStagedGroups200ResponseInner);

  rpc GetNetworkFirmwareUpgradesStagedGroups (GetNetworkFirmwareUpgradesStagedGroupsRequest) returns (GetNetworkFirmwareUpgradesStagedGroupsResponse);

  rpc GetNetworkFirmwareUpgradesStagedStages (GetNetworkFirmwareUpgradesStagedStagesRequest) returns (GetNetworkFirmwareUpgradesStagedStagesResponse);

  rpc GetNetworkFloorPlan (GetNetworkFloorPlanRequest) returns (GetNetworkFloorPlans200ResponseInner);

  rpc GetNetworkFloorPlans (GetNetworkFloorPlansRequest) returns (GetNetworkFloorPlansResponse);

  rpc GetNetworkGroupPolicies (GetNetworkGroupPoliciesRequest) returns (GetNetworkGroupPoliciesResponse);

  rpc GetNetworkGroupPolicy (GetNetworkGroupPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkHealthAlerts (GetNetworkHealthAlertsRequest) returns (GetNetworkHealthAlertsResponse);

  rpc GetNetworkMerakiAuthUser (GetNetworkMerakiAuthUserRequest) returns (GetNetworkMerakiAuthUsers200ResponseInner);

  rpc GetNetworkMerakiAuthUsers (GetNetworkMerakiAuthUsersRequest) returns (GetNetworkMerakiAuthUsersResponse);

  rpc GetNetworkMqttBroker (GetNetworkMqttBrokerRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkMqttBrokers (GetNetworkMqttBrokersRequest) returns (GetNetworkMqttBrokersResponse);

  rpc GetNetworkNetflow (GetNetworkNetflowRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkNetworkHealthChannelUtilization (GetNetworkNetworkHealthChannelUtilizationRequest) returns (GetNetworkNetworkHealthChannelUtilizationResponse);

  rpc GetNetworkPiiPiiKeys (GetNetworkPiiPiiKeysRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkPiiRequest (GetNetworkPiiRequestRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkPiiRequests (GetNetworkPiiRequestsRequest) returns (GetNetworkPiiRequestsResponse);

  rpc GetNetworkPiiSmDevicesForKey (GetNetworkPiiSmDevicesForKeyRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkPiiSmOwnersForKey (GetNetworkPiiSmOwnersForKeyRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkPoliciesByClient (GetNetworkPoliciesByClientRequest) returns (GetNetworkPoliciesByClientResponse);

  rpc GetNetworkSettings (GetNetworkSettingsRequest) returns (GetNetworkSettings200Response);

  rpc GetNetworkSnmp (GetNetworkSnmpRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSplashLoginAttempts (GetNetworkSplashLoginAttemptsRequest) returns (GetNetworkSplashLoginAttemptsResponse);

  rpc GetNetworkSyslogServers (GetNetworkSyslogServersRequest) returns (GetNetworkSyslogServers200Response);

  rpc GetNetworkTopologyLinkLayer (GetNetworkTopologyLinkLayerRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkTraffic (GetNetworkTrafficRequest) returns (GetNetworkTrafficResponse);

  rpc GetNetworkTrafficAnalysis (GetNetworkTrafficAnalysisRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkTrafficShapingApplicationCategories (GetNetworkTrafficShapingApplicationCategoriesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkTrafficShapingDscpTaggingOptions (GetNetworkTrafficShapingDscpTaggingOptionsRequest) returns (GetNetworkTrafficShapingDscpTaggingOptionsResponse);

  rpc GetNetworkVlanProfile (GetNetworkVlanProfileRequest) returns (GetNetworkVlanProfiles200ResponseInner);

  rpc GetNetworkVlanProfiles (GetNetworkVlanProfilesRequest) returns (GetNetworkVlanProfilesResponse);

  rpc GetNetworkVlanProfilesAssignmentsByDevice (GetNetworkVlanProfilesAssignmentsByDeviceRequest) returns (GetNetworkVlanProfilesAssignmentsByDeviceResponse);

  rpc GetNetworkWebhooksHttpServer (GetNetworkWebhooksHttpServerRequest) returns (GetNetworkWebhooksHttpServers200ResponseInner);

  rpc GetNetworkWebhooksHttpServers (GetNetworkWebhooksHttpServersRequest) returns (GetNetworkWebhooksHttpServersResponse);

  rpc GetNetworkWebhooksPayloadTemplate (GetNetworkWebhooksPayloadTemplateRequest) returns (GetNetworkWebhooksPayloadTemplates200ResponseInner);

  rpc GetNetworkWebhooksPayloadTemplates (GetNetworkWebhooksPayloadTemplatesRequest) returns (GetNetworkWebhooksPayloadTemplatesResponse);

  rpc GetNetworkWebhooksWebhookTest (GetNetworkWebhooksWebhookTestRequest) returns (CreateNetworkWebhooksWebhookTest201Response);

  rpc GetOrganizationInventoryOnboardingCloudMonitoringNetworks (GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest) returns (GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse);

  rpc GetOrganizationNetworks (GetOrganizationNetworksRequest) returns (GetOrganizationNetworksResponse);

  rpc ProvisionNetworkClients (ProvisionNetworkClientsRequest) returns (TODO_OBJECT_MAPPING);

  rpc ReassignNetworkVlanProfilesAssignments (ReassignNetworkVlanProfilesAssignmentsRequest) returns (ReassignNetworkVlanProfilesAssignments200Response);

  rpc RemoveNetworkDevices (RemoveNetworkDevicesRequest) returns (google.protobuf.Empty);

  rpc RollbacksNetworkFirmwareUpgradesStagedEvents (RollbacksNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc SplitNetwork (SplitNetworkRequest) returns (SplitNetwork200Response);

  rpc UnbindNetwork (UnbindNetworkRequest) returns (GetNetwork200Response);

  rpc UpdateNetwork (UpdateNetworkRequest) returns (GetNetwork200Response);

  rpc UpdateNetworkAlertsSettings (UpdateNetworkAlertsSettingsRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkClientPolicy (UpdateNetworkClientPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkClientSplashAuthorizationStatus (UpdateNetworkClientSplashAuthorizationStatusRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkFirmwareUpgrades (UpdateNetworkFirmwareUpgradesRequest) returns (GetNetworkFirmwareUpgrades200Response);

  rpc UpdateNetworkFirmwareUpgradesStagedEvents (UpdateNetworkFirmwareUpgradesStagedEventsRequest) returns (GetNetworkFirmwareUpgradesStagedEvents200Response);

  rpc UpdateNetworkFirmwareUpgradesStagedGroup (UpdateNetworkFirmwareUpgradesStagedGroupRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkFirmwareUpgradesStagedStages (UpdateNetworkFirmwareUpgradesStagedStagesRequest) returns (UpdateNetworkFirmwareUpgradesStagedStagesResponse);

  rpc UpdateNetworkFloorPlan (UpdateNetworkFloorPlanRequest) returns (GetNetworkFloorPlans200ResponseInner);

  rpc UpdateNetworkGroupPolicy (UpdateNetworkGroupPolicyRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkMerakiAuthUser (UpdateNetworkMerakiAuthUserRequest) returns (GetNetworkMerakiAuthUsers200ResponseInner);

  rpc UpdateNetworkMqttBroker (UpdateNetworkMqttBrokerRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkNetflow (UpdateNetworkNetflowRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSettings (UpdateNetworkSettingsRequest) returns (GetNetworkSettings200Response);

  rpc UpdateNetworkSnmp (UpdateNetworkSnmpRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSyslogServers (UpdateNetworkSyslogServersRequest) returns (GetNetworkSyslogServers200Response);

  rpc UpdateNetworkTrafficAnalysis (UpdateNetworkTrafficAnalysisRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkVlanProfile (UpdateNetworkVlanProfileRequest) returns (GetNetworkVlanProfiles200ResponseInner);

  rpc UpdateNetworkWebhooksHttpServer (UpdateNetworkWebhooksHttpServerRequest) returns (GetNetworkWebhooksHttpServers200ResponseInner);

  rpc UpdateNetworkWebhooksPayloadTemplate (UpdateNetworkWebhooksPayloadTemplateRequest) returns (GetNetworkWebhooksPayloadTemplates200ResponseInner);

  rpc VmxNetworkDevicesClaim (VmxNetworkDevicesClaimRequest) returns (TODO_OBJECT_MAPPING);

}

message BindNetworkRequest {
  // Network ID
  string networkId = 1;
  BindNetworkRequest bindNetworkRequest = 2;

}

message ClaimNetworkDevicesRequest {
  // Network ID
  string networkId = 1;
  ClaimNetworkDevicesRequest claimNetworkDevicesRequest = 2;

}

message CombineOrganizationNetworksRequest {
  // Organization ID
  string organizationId = 1;
  CombineOrganizationNetworksRequest combineOrganizationNetworksRequest = 2;

}

message CreateNetworkFirmwareUpgradesRollbackRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkFirmwareUpgradesRollbackRequest createNetworkFirmwareUpgradesRollbackRequest = 2;

}

message CreateNetworkFirmwareUpgradesStagedEventRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkFirmwareUpgradesStagedEventRequest createNetworkFirmwareUpgradesStagedEventRequest = 2;

}

message CreateNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = 2;

}

message CreateNetworkFloorPlanRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkFloorPlanRequest createNetworkFloorPlanRequest = 2;

}

message CreateNetworkGroupPolicyRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkGroupPolicyRequest createNetworkGroupPolicyRequest = 2;

}

message CreateNetworkMerakiAuthUserRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkMerakiAuthUserRequest createNetworkMerakiAuthUserRequest = 2;

}

message CreateNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkMqttBrokerRequest createNetworkMqttBrokerRequest = 2;

}

message CreateNetworkPiiRequestRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkPiiRequestRequest createNetworkPiiRequestRequest = 2;

}

message CreateNetworkVlanProfileRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkVlanProfileRequest createNetworkVlanProfileRequest = 2;

}

message CreateNetworkWebhooksHttpServerRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkWebhooksHttpServerRequest createNetworkWebhooksHttpServerRequest = 2;

}

message CreateNetworkWebhooksPayloadTemplateRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkWebhooksPayloadTemplateRequest createNetworkWebhooksPayloadTemplateRequest = 2;

}

message CreateNetworkWebhooksWebhookTestRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkWebhooksWebhookTestRequest createNetworkWebhooksWebhookTestRequest = 2;

}

message CreateOrganizationNetworkRequest {
  // Organization ID
  string organizationId = 1;
  CreateOrganizationNetworkRequest createOrganizationNetworkRequest = 2;

}

message DeferNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;

}

message DeleteNetworkRequest {
  // Network ID
  string networkId = 1;

}

message DeleteNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  // Group ID
  string groupId = 2;

}

message DeleteNetworkFloorPlanRequest {
  // Network ID
  string networkId = 1;
  // Floor plan ID
  string floorPlanId = 2;

}

message DeleteNetworkGroupPolicyRequest {
  // Network ID
  string networkId = 1;
  // Group policy ID
  string groupPolicyId = 2;

}

message DeleteNetworkMerakiAuthUserRequest {
  // Network ID
  string networkId = 1;
  // Meraki auth user ID
  string merakiAuthUserId = 2;
  // If the ID supplied is for a splash guest or client VPN user, and that user is not authorized for any other networks in the organization, then also delete the user. 802.1X RADIUS users are always deleted regardless of this optional attribute.
  bool delete = 3;

}

message DeleteNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;

}

message DeleteNetworkPiiRequestRequest {
  // Network ID
  string networkId = 1;
  // Request ID
  string requestId = 2;

}

message DeleteNetworkVlanProfileRequest {
  // Network ID
  string networkId = 1;
  // Iname
  string iname = 2;

}

message DeleteNetworkWebhooksHttpServerRequest {
  // Network ID
  string networkId = 1;
  // Http server ID
  string httpServerId = 2;

}

message DeleteNetworkWebhooksPayloadTemplateRequest {
  // Network ID
  string networkId = 1;
  // Payload template ID
  string payloadTemplateId = 2;

}

message GetNetworkRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkAlertsHistoryRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetNetworkAlertsHistoryResponse {
  repeated GetNetworkAlertsHistory200ResponseInner data = 1;
}

message GetNetworkAlertsSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkBluetoothClientRequest {
  // Network ID
  string networkId = 1;
  // Bluetooth client ID
  string bluetoothClientId = 2;
  // Include the connectivity history for this client
  bool includeConnectivityHistory = 3;
  // The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used.
  int32 connectivityHistoryTimespan = 4;

}

message GetNetworkBluetoothClientsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 7 days from today.
  string t0 = 2;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 7 days. The default is 1 day.
  float timespan = 3;
  // The number of entries per page returned. Acceptable range is 5 - 1000. Default is 10.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // Include the connectivity history for this client
  bool includeConnectivityHistory = 7;

}

message GetNetworkBluetoothClientsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkClientRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;

}

message GetNetworkClientPolicyRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;

}

message GetNetworkClientSplashAuthorizationStatusRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;

}

message GetNetworkClientTrafficHistoryRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;
  // The number of entries per page returned. Acceptable range is 3 - 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetNetworkClientTrafficHistoryResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkClientUsageHistoryRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;

}

message GetNetworkClientUsageHistoryResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkClientsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 3;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // Filters clients based on status. Can be one of 'Online' or 'Offline'.
  repeated string statuses = 7;
  // Filters clients based on a partial or full match for the ip address field.
  string ip = 8;
  // Filters clients based on a partial or full match for the ip6 address field.
  string ip6 = 9;
  // Filters clients based on a partial or full match for the ip6Local address field.
  string ip6Local = 10;
  // Filters clients based on a partial or full match for the mac address field.
  string mac = 11;
  // Filters clients based on a partial or full match for the os (operating system) field.
  string os = 12;
  // Filters clients based on partial or full match for the iPSK name field.
  string pskGroup = 13;
  // Filters clients based on a partial or full match for the description field.
  string description = 14;
  // Filters clients based on the full match for the VLAN field.
  string vlan = 15;
  // Filters clients based on the partial or full match for the named VLAN field.
  string namedVlan = 16;
  // Filters clients based on recent connection type. Can be one of 'Wired' or 'Wireless'.
  repeated string recentDeviceConnections = 17;

}

message GetNetworkClientsApplicationUsageRequest {
  // Network ID
  string networkId = 1;
  // A list of client keys, MACs or IPs separated by comma.
  string clients = 2;
  // An SSID number to include. If not specified, eveusage histories application usagents for all SSIDs will be returned.
  int32 ssidNumber = 3;
  // The number of entries per page returned. Acceptable range is 3 - 1000.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 7;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 8;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 9;

}

message GetNetworkClientsApplicationUsageResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkClientsBandwidthUsageHistoryRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 30 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 4;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 5;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 6;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 7;

}

message GetNetworkClientsBandwidthUsageHistoryResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkClientsOverviewRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 4;
  // The time resolution in seconds for returned data. The valid resolutions are: 7200, 86400, 604800, 2592000. The default is 604800.
  int32 resolution = 5;

}

message GetNetworkClientsUsageHistoriesRequest {
  // Network ID
  string networkId = 1;
  // A list of client keys, MACs or IPs separated by comma.
  string clients = 2;
  // An SSID number to include. If not specified, events for all SSIDs will be returned.
  int32 ssidNumber = 3;
  // The number of entries per page returned. Acceptable range is 3 - 1000.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 7;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 8;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 9;

}

message GetNetworkClientsUsageHistoriesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkDevicesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkDevicesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkEventsRequest {
  // Network ID
  string networkId = 1;
  // The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
  string productType = 2;
  // A list of event types. The returned events will be filtered to only include events with these types.
  repeated string includedEventTypes = 3;
  // A list of event types. The returned events will be filtered to exclude events with these types.
  repeated string excludedEventTypes = 4;
  // The MAC address of the Meraki device which the list of events will be filtered with
  string deviceMac = 5;
  // The serial of the Meraki device which the list of events will be filtered with
  string deviceSerial = 6;
  // The name of the Meraki device which the list of events will be filtered with
  string deviceName = 7;
  // The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
  string clientIp = 8;
  // The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
  string clientMac = 9;
  // The name, or partial name, of the client which the list of events will be filtered with
  string clientName = 10;
  // The MAC address of the Systems Manager device which the list of events will be filtered with
  string smDeviceMac = 11;
  // The name of the Systems Manager device which the list of events will be filtered with
  string smDeviceName = 12;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
  int32 perPage = 13;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 14;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 15;

}

message GetNetworkEventsEventTypesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkEventsEventTypesResponse {
  repeated GetNetworkEventsEventTypes200ResponseInner data = 1;
}

message GetNetworkFirmwareUpgradesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  // Group ID
  string groupId = 2;

}

message GetNetworkFirmwareUpgradesStagedGroupsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkFirmwareUpgradesStagedGroupsResponse {
  repeated GetNetworkFirmwareUpgradesStagedGroups200ResponseInner data = 1;
}

message GetNetworkFirmwareUpgradesStagedStagesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkFirmwareUpgradesStagedStagesResponse {
  repeated GetNetworkFirmwareUpgradesStagedStages200ResponseInner data = 1;
}

message GetNetworkFloorPlanRequest {
  // Network ID
  string networkId = 1;
  // Floor plan ID
  string floorPlanId = 2;

}

message GetNetworkFloorPlansRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkFloorPlansResponse {
  repeated GetNetworkFloorPlans200ResponseInner data = 1;
}

message GetNetworkGroupPoliciesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkGroupPoliciesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkGroupPolicyRequest {
  // Network ID
  string networkId = 1;
  // Group policy ID
  string groupPolicyId = 2;

}

message GetNetworkHealthAlertsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkHealthAlertsResponse {
  repeated GetNetworkHealthAlerts200ResponseInner data = 1;
}

message GetNetworkMerakiAuthUserRequest {
  // Network ID
  string networkId = 1;
  // Meraki auth user ID
  string merakiAuthUserId = 2;

}

message GetNetworkMerakiAuthUsersRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkMerakiAuthUsersResponse {
  repeated GetNetworkMerakiAuthUsers200ResponseInner data = 1;
}

message GetNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;

}

message GetNetworkMqttBrokersRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkMqttBrokersResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkNetflowRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkNetworkHealthChannelUtilizationRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 4;
  // The time resolution in seconds for returned data. The valid resolutions are: 600. The default is 600.
  int32 resolution = 5;
  // The number of entries per page returned. Acceptable range is 3 - 100. Default is 10.
  int32 perPage = 6;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 7;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 8;

}

message GetNetworkNetworkHealthChannelUtilizationResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkPiiPiiKeysRequest {
  // Network ID
  string networkId = 1;
  // The username of a Systems Manager user
  string username = 2;
  // The email of a network user account or a Systems Manager device
  string email = 3;
  // The MAC of a network client device or a Systems Manager device
  string mac = 4;
  // The serial of a Systems Manager device
  string serial = 5;
  // The IMEI of a Systems Manager device
  string imei = 6;
  // The MAC of a Bluetooth client
  string bluetoothMac = 7;

}

message GetNetworkPiiRequestRequest {
  // Network ID
  string networkId = 1;
  // Request ID
  string requestId = 2;

}

message GetNetworkPiiRequestsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkPiiRequestsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkPiiSmDevicesForKeyRequest {
  // Network ID
  string networkId = 1;
  // The username of a Systems Manager user
  string username = 2;
  // The email of a network user account or a Systems Manager device
  string email = 3;
  // The MAC of a network client device or a Systems Manager device
  string mac = 4;
  // The serial of a Systems Manager device
  string serial = 5;
  // The IMEI of a Systems Manager device
  string imei = 6;
  // The MAC of a Bluetooth client
  string bluetoothMac = 7;

}

message GetNetworkPiiSmOwnersForKeyRequest {
  // Network ID
  string networkId = 1;
  // The username of a Systems Manager user
  string username = 2;
  // The email of a network user account or a Systems Manager device
  string email = 3;
  // The MAC of a network client device or a Systems Manager device
  string mac = 4;
  // The serial of a Systems Manager device
  string serial = 5;
  // The IMEI of a Systems Manager device
  string imei = 6;
  // The MAC of a Bluetooth client
  string bluetoothMac = 7;

}

message GetNetworkPoliciesByClientRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 5;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 6;

}

message GetNetworkPoliciesByClientResponse {
  repeated GetNetworkPoliciesByClient200ResponseInner data = 1;
}

message GetNetworkSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSnmpRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkSplashLoginAttemptsRequest {
  // Network ID
  string networkId = 1;
  // Only return the login attempts for the specified SSID
  int32 ssidNumber = 2;
  // The username, email, or phone number used during login
  string loginIdentifier = 3;
  // The timespan, in seconds, for the login attempts. The period will be from [timespan] seconds ago until now. The maximum timespan is 3 months
  int32 timespan = 4;

}

message GetNetworkSplashLoginAttemptsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkSyslogServersRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkTopologyLinkLayerRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkTrafficRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 30 days from today.
  string t0 = 2;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 30 days.
  float timespan = 3;
  // Filter the data by device type: 'combined', 'wireless', 'switch' or 'appliance'. Defaults to 'combined'. When using 'combined', for each rule the data will come from the device type with the most usage.
  string deviceType = 4;

}

message GetNetworkTrafficResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkTrafficAnalysisRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkTrafficShapingApplicationCategoriesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkTrafficShapingDscpTaggingOptionsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkTrafficShapingDscpTaggingOptionsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkVlanProfileRequest {
  // Network ID
  string networkId = 1;
  // Iname
  string iname = 2;

}

message GetNetworkVlanProfilesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkVlanProfilesResponse {
  repeated GetNetworkVlanProfiles200ResponseInner data = 1;
}

message GetNetworkVlanProfilesAssignmentsByDeviceRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match.
  repeated string serials = 5;
  // Optional parameter to filter devices by product types.
  repeated string productTypes = 6;
  // Optional parameter to filter devices by Switch Stack ids.
  repeated string stackIds = 7;

}

message GetNetworkVlanProfilesAssignmentsByDeviceResponse {
  repeated GetNetworkVlanProfilesAssignmentsByDevice200ResponseInner data = 1;
}

message GetNetworkWebhooksHttpServerRequest {
  // Network ID
  string networkId = 1;
  // Http server ID
  string httpServerId = 2;

}

message GetNetworkWebhooksHttpServersRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWebhooksHttpServersResponse {
  repeated GetNetworkWebhooksHttpServers200ResponseInner data = 1;
}

message GetNetworkWebhooksPayloadTemplateRequest {
  // Network ID
  string networkId = 1;
  // Payload template ID
  string payloadTemplateId = 2;

}

message GetNetworkWebhooksPayloadTemplatesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWebhooksPayloadTemplatesResponse {
  repeated GetNetworkWebhooksPayloadTemplates200ResponseInner data = 1;
}

message GetNetworkWebhooksWebhookTestRequest {
  // Network ID
  string networkId = 1;
  // Webhook test ID
  string webhookTestId = 2;

}

message GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest {
  // Organization ID
  string organizationId = 1;
  // Device Type switch or wireless controller
  string deviceType = 2;
  // The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;

}

message GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse {
  repeated GetNetwork200Response data = 1;
}

message GetOrganizationNetworksRequest {
  // Organization ID
  string organizationId = 1;
  // An optional parameter that is the ID of a config template. Will return all networks bound to that template.
  string configTemplateId = 2;
  // An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false.
  bool isBoundToConfigTemplate = 3;
  // An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
  repeated string tags = 4;
  // An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
  string tagsFilterType = 5;
  // The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
  int32 perPage = 6;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 7;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 8;

}

message GetOrganizationNetworksResponse {
  repeated GetNetwork200Response data = 1;
}

message ProvisionNetworkClientsRequest {
  // Network ID
  string networkId = 1;
  ProvisionNetworkClientsRequest provisionNetworkClientsRequest = 2;

}

message ReassignNetworkVlanProfilesAssignmentsRequest {
  // Network ID
  string networkId = 1;
  ReassignNetworkVlanProfilesAssignmentsRequest reassignNetworkVlanProfilesAssignmentsRequest = 2;

}

message RemoveNetworkDevicesRequest {
  // Network ID
  string networkId = 1;
  RemoveNetworkDevicesRequest removeNetworkDevicesRequest = 2;

}

message RollbacksNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;
  RollbacksNetworkFirmwareUpgradesStagedEventsRequest rollbacksNetworkFirmwareUpgradesStagedEventsRequest = 2;

}

message SplitNetworkRequest {
  // Network ID
  string networkId = 1;

}

message UnbindNetworkRequest {
  // Network ID
  string networkId = 1;
  UnbindNetworkRequest unbindNetworkRequest = 2;

}

message UpdateNetworkRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkRequest updateNetworkRequest = 2;

}

message UpdateNetworkAlertsSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkAlertsSettingsRequest updateNetworkAlertsSettingsRequest = 2;

}

message UpdateNetworkClientPolicyRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;
  UpdateNetworkClientPolicyRequest updateNetworkClientPolicyRequest = 3;

}

message UpdateNetworkClientSplashAuthorizationStatusRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;
  UpdateNetworkClientSplashAuthorizationStatusRequest updateNetworkClientSplashAuthorizationStatusRequest = 3;

}

message UpdateNetworkFirmwareUpgradesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkFirmwareUpgradesRequest updateNetworkFirmwareUpgradesRequest = 2;

}

message UpdateNetworkFirmwareUpgradesStagedEventsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkFirmwareUpgradesStagedEventsRequest updateNetworkFirmwareUpgradesStagedEventsRequest = 2;

}

message UpdateNetworkFirmwareUpgradesStagedGroupRequest {
  // Network ID
  string networkId = 1;
  // Group ID
  string groupId = 2;
  CreateNetworkFirmwareUpgradesStagedGroupRequest createNetworkFirmwareUpgradesStagedGroupRequest = 3;

}

message UpdateNetworkFirmwareUpgradesStagedStagesRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkFirmwareUpgradesStagedStagesRequest updateNetworkFirmwareUpgradesStagedStagesRequest = 2;

}

message UpdateNetworkFirmwareUpgradesStagedStagesResponse {
  repeated GetNetworkFirmwareUpgradesStagedStages200ResponseInner data = 1;
}

message UpdateNetworkFloorPlanRequest {
  // Network ID
  string networkId = 1;
  // Floor plan ID
  string floorPlanId = 2;
  UpdateNetworkFloorPlanRequest updateNetworkFloorPlanRequest = 3;

}

message UpdateNetworkGroupPolicyRequest {
  // Network ID
  string networkId = 1;
  // Group policy ID
  string groupPolicyId = 2;
  UpdateNetworkGroupPolicyRequest updateNetworkGroupPolicyRequest = 3;

}

message UpdateNetworkMerakiAuthUserRequest {
  // Network ID
  string networkId = 1;
  // Meraki auth user ID
  string merakiAuthUserId = 2;
  UpdateNetworkMerakiAuthUserRequest updateNetworkMerakiAuthUserRequest = 3;

}

message UpdateNetworkMqttBrokerRequest {
  // Network ID
  string networkId = 1;
  // Mqtt broker ID
  string mqttBrokerId = 2;
  UpdateNetworkMqttBrokerRequest updateNetworkMqttBrokerRequest = 3;

}

message UpdateNetworkNetflowRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkNetflowRequest updateNetworkNetflowRequest = 2;

}

message UpdateNetworkSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSettingsRequest updateNetworkSettingsRequest = 2;

}

message UpdateNetworkSnmpRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSnmpRequest updateNetworkSnmpRequest = 2;

}

message UpdateNetworkSyslogServersRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkSyslogServersRequest updateNetworkSyslogServersRequest = 2;

}

message UpdateNetworkTrafficAnalysisRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkTrafficAnalysisRequest updateNetworkTrafficAnalysisRequest = 2;

}

message UpdateNetworkVlanProfileRequest {
  // Network ID
  string networkId = 1;
  // Iname
  string iname = 2;
  UpdateNetworkVlanProfileRequest updateNetworkVlanProfileRequest = 3;

}

message UpdateNetworkWebhooksHttpServerRequest {
  // Network ID
  string networkId = 1;
  // Http server ID
  string httpServerId = 2;
  UpdateNetworkWebhooksHttpServerRequest updateNetworkWebhooksHttpServerRequest = 3;

}

message UpdateNetworkWebhooksPayloadTemplateRequest {
  // Network ID
  string networkId = 1;
  // Payload template ID
  string payloadTemplateId = 2;
  UpdateNetworkWebhooksPayloadTemplateRequest updateNetworkWebhooksPayloadTemplateRequest = 3;

}

message VmxNetworkDevicesClaimRequest {
  // Network ID
  string networkId = 1;
  VmxNetworkDevicesClaimRequest vmxNetworkDevicesClaimRequest = 2;

}

