/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.wirelessservice;

import "google/protobuf/empty.proto";
import public "models/assign_network_wireless_ethernet_ports_profiles201_response.proto";
import public "models/assign_network_wireless_ethernet_ports_profiles_request.proto";
import public "models/create_network_wireless_ethernet_ports_profile_request.proto";
import public "models/create_network_wireless_rf_profile_request.proto";
import public "models/create_network_wireless_ssid_identity_psk_request.proto";
import public "models/get_device_wireless_bluetooth_settings200_response.proto";
import public "models/get_device_wireless_connection_stats200_response.proto";
import public "models/get_device_wireless_status200_response.proto";
import public "models/get_network_wireless_billing200_response.proto";
import public "models/get_network_wireless_bluetooth_settings200_response.proto";
import public "models/get_network_wireless_channel_utilization_history200_response_inner.proto";
import public "models/get_network_wireless_client_count_history200_response_inner.proto";
import public "models/get_network_wireless_connection_stats200_response.proto";
import public "models/get_network_wireless_data_rate_history200_response_inner.proto";
import public "models/get_network_wireless_ethernet_ports_profiles200_response_inner.proto";
import public "models/get_network_wireless_failed_connections200_response_inner.proto";
import public "models/get_network_wireless_latency_history200_response_inner.proto";
import public "models/get_network_wireless_rf_profiles200_response.proto";
import public "models/get_network_wireless_settings200_response.proto";
import public "models/get_network_wireless_signal_quality_history200_response_inner.proto";
import public "models/get_network_wireless_ssid_eap_override200_response.proto";
import public "models/get_network_wireless_ssid_identity_psks200_response_inner.proto";
import public "models/get_network_wireless_ssid_splash_settings200_response.proto";
import public "models/get_network_wireless_ssid_traffic_shaping_rules200_response.proto";
import public "models/get_network_wireless_ssids200_response_inner.proto";
import public "models/get_network_wireless_usage_history200_response_inner.proto";
import public "models/get_organization_wireless_devices_channel_utilization_by_device200_response_inner.proto";
import public "models/get_organization_wireless_devices_channel_utilization_by_network200_response_inner.proto";
import public "models/get_organization_wireless_devices_channel_utilization_history_by_device_by_interval200_response_inner.proto";
import public "models/get_organization_wireless_devices_channel_utilization_history_by_network_by_interval200_response_inner.proto";
import public "models/get_organization_wireless_devices_ethernet_statuses200_response_inner.proto";
import public "models/set_network_wireless_ethernet_ports_profiles_default200_response.proto";
import public "models/set_network_wireless_ethernet_ports_profiles_default_request.proto";
import public "models/todo_object_mapping.proto";
import public "models/update_device_wireless_alternate_management_interface_ipv6200_response.proto";
import public "models/update_device_wireless_alternate_management_interface_ipv6_request.proto";
import public "models/update_device_wireless_bluetooth_settings_request.proto";
import public "models/update_network_wireless_alternate_management_interface_request.proto";
import public "models/update_network_wireless_billing_request.proto";
import public "models/update_network_wireless_bluetooth_settings_request.proto";
import public "models/update_network_wireless_ethernet_ports_profile_request.proto";
import public "models/update_network_wireless_rf_profile_request.proto";
import public "models/update_network_wireless_settings_request.proto";
import public "models/update_network_wireless_ssid_bonjour_forwarding_request.proto";
import public "models/update_network_wireless_ssid_device_type_group_policies_request.proto";
import public "models/update_network_wireless_ssid_eap_override_request.proto";
import public "models/update_network_wireless_ssid_firewall_l3_firewall_rules_request.proto";
import public "models/update_network_wireless_ssid_firewall_l7_firewall_rules_request.proto";
import public "models/update_network_wireless_ssid_hotspot20_request.proto";
import public "models/update_network_wireless_ssid_identity_psk_request.proto";
import public "models/update_network_wireless_ssid_request.proto";
import public "models/update_network_wireless_ssid_schedules_request.proto";
import public "models/update_network_wireless_ssid_splash_settings_request.proto";
import public "models/update_network_wireless_ssid_traffic_shaping_rules_request.proto";
import public "models/update_network_wireless_ssid_vpn_request.proto";

service WirelessService {
  rpc AssignNetworkWirelessEthernetPortsProfiles (AssignNetworkWirelessEthernetPortsProfilesRequest) returns (AssignNetworkWirelessEthernetPortsProfiles201Response);

  rpc CreateNetworkWirelessEthernetPortsProfile (CreateNetworkWirelessEthernetPortsProfileRequest) returns (GetNetworkWirelessEthernetPortsProfiles200ResponseInner);

  rpc CreateNetworkWirelessRfProfile (CreateNetworkWirelessRfProfileRequest) returns (GetNetworkWirelessRfProfiles200Response);

  rpc CreateNetworkWirelessSsidIdentityPsk (CreateNetworkWirelessSsidIdentityPskRequest) returns (TODO_OBJECT_MAPPING);

  rpc DeleteNetworkWirelessEthernetPortsProfile (DeleteNetworkWirelessEthernetPortsProfileRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkWirelessRfProfile (DeleteNetworkWirelessRfProfileRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkWirelessSsidIdentityPsk (DeleteNetworkWirelessSsidIdentityPskRequest) returns (google.protobuf.Empty);

  rpc GetDeviceWirelessBluetoothSettings (GetDeviceWirelessBluetoothSettingsRequest) returns (GetDeviceWirelessBluetoothSettings200Response);

  rpc GetDeviceWirelessConnectionStats (GetDeviceWirelessConnectionStatsRequest) returns (GetDeviceWirelessConnectionStats200Response);

  rpc GetDeviceWirelessLatencyStats (GetDeviceWirelessLatencyStatsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceWirelessStatus (GetDeviceWirelessStatusRequest) returns (GetDeviceWirelessStatus200Response);

  rpc GetNetworkWirelessAirMarshal (GetNetworkWirelessAirMarshalRequest) returns (GetNetworkWirelessAirMarshalResponse);

  rpc GetNetworkWirelessAlternateManagementInterface (GetNetworkWirelessAlternateManagementInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessBilling (GetNetworkWirelessBillingRequest) returns (GetNetworkWirelessBilling200Response);

  rpc GetNetworkWirelessBluetoothSettings (GetNetworkWirelessBluetoothSettingsRequest) returns (GetNetworkWirelessBluetoothSettings200Response);

  rpc GetNetworkWirelessChannelUtilizationHistory (GetNetworkWirelessChannelUtilizationHistoryRequest) returns (GetNetworkWirelessChannelUtilizationHistoryResponse);

  rpc GetNetworkWirelessClientConnectionStats (GetNetworkWirelessClientConnectionStatsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessClientConnectivityEvents (GetNetworkWirelessClientConnectivityEventsRequest) returns (GetNetworkWirelessClientConnectivityEventsResponse);

  rpc GetNetworkWirelessClientCountHistory (GetNetworkWirelessClientCountHistoryRequest) returns (GetNetworkWirelessClientCountHistoryResponse);

  rpc GetNetworkWirelessClientLatencyHistory (GetNetworkWirelessClientLatencyHistoryRequest) returns (GetNetworkWirelessClientLatencyHistoryResponse);

  rpc GetNetworkWirelessClientLatencyStats (GetNetworkWirelessClientLatencyStatsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessClientsConnectionStats (GetNetworkWirelessClientsConnectionStatsRequest) returns (GetNetworkWirelessClientsConnectionStatsResponse);

  rpc GetNetworkWirelessClientsLatencyStats (GetNetworkWirelessClientsLatencyStatsRequest) returns (GetNetworkWirelessClientsLatencyStatsResponse);

  rpc GetNetworkWirelessConnectionStats (GetNetworkWirelessConnectionStatsRequest) returns (GetNetworkWirelessConnectionStats200Response);

  rpc GetNetworkWirelessDataRateHistory (GetNetworkWirelessDataRateHistoryRequest) returns (GetNetworkWirelessDataRateHistoryResponse);

  rpc GetNetworkWirelessDevicesConnectionStats (GetNetworkWirelessDevicesConnectionStatsRequest) returns (GetNetworkWirelessDevicesConnectionStatsResponse);

  rpc GetNetworkWirelessDevicesLatencyStats (GetNetworkWirelessDevicesLatencyStatsRequest) returns (GetNetworkWirelessDevicesLatencyStatsResponse);

  rpc GetNetworkWirelessEthernetPortsProfile (GetNetworkWirelessEthernetPortsProfileRequest) returns (GetNetworkWirelessEthernetPortsProfiles200ResponseInner);

  rpc GetNetworkWirelessEthernetPortsProfiles (GetNetworkWirelessEthernetPortsProfilesRequest) returns (GetNetworkWirelessEthernetPortsProfilesResponse);

  rpc GetNetworkWirelessFailedConnections (GetNetworkWirelessFailedConnectionsRequest) returns (GetNetworkWirelessFailedConnectionsResponse);

  rpc GetNetworkWirelessLatencyHistory (GetNetworkWirelessLatencyHistoryRequest) returns (GetNetworkWirelessLatencyHistoryResponse);

  rpc GetNetworkWirelessLatencyStats (GetNetworkWirelessLatencyStatsRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessMeshStatuses (GetNetworkWirelessMeshStatusesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessRfProfile (GetNetworkWirelessRfProfileRequest) returns (GetNetworkWirelessRfProfiles200Response);

  rpc GetNetworkWirelessRfProfiles (GetNetworkWirelessRfProfilesRequest) returns (GetNetworkWirelessRfProfiles200Response);

  rpc GetNetworkWirelessSettings (GetNetworkWirelessSettingsRequest) returns (GetNetworkWirelessSettings200Response);

  rpc GetNetworkWirelessSignalQualityHistory (GetNetworkWirelessSignalQualityHistoryRequest) returns (GetNetworkWirelessSignalQualityHistoryResponse);

  rpc GetNetworkWirelessSsid (GetNetworkWirelessSsidRequest) returns (GetNetworkWirelessSsids200ResponseInner);

  rpc GetNetworkWirelessSsidBonjourForwarding (GetNetworkWirelessSsidBonjourForwardingRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidDeviceTypeGroupPolicies (GetNetworkWirelessSsidDeviceTypeGroupPoliciesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidEapOverride (GetNetworkWirelessSsidEapOverrideRequest) returns (GetNetworkWirelessSsidEapOverride200Response);

  rpc GetNetworkWirelessSsidFirewallL3FirewallRules (GetNetworkWirelessSsidFirewallL3FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidFirewallL7FirewallRules (GetNetworkWirelessSsidFirewallL7FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidHotspot20 (GetNetworkWirelessSsidHotspot20Request) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidIdentityPsk (GetNetworkWirelessSsidIdentityPskRequest) returns (GetNetworkWirelessSsidIdentityPsks200ResponseInner);

  rpc GetNetworkWirelessSsidIdentityPsks (GetNetworkWirelessSsidIdentityPsksRequest) returns (GetNetworkWirelessSsidIdentityPsksResponse);

  rpc GetNetworkWirelessSsidSchedules (GetNetworkWirelessSsidSchedulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsidSplashSettings (GetNetworkWirelessSsidSplashSettingsRequest) returns (GetNetworkWirelessSsidSplashSettings200Response);

  rpc GetNetworkWirelessSsidTrafficShapingRules (GetNetworkWirelessSsidTrafficShapingRulesRequest) returns (GetNetworkWirelessSsidTrafficShapingRules200Response);

  rpc GetNetworkWirelessSsidVpn (GetNetworkWirelessSsidVpnRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkWirelessSsids (GetNetworkWirelessSsidsRequest) returns (GetNetworkWirelessSsidsResponse);

  rpc GetNetworkWirelessUsageHistory (GetNetworkWirelessUsageHistoryRequest) returns (GetNetworkWirelessUsageHistoryResponse);

  rpc GetOrganizationWirelessDevicesChannelUtilizationByDevice (GetOrganizationWirelessDevicesChannelUtilizationByDeviceRequest) returns (GetOrganizationWirelessDevicesChannelUtilizationByDeviceResponse);

  rpc GetOrganizationWirelessDevicesChannelUtilizationByNetwork (GetOrganizationWirelessDevicesChannelUtilizationByNetworkRequest) returns (GetOrganizationWirelessDevicesChannelUtilizationByNetworkResponse);

  rpc GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByInterval (GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalRequest) returns (GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalResponse);

  rpc GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByInterval (GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalRequest) returns (GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalResponse);

  rpc GetOrganizationWirelessDevicesEthernetStatuses (GetOrganizationWirelessDevicesEthernetStatusesRequest) returns (GetOrganizationWirelessDevicesEthernetStatusesResponse);

  rpc SetNetworkWirelessEthernetPortsProfilesDefault (SetNetworkWirelessEthernetPortsProfilesDefaultRequest) returns (SetNetworkWirelessEthernetPortsProfilesDefault200Response);

  rpc UpdateDeviceWirelessAlternateManagementInterfaceIpv6 (UpdateDeviceWirelessAlternateManagementInterfaceIpv6Request) returns (UpdateDeviceWirelessAlternateManagementInterfaceIpv6200Response);

  rpc UpdateDeviceWirelessBluetoothSettings (UpdateDeviceWirelessBluetoothSettingsRequest) returns (GetDeviceWirelessBluetoothSettings200Response);

  rpc UpdateNetworkWirelessAlternateManagementInterface (UpdateNetworkWirelessAlternateManagementInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessBilling (UpdateNetworkWirelessBillingRequest) returns (GetNetworkWirelessBilling200Response);

  rpc UpdateNetworkWirelessBluetoothSettings (UpdateNetworkWirelessBluetoothSettingsRequest) returns (GetNetworkWirelessBluetoothSettings200Response);

  rpc UpdateNetworkWirelessEthernetPortsProfile (UpdateNetworkWirelessEthernetPortsProfileRequest) returns (GetNetworkWirelessEthernetPortsProfiles200ResponseInner);

  rpc UpdateNetworkWirelessRfProfile (UpdateNetworkWirelessRfProfileRequest) returns (GetNetworkWirelessRfProfiles200Response);

  rpc UpdateNetworkWirelessSettings (UpdateNetworkWirelessSettingsRequest) returns (GetNetworkWirelessSettings200Response);

  rpc UpdateNetworkWirelessSsid (UpdateNetworkWirelessSsidRequest) returns (GetNetworkWirelessSsids200ResponseInner);

  rpc UpdateNetworkWirelessSsidBonjourForwarding (UpdateNetworkWirelessSsidBonjourForwardingRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidDeviceTypeGroupPolicies (UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidEapOverride (UpdateNetworkWirelessSsidEapOverrideRequest) returns (GetNetworkWirelessSsidEapOverride200Response);

  rpc UpdateNetworkWirelessSsidFirewallL3FirewallRules (UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidFirewallL7FirewallRules (UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidHotspot20 (UpdateNetworkWirelessSsidHotspot20Request) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidIdentityPsk (UpdateNetworkWirelessSsidIdentityPskRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidSchedules (UpdateNetworkWirelessSsidSchedulesRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkWirelessSsidSplashSettings (UpdateNetworkWirelessSsidSplashSettingsRequest) returns (GetNetworkWirelessSsidSplashSettings200Response);

  rpc UpdateNetworkWirelessSsidTrafficShapingRules (UpdateNetworkWirelessSsidTrafficShapingRulesRequest) returns (GetNetworkWirelessSsidTrafficShapingRules200Response);

  rpc UpdateNetworkWirelessSsidVpn (UpdateNetworkWirelessSsidVpnRequest) returns (TODO_OBJECT_MAPPING);

}

message AssignNetworkWirelessEthernetPortsProfilesRequest {
  // Network ID
  string networkId = 1;
  AssignNetworkWirelessEthernetPortsProfilesRequest assignNetworkWirelessEthernetPortsProfilesRequest = 2;

}

message CreateNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkWirelessEthernetPortsProfileRequest createNetworkWirelessEthernetPortsProfileRequest = 2;

}

message CreateNetworkWirelessRfProfileRequest {
  // Network ID
  string networkId = 1;
  CreateNetworkWirelessRfProfileRequest createNetworkWirelessRfProfileRequest = 2;

}

message CreateNetworkWirelessSsidIdentityPskRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  CreateNetworkWirelessSsidIdentityPskRequest createNetworkWirelessSsidIdentityPskRequest = 3;

}

message DeleteNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  // Profile ID
  string profileId = 2;

}

message DeleteNetworkWirelessRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;

}

message DeleteNetworkWirelessSsidIdentityPskRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  // Identity psk ID
  string identityPskId = 3;

}

message GetDeviceWirelessBluetoothSettingsRequest {
  // Serial
  string serial = 1;

}

message GetDeviceWirelessConnectionStatsRequest {
  // Serial
  string serial = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 4;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 5;
  // Filter results by SSID
  int32 ssid = 6;
  // Filter results by VLAN
  int32 vlan = 7;
  // Filter results by AP Tag
  string apTag = 8;

}

message GetDeviceWirelessLatencyStatsRequest {
  // Serial
  string serial = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 4;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 5;
  // Filter results by SSID
  int32 ssid = 6;
  // Filter results by VLAN
  int32 vlan = 7;
  // Filter results by AP Tag
  string apTag = 8;
  // Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
  string fields = 9;

}

message GetDeviceWirelessStatusRequest {
  // Serial
  string serial = 1;

}

message GetNetworkWirelessAirMarshalRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
  float timespan = 3;

}

message GetNetworkWirelessAirMarshalResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkWirelessAlternateManagementInterfaceRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessBillingRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessBluetoothSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessChannelUtilizationHistoryRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
  float timespan = 4;
  // The time resolution in seconds for returned data. The valid resolutions are: 600, 1200, 3600, 14400, 86400. The default is 86400.
  int32 resolution = 5;
  // Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
  bool autoResolution = 6;
  // Filter results by network client to return per-device, per-band AP channel utilization metrics inner joined by the queried client's connection history.
  string clientId = 7;
  // Filter results by device to return AP channel utilization metrics for the queried device; either :band or :clientId must be jointly specified.
  string deviceSerial = 8;
  // Filter results by AP tag to return AP channel utilization metrics for devices labeled with the given tag; either :clientId or :deviceSerial must be jointly specified.
  string apTag = 9;
  // Filter results by band (either '2.4', '5' or '6').
  string band = 10;

}

message GetNetworkWirelessChannelUtilizationHistoryResponse {
  repeated GetNetworkWirelessChannelUtilizationHistory200ResponseInner data = 1;
}

message GetNetworkWirelessClientConnectionStatsRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 3;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 4;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 5;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 6;
  // Filter results by SSID
  int32 ssid = 7;
  // Filter results by VLAN
  int32 vlan = 8;
  // Filter results by AP Tag
  string apTag = 9;

}

message GetNetworkWirelessClientConnectivityEventsRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;
  // The number of entries per page returned. Acceptable range is 3 - 1000.
  int32 perPage = 3;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 4;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 5;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 6;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 7;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
  float timespan = 8;
  // A list of event types to include. If not specified, events of all types will be returned. Valid types are 'assoc', 'disassoc', 'auth', 'deauth', 'dns', 'dhcp', 'roam', 'connection' and/or 'sticky'.
  repeated string types = 9;
  // A list of severities to include. If not specified, events of all severities will be returned. Valid severities are 'good', 'info', 'warn' and/or 'bad'.
  repeated string includedSeverities = 10;
  // Filter results by band (either '2.4', '5', '6').
  string band = 11;
  // An SSID number to include. If not specified, events for all SSIDs will be returned.
  int32 ssidNumber = 12;
  // Filter results by an AP's serial number.
  string deviceSerial = 13;

}

message GetNetworkWirelessClientConnectivityEventsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkWirelessClientCountHistoryRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
  float timespan = 4;
  // The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400.
  int32 resolution = 5;
  // Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
  bool autoResolution = 6;
  // Filter results by network client to return per-device client counts over time inner joined by the queried client's connection history.
  string clientId = 7;
  // Filter results by device.
  string deviceSerial = 8;
  // Filter results by AP tag.
  string apTag = 9;
  // Filter results by band (either '2.4', '5' or '6').
  string band = 10;
  // Filter results by SSID number.
  int32 ssid = 11;

}

message GetNetworkWirelessClientCountHistoryResponse {
  repeated GetNetworkWirelessClientCountHistory200ResponseInner data = 1;
}

message GetNetworkWirelessClientLatencyHistoryRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;
  // The beginning of the timespan for the data. The maximum lookback period is 791 days from today.
  string t0 = 3;
  // The end of the timespan for the data. t1 can be a maximum of 791 days after t0.
  string t1 = 4;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 791 days. The default is 1 day.
  float timespan = 5;
  // The time resolution in seconds for returned data. The valid resolutions are: 86400. The default is 86400.
  int32 resolution = 6;

}

message GetNetworkWirelessClientLatencyHistoryResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkWirelessClientLatencyStatsRequest {
  // Network ID
  string networkId = 1;
  // Client ID
  string clientId = 2;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 3;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 4;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 5;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 6;
  // Filter results by SSID
  int32 ssid = 7;
  // Filter results by VLAN
  int32 vlan = 8;
  // Filter results by AP Tag
  string apTag = 9;
  // Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
  string fields = 10;

}

message GetNetworkWirelessClientsConnectionStatsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 4;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 5;
  // Filter results by SSID
  int32 ssid = 6;
  // Filter results by VLAN
  int32 vlan = 7;
  // Filter results by AP Tag
  string apTag = 8;

}

message GetNetworkWirelessClientsConnectionStatsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkWirelessClientsLatencyStatsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 4;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 5;
  // Filter results by SSID
  int32 ssid = 6;
  // Filter results by VLAN
  int32 vlan = 7;
  // Filter results by AP Tag
  string apTag = 8;
  // Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
  string fields = 9;

}

message GetNetworkWirelessClientsLatencyStatsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkWirelessConnectionStatsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 4;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 5;
  // Filter results by SSID
  int32 ssid = 6;
  // Filter results by VLAN
  int32 vlan = 7;
  // Filter results by AP Tag
  string apTag = 8;

}

message GetNetworkWirelessDataRateHistoryRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
  float timespan = 4;
  // The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400.
  int32 resolution = 5;
  // Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
  bool autoResolution = 6;
  // Filter results by network client.
  string clientId = 7;
  // Filter results by device.
  string deviceSerial = 8;
  // Filter results by AP tag.
  string apTag = 9;
  // Filter results by band (either '2.4', '5' or '6').
  string band = 10;
  // Filter results by SSID number.
  int32 ssid = 11;

}

message GetNetworkWirelessDataRateHistoryResponse {
  repeated GetNetworkWirelessDataRateHistory200ResponseInner data = 1;
}

message GetNetworkWirelessDevicesConnectionStatsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 4;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 5;
  // Filter results by SSID
  int32 ssid = 6;
  // Filter results by VLAN
  int32 vlan = 7;
  // Filter results by AP Tag
  string apTag = 8;

}

message GetNetworkWirelessDevicesConnectionStatsResponse {
  repeated GetDeviceWirelessConnectionStats200Response data = 1;
}

message GetNetworkWirelessDevicesLatencyStatsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 4;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 5;
  // Filter results by SSID
  int32 ssid = 6;
  // Filter results by VLAN
  int32 vlan = 7;
  // Filter results by AP Tag
  string apTag = 8;
  // Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
  string fields = 9;

}

message GetNetworkWirelessDevicesLatencyStatsResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message GetNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  // Profile ID
  string profileId = 2;

}

message GetNetworkWirelessEthernetPortsProfilesRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessEthernetPortsProfilesResponse {
  repeated GetNetworkWirelessEthernetPortsProfiles200ResponseInner data = 1;
}

message GetNetworkWirelessFailedConnectionsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 4;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 5;
  // Filter results by SSID
  int32 ssid = 6;
  // Filter results by VLAN
  int32 vlan = 7;
  // Filter results by AP Tag
  string apTag = 8;
  // Filter by AP
  string serial = 9;
  // Filter by client MAC
  string clientId = 10;

}

message GetNetworkWirelessFailedConnectionsResponse {
  repeated GetNetworkWirelessFailedConnections200ResponseInner data = 1;
}

message GetNetworkWirelessLatencyHistoryRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
  float timespan = 4;
  // The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400.
  int32 resolution = 5;
  // Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
  bool autoResolution = 6;
  // Filter results by network client.
  string clientId = 7;
  // Filter results by device.
  string deviceSerial = 8;
  // Filter results by AP tag.
  string apTag = 9;
  // Filter results by band (either '2.4', '5' or '6').
  string band = 10;
  // Filter results by SSID number.
  int32 ssid = 11;
  // Filter by access category.
  string accessCategory = 12;

}

message GetNetworkWirelessLatencyHistoryResponse {
  repeated GetNetworkWirelessLatencyHistory200ResponseInner data = 1;
}

message GetNetworkWirelessLatencyStatsRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 180 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days.
  float timespan = 4;
  // Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information.
  string band = 5;
  // Filter results by SSID
  int32 ssid = 6;
  // Filter results by VLAN
  int32 vlan = 7;
  // Filter results by AP Tag
  string apTag = 8;
  // Partial selection: If present, this call will return only the selected fields of [\"rawDistribution\", \"avg\"]. All fields will be returned by default. Selected fields must be entered as a comma separated string.
  string fields = 9;

}

message GetNetworkWirelessMeshStatusesRequest {
  // Network ID
  string networkId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 500. Default is 50.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;

}

message GetNetworkWirelessRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;

}

message GetNetworkWirelessRfProfilesRequest {
  // Network ID
  string networkId = 1;
  // If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false.
  bool includeTemplateProfiles = 2;

}

message GetNetworkWirelessSettingsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessSignalQualityHistoryRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
  float timespan = 4;
  // The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400.
  int32 resolution = 5;
  // Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
  bool autoResolution = 6;
  // Filter results by network client.
  string clientId = 7;
  // Filter results by device.
  string deviceSerial = 8;
  // Filter results by AP tag; either :clientId or :deviceSerial must be jointly specified.
  string apTag = 9;
  // Filter results by band (either '2.4', '5' or '6').
  string band = 10;
  // Filter results by SSID number.
  int32 ssid = 11;

}

message GetNetworkWirelessSignalQualityHistoryResponse {
  repeated GetNetworkWirelessSignalQualityHistory200ResponseInner data = 1;
}

message GetNetworkWirelessSsidRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidBonjourForwardingRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidDeviceTypeGroupPoliciesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidEapOverrideRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidFirewallL3FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidFirewallL7FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidHotspot20Request {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidIdentityPskRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  // Identity psk ID
  string identityPskId = 3;

}

message GetNetworkWirelessSsidIdentityPsksRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidIdentityPsksResponse {
  repeated GetNetworkWirelessSsidIdentityPsks200ResponseInner data = 1;
}

message GetNetworkWirelessSsidSchedulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidSplashSettingsRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidTrafficShapingRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidVpnRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;

}

message GetNetworkWirelessSsidsRequest {
  // Network ID
  string networkId = 1;

}

message GetNetworkWirelessSsidsResponse {
  repeated GetNetworkWirelessSsids200ResponseInner data = 1;
}

message GetNetworkWirelessUsageHistoryRequest {
  // Network ID
  string networkId = 1;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 2;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 3;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
  float timespan = 4;
  // The time resolution in seconds for returned data. The valid resolutions are: 300, 600, 1200, 3600, 14400, 86400. The default is 86400.
  int32 resolution = 5;
  // Automatically select a data resolution based on the given timespan; this overrides the value specified by the 'resolution' parameter. The default setting is false.
  bool autoResolution = 6;
  // Filter results by network client to return per-device AP usage over time inner joined by the queried client's connection history.
  string clientId = 7;
  // Filter results by device. Requires :band.
  string deviceSerial = 8;
  // Filter results by AP tag; either :clientId or :deviceSerial must be jointly specified.
  string apTag = 9;
  // Filter results by band (either '2.4', '5' or '6').
  string band = 10;
  // Filter results by SSID number.
  int32 ssid = 11;

}

message GetNetworkWirelessUsageHistoryResponse {
  repeated GetNetworkWirelessUsageHistory200ResponseInner data = 1;
}

message GetOrganizationWirelessDevicesChannelUtilizationByDeviceRequest {
  // Organization ID
  string organizationId = 1;
  // Filter results by network.
  repeated string networkIds = 2;
  // Filter results by device.
  repeated string serials = 3;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // The beginning of the timespan for the data. The maximum lookback period is 90 days from today.
  string t0 = 7;
  // The end of the timespan for the data. t1 can be a maximum of 90 days after t0.
  string t1 = 8;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 90 days. The default is 7 days.
  float timespan = 9;
  // The time interval in seconds for returned data. The valid intervals are: 300, 600, 3600, 7200, 14400, 21600. The default is 3600.
  int32 interval = 10;

}

message GetOrganizationWirelessDevicesChannelUtilizationByDeviceResponse {
  repeated GetOrganizationWirelessDevicesChannelUtilizationByDevice200ResponseInner data = 1;
}

message GetOrganizationWirelessDevicesChannelUtilizationByNetworkRequest {
  // Organization ID
  string organizationId = 1;
  // Filter results by network.
  repeated string networkIds = 2;
  // Filter results by device.
  repeated string serials = 3;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // The beginning of the timespan for the data. The maximum lookback period is 90 days from today.
  string t0 = 7;
  // The end of the timespan for the data. t1 can be a maximum of 90 days after t0.
  string t1 = 8;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 90 days. The default is 7 days.
  float timespan = 9;
  // The time interval in seconds for returned data. The valid intervals are: 300, 600, 3600, 7200, 14400, 21600. The default is 3600.
  int32 interval = 10;

}

message GetOrganizationWirelessDevicesChannelUtilizationByNetworkResponse {
  repeated GetOrganizationWirelessDevicesChannelUtilizationByNetwork200ResponseInner data = 1;
}

message GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalRequest {
  // Organization ID
  string organizationId = 1;
  // Filter results by network.
  repeated string networkIds = 2;
  // Filter results by device.
  repeated string serials = 3;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 7;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 8;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
  float timespan = 9;
  // The time interval in seconds for returned data. The valid intervals are: 300, 600, 3600, 7200, 14400, 21600. The default is 3600.
  int32 interval = 10;

}

message GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalResponse {
  repeated GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByInterval200ResponseInner data = 1;
}

message GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalRequest {
  // Organization ID
  string organizationId = 1;
  // Filter results by network.
  repeated string networkIds = 2;
  // Filter results by device.
  repeated string serials = 3;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
  int32 perPage = 4;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 5;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 6;
  // The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
  string t0 = 7;
  // The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
  string t1 = 8;
  // The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
  float timespan = 9;
  // The time interval in seconds for returned data. The valid intervals are: 300, 600, 3600, 7200, 14400, 21600. The default is 3600.
  int32 interval = 10;

}

message GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalResponse {
  repeated GetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByInterval200ResponseInner data = 1;
}

message GetOrganizationWirelessDevicesEthernetStatusesRequest {
  // Organization ID
  string organizationId = 1;
  // The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100.
  int32 perPage = 2;
  // A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string startingAfter = 3;
  // A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
  string endingBefore = 4;
  // A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]=N_12345678&networkIds[]=L_3456
  repeated string networkIds = 5;

}

message GetOrganizationWirelessDevicesEthernetStatusesResponse {
  repeated GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner data = 1;
}

message SetNetworkWirelessEthernetPortsProfilesDefaultRequest {
  // Network ID
  string networkId = 1;
  SetNetworkWirelessEthernetPortsProfilesDefaultRequest setNetworkWirelessEthernetPortsProfilesDefaultRequest = 2;

}

message UpdateDeviceWirelessAlternateManagementInterfaceIpv6Request {
  // Serial
  string serial = 1;
  UpdateDeviceWirelessAlternateManagementInterfaceIpv6Request updateDeviceWirelessAlternateManagementInterfaceIpv6Request = 2;

}

message UpdateDeviceWirelessBluetoothSettingsRequest {
  // Serial
  string serial = 1;
  UpdateDeviceWirelessBluetoothSettingsRequest updateDeviceWirelessBluetoothSettingsRequest = 2;

}

message UpdateNetworkWirelessAlternateManagementInterfaceRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkWirelessAlternateManagementInterfaceRequest updateNetworkWirelessAlternateManagementInterfaceRequest = 2;

}

message UpdateNetworkWirelessBillingRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkWirelessBillingRequest updateNetworkWirelessBillingRequest = 2;

}

message UpdateNetworkWirelessBluetoothSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkWirelessBluetoothSettingsRequest updateNetworkWirelessBluetoothSettingsRequest = 2;

}

message UpdateNetworkWirelessEthernetPortsProfileRequest {
  // Network ID
  string networkId = 1;
  // Profile ID
  string profileId = 2;
  UpdateNetworkWirelessEthernetPortsProfileRequest updateNetworkWirelessEthernetPortsProfileRequest = 3;

}

message UpdateNetworkWirelessRfProfileRequest {
  // Network ID
  string networkId = 1;
  // Rf profile ID
  string rfProfileId = 2;
  UpdateNetworkWirelessRfProfileRequest updateNetworkWirelessRfProfileRequest = 3;

}

message UpdateNetworkWirelessSettingsRequest {
  // Network ID
  string networkId = 1;
  UpdateNetworkWirelessSettingsRequest updateNetworkWirelessSettingsRequest = 2;

}

message UpdateNetworkWirelessSsidRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidRequest updateNetworkWirelessSsidRequest = 3;

}

message UpdateNetworkWirelessSsidBonjourForwardingRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidBonjourForwardingRequest updateNetworkWirelessSsidBonjourForwardingRequest = 3;

}

message UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest updateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest = 3;

}

message UpdateNetworkWirelessSsidEapOverrideRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidEapOverrideRequest updateNetworkWirelessSsidEapOverrideRequest = 3;

}

message UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest updateNetworkWirelessSsidFirewallL3FirewallRulesRequest = 3;

}

message UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest updateNetworkWirelessSsidFirewallL7FirewallRulesRequest = 3;

}

message UpdateNetworkWirelessSsidHotspot20Request {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidHotspot20Request updateNetworkWirelessSsidHotspot20Request = 3;

}

message UpdateNetworkWirelessSsidIdentityPskRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  // Identity psk ID
  string identityPskId = 3;
  UpdateNetworkWirelessSsidIdentityPskRequest updateNetworkWirelessSsidIdentityPskRequest = 4;

}

message UpdateNetworkWirelessSsidSchedulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidSchedulesRequest updateNetworkWirelessSsidSchedulesRequest = 3;

}

message UpdateNetworkWirelessSsidSplashSettingsRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidSplashSettingsRequest updateNetworkWirelessSsidSplashSettingsRequest = 3;

}

message UpdateNetworkWirelessSsidTrafficShapingRulesRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidTrafficShapingRulesRequest updateNetworkWirelessSsidTrafficShapingRulesRequest = 3;

}

message UpdateNetworkWirelessSsidVpnRequest {
  // Network ID
  string networkId = 1;
  // Number
  string number = 2;
  UpdateNetworkWirelessSsidVpnRequest updateNetworkWirelessSsidVpnRequest = 3;

}

