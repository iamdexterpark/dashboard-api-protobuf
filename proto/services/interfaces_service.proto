/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.interfacesservice;

import "google/protobuf/empty.proto";
import public "models/create_device_switch_routing_interface_request.proto";
import public "models/create_network_switch_stack_routing_interface_request.proto";
import public "models/get_device_switch_routing_interfaces200_response_inner.proto";
import public "models/get_network_switch_stack_routing_interface_dhcp200_response.proto";
import public "models/todo_object_mapping.proto";
import public "models/update_device_switch_routing_interface_dhcp_request.proto";
import public "models/update_network_switch_stack_routing_interface_dhcp_request.proto";
import public "models/update_network_switch_stack_routing_interface_request.proto";

service InterfacesService {
  rpc CreateDeviceSwitchRoutingInterface (CreateDeviceSwitchRoutingInterfaceRequest) returns (GetDeviceSwitchRoutingInterfaces200ResponseInner);

  rpc CreateNetworkSwitchStackRoutingInterface (CreateNetworkSwitchStackRoutingInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc DeleteDeviceSwitchRoutingInterface (DeleteDeviceSwitchRoutingInterfaceRequest) returns (google.protobuf.Empty);

  rpc DeleteNetworkSwitchStackRoutingInterface (DeleteNetworkSwitchStackRoutingInterfaceRequest) returns (google.protobuf.Empty);

  rpc GetDeviceSwitchRoutingInterface (GetDeviceSwitchRoutingInterfaceRequest) returns (GetDeviceSwitchRoutingInterfaces200ResponseInner);

  rpc GetDeviceSwitchRoutingInterfaceDhcp (GetDeviceSwitchRoutingInterfaceDhcpRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetDeviceSwitchRoutingInterfaces (GetDeviceSwitchRoutingInterfacesRequest) returns (GetDeviceSwitchRoutingInterfacesResponse);

  rpc GetNetworkSwitchStackRoutingInterface (GetNetworkSwitchStackRoutingInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc GetNetworkSwitchStackRoutingInterfaceDhcp (GetNetworkSwitchStackRoutingInterfaceDhcpRequest) returns (GetNetworkSwitchStackRoutingInterfaceDhcp200Response);

  rpc GetNetworkSwitchStackRoutingInterfaces (GetNetworkSwitchStackRoutingInterfacesRequest) returns (GetNetworkSwitchStackRoutingInterfacesResponse);

  rpc UpdateDeviceSwitchRoutingInterface (UpdateDeviceSwitchRoutingInterfaceRequest) returns (GetDeviceSwitchRoutingInterfaces200ResponseInner);

  rpc UpdateDeviceSwitchRoutingInterfaceDhcp (UpdateDeviceSwitchRoutingInterfaceDhcpRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchStackRoutingInterface (UpdateNetworkSwitchStackRoutingInterfaceRequest) returns (TODO_OBJECT_MAPPING);

  rpc UpdateNetworkSwitchStackRoutingInterfaceDhcp (UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest) returns (TODO_OBJECT_MAPPING);

}

message CreateDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = 2;

}

message CreateNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  CreateNetworkSwitchStackRoutingInterfaceRequest createNetworkSwitchStackRoutingInterfaceRequest = 3;

}

message DeleteDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;

}

message DeleteNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;

}

message GetDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;

}

message GetDeviceSwitchRoutingInterfaceDhcpRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;

}

message GetDeviceSwitchRoutingInterfacesRequest {
  // Serial
  string serial = 1;

}

message GetDeviceSwitchRoutingInterfacesResponse {
  repeated GetDeviceSwitchRoutingInterfaces200ResponseInner data = 1;
}

message GetNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;

}

message GetNetworkSwitchStackRoutingInterfaceDhcpRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;

}

message GetNetworkSwitchStackRoutingInterfacesRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;

}

message GetNetworkSwitchStackRoutingInterfacesResponse {
  repeated TODO_OBJECT_MAPPING data = 1;
}

message UpdateDeviceSwitchRoutingInterfaceRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;
  CreateDeviceSwitchRoutingInterfaceRequest createDeviceSwitchRoutingInterfaceRequest = 3;

}

message UpdateDeviceSwitchRoutingInterfaceDhcpRequest {
  // Serial
  string serial = 1;
  // Interface ID
  string interfaceId = 2;
  UpdateDeviceSwitchRoutingInterfaceDhcpRequest updateDeviceSwitchRoutingInterfaceDhcpRequest = 3;

}

message UpdateNetworkSwitchStackRoutingInterfaceRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;
  UpdateNetworkSwitchStackRoutingInterfaceRequest updateNetworkSwitchStackRoutingInterfaceRequest = 4;

}

message UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest {
  // Network ID
  string networkId = 1;
  // Switch stack ID
  string switchStackId = 2;
  // Interface ID
  string interfaceId = 3;
  UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest updateNetworkSwitchStackRoutingInterfaceDhcpRequest = 4;

}

