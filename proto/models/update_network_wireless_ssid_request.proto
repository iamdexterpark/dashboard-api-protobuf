/*
  Meraki Dashboard API

  A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 04 October, 2023 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

  The version of the OpenAPI document: 1.38.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools;

import public "models/update_network_appliance_ssid_request_dot11w.proto";
import public "models/update_network_wireless_ssid_request_active_directory.proto";
import public "models/update_network_wireless_ssid_request_ap_tags_and_vlan_ids_inner.proto";
import public "models/update_network_wireless_ssid_request_dns_rewrite.proto";
import public "models/update_network_wireless_ssid_request_dot11r.proto";
import public "models/update_network_wireless_ssid_request_gre.proto";
import public "models/update_network_wireless_ssid_request_ldap.proto";
import public "models/update_network_wireless_ssid_request_local_radius.proto";
import public "models/update_network_wireless_ssid_request_named_vlans.proto";
import public "models/update_network_wireless_ssid_request_oauth.proto";
import public "models/update_network_wireless_ssid_request_radius_accounting_servers_inner.proto";
import public "models/update_network_wireless_ssid_request_radius_servers_inner.proto";
import public "models/update_network_wireless_ssid_request_speed_burst.proto";

message UpdateNetworkWirelessSsidRequest {

  // The name of the SSID
  string name = 3373707;

  // Whether or not the SSID is enabled
  bool enabled = 535852225;

  // The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius', 'ipsk-without-radius' or 'ipsk-with-nac')
  enum AuthModeEnum {
    AuthModeEnum__8021X_GOOGLE = 0;
    AuthModeEnum__8021X_LOCALRADIUS = 1;
    AuthModeEnum__8021X_MERAKI = 2;
    AuthModeEnum__8021X_NAC = 3;
    AuthModeEnum__8021X_RADIUS = 4;
    AuthModeEnum_IPSK_WITH_NAC = 5;
    AuthModeEnum_IPSK_WITH_RADIUS = 6;
    AuthModeEnum_IPSK_WITHOUT_RADIUS = 7;
    AuthModeEnum_OPEN = 8;
    AuthModeEnum_OPEN_ENHANCED = 9;
    AuthModeEnum_OPEN_WITH_NAC = 10;
    AuthModeEnum_OPEN_WITH_RADIUS = 11;
    AuthModeEnum_PSK = 12;
  }

  AuthModeEnum authMode = 358315885;

  // Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
  enum EnterpriseAdminAccessEnum {
    EnterpriseAdminAccessEnum_DISABLED = 0;
    EnterpriseAdminAccessEnum_ENABLED = 1;
  }

  EnterpriseAdminAccessEnum enterpriseAdminAccess = 160109711;

  // The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'
  enum EncryptionModeEnum {
    EncryptionModeEnum_WEP = 0;
    EncryptionModeEnum_WPA = 1;
  }

  EncryptionModeEnum encryptionMode = 49134652;

  // The passkey for the SSID. This param is only valid if the authMode is 'psk'
  string psk = 111304;

  // The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode', 'WPA3 only' or 'WPA3 192-bit Security')
  enum WpaEncryptionModeEnum {
    WpaEncryptionModeEnum_WPA1_AND_WPA2 = 0;
    WpaEncryptionModeEnum_WPA1_ONLY = 1;
    WpaEncryptionModeEnum_WPA2_ONLY = 2;
    WpaEncryptionModeEnum_WPA3_192_BIT_SECURITY = 3;
    WpaEncryptionModeEnum_WPA3_TRANSITION_MODE = 4;
    WpaEncryptionModeEnum_WPA3_ONLY = 5;
  }

  WpaEncryptionModeEnum wpaEncryptionMode = 62679412;

  UpdateNetworkApplianceSsidRequestDot11w dot11w = 252295060;

  UpdateNetworkWirelessSsidRequestDot11r dot11r = 252295065;

  // The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain'). This attribute is not supported for template children.
  enum SplashPageEnum {
    SplashPageEnum_BILLING = 0;
    SplashPageEnum_CISCO_ISE = 1;
    SplashPageEnum_CLICK_THROUGH_SPLASH_PAGE = 2;
    SplashPageEnum_FACEBOOK_WI_FI = 3;
    SplashPageEnum_GOOGLE_APPS_DOMAIN = 4;
    SplashPageEnum_GOOGLE_OAUTH = 5;
    SplashPageEnum_NONE = 6;
    SplashPageEnum_PASSWORD_PROTECTED_WITH_ACTIVE_DIRECTORY = 7;
    SplashPageEnum_PASSWORD_PROTECTED_WITH_LDAP = 8;
    SplashPageEnum_PASSWORD_PROTECTED_WITH_MERAKI_RADIUS = 9;
    SplashPageEnum_PASSWORD_PROTECTED_WITH_CUSTOM_RADIUS = 10;
    SplashPageEnum_SMS_AUTHENTICATION = 11;
    SplashPageEnum_SPONSORED_GUEST = 12;
    SplashPageEnum_SYSTEMS_MANAGER_SENTRY = 13;
  }

  SplashPageEnum splashPage = 54949272;

  // Array of valid sponsor email domains for sponsored guest splash type.
  repeated string splashGuestSponsorDomains = 143242697;

  UpdateNetworkWirelessSsidRequestOauth oauth = 105516695;

  UpdateNetworkWirelessSsidRequestLocalRadius localRadius = 296795103;

  UpdateNetworkWirelessSsidRequestLdap ldap = 3316647;

  UpdateNetworkWirelessSsidRequestActiveDirectory activeDirectory = 526760441;

  // The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
  repeated UpdateNetworkWirelessSsidRequestRadiusServersInner radiusServers = 486015843;

  // If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
  bool radiusProxyEnabled = 293349725;

  // If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki_8021x_test' to ensure that the RADIUS servers are reachable.
  bool radiusTestingEnabled = 13783109;

  // The template of the called station identifier to be used for RADIUS (ex. $NODE_MAC$:$VAP_NUM$).
  string radiusCalledStationId = 419907714;

  // The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE_MAC$:$VAP_NUM$).
  string radiusAuthenticationNasId = 338296623;

  // The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
  int32 radiusServerTimeout = 72428246;

  // The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
  int32 radiusServerAttemptsLimit = 203050082;

  // Whether or not higher priority RADIUS servers should be retried after 60 seconds.
  bool radiusFallbackEnabled = 495276275;

  // If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
  bool radiusCoaEnabled = 320586181;

  // This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')
  enum RadiusFailoverPolicyEnum {
    RadiusFailoverPolicyEnum_ALLOW_ACCESS = 0;
    RadiusFailoverPolicyEnum_DENY_ACCESS = 1;
  }

  RadiusFailoverPolicyEnum radiusFailoverPolicy = 21382667;

  // This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')
  enum RadiusLoadBalancingPolicyEnum {
    RadiusLoadBalancingPolicyEnum_ROUND_ROBIN = 0;
    RadiusLoadBalancingPolicyEnum_STRICT_PRIORITY_ORDER = 1;
  }

  RadiusLoadBalancingPolicyEnum radiusLoadBalancingPolicy = 255862645;

  // Whether or not RADIUS accounting is enabled. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
  bool radiusAccountingEnabled = 1640571;

  // The RADIUS accounting 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius' and radiusAccountingEnabled is 'true'
  repeated UpdateNetworkWirelessSsidRequestRadiusAccountingServersInner radiusAccountingServers = 162711863;

  // The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
  int32 radiusAccountingInterimInterval = 533845988;

  // Specify the RADIUS attribute used to look up group policies ('Filter-Id', 'Reply-Message', 'Airespace-ACL-Name' or 'Aruba-User-Role'). Access points must receive this attribute in the RADIUS Access-Accept message
  enum RadiusAttributeForGroupPoliciesEnum {
    RadiusAttributeForGroupPoliciesEnum_AIRESPACE_ACL_NAME = 0;
    RadiusAttributeForGroupPoliciesEnum_ARUBA_USER_ROLE = 1;
    RadiusAttributeForGroupPoliciesEnum_FILTER_ID = 2;
    RadiusAttributeForGroupPoliciesEnum_REPLY_MESSAGE = 3;
  }

  RadiusAttributeForGroupPoliciesEnum radiusAttributeForGroupPolicies = 440672019;

  // The client IP assignment mode ('NAT mode', 'Bridge mode', 'Layer 3 roaming', 'Ethernet over GRE', 'Layer 3 roaming with a concentrator' or 'VPN')
  string ipAssignmentMode = 192983275;

  // Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
  bool useVlanTagging = 331076045;

  // The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
  string concentratorNetworkId = 465753941;

  // The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
  string secondaryConcentratorNetworkId = 273889178;

  // Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
  bool disassociateClientsOnVpnFailover = 86490132;

  // The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
  int32 vlanId = 277118499;

  // The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
  int32 defaultVlanId = 514903936;

  // The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
  repeated UpdateNetworkWirelessSsidRequestApTagsAndVlanIdsInner apTagsAndVlanIds = 320161670;

  // Allow access to a configurable list of IP ranges, which users may access prior to sign-on.
  bool walledGardenEnabled = 451377693;

  // Specify your walled garden by entering an array of addresses, ranges using CIDR notation, domain names, and domain wildcards (e.g. '192.168.1.1/24', '192.168.37.10/32', 'www.yahoo.com', '*.google.com']). Meraki's splash page is automatically included in your walled garden.
  repeated string walledGardenRanges = 225503245;

  UpdateNetworkWirelessSsidRequestGre gre = 102618;

  // If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
  bool radiusOverride = 190528129;

  // Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
  bool radiusGuestVlanEnabled = 51001321;

  // VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
  int32 radiusGuestVlanId = 60745190;

  // The minimum bitrate in Mbps of this SSID in the default indoor RF profile. ('1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54')
  float minBitrate = 214430534;

  // The client-serving radio frequencies of this SSID in the default indoor RF profile. ('Dual band operation', '5 GHz band only' or 'Dual band operation with Band Steering')
  string bandSelection = 258492715;

  // The upload bandwidth limit in Kbps. (0 represents no limit.)
  int32 perClientBandwidthLimitUp = 152923439;

  // The download bandwidth limit in Kbps. (0 represents no limit.)
  int32 perClientBandwidthLimitDown = 393160375;

  // The total upload bandwidth limit in Kbps. (0 represents no limit.)
  int32 perSsidBandwidthLimitUp = 306534429;

  // The total download bandwidth limit in Kbps. (0 represents no limit.)
  int32 perSsidBandwidthLimitDown = 163048031;

  // Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
  bool lanIsolationEnabled = 360377270;

  // Boolean indicating whether APs should advertise or hide this SSID. APs will only broadcast this SSID if set to true
  bool visible = 466743410;

  // Boolean indicating whether all APs should broadcast the SSID or if it should be restricted to APs matching any availability tags. Can only be false if the SSID has availability tags.
  bool availableOnAllAps = 280230552;

  // Accepts a list of tags for this SSID. If availableOnAllAps is false, then the SSID will only be broadcast by APs with tags matching any of the tags in this list.
  repeated string availabilityTags = 64514031;

  // If true, Mandatory DHCP will enforce that clients connecting to this SSID must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate.
  bool mandatoryDhcpEnabled = 361039479;

  // Boolean indicating whether or not adult content will be blocked
  bool adultContentFilteringEnabled = 380376588;

  UpdateNetworkWirelessSsidRequestDnsRewrite dnsRewrite = 286905382;

  UpdateNetworkWirelessSsidRequestSpeedBurst speedBurst = 68685082;

  UpdateNetworkWirelessSsidRequestNamedVlans namedVlans = 289064009;

}
